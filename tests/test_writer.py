from pytest import fixture

from pip.index import FormatControl
from prequ.utils import comment
from prequ.writer import OutputWriter


@fixture
def writer():
    return OutputWriter(src_files=["src_file", "src_file2"], dst_file="dst_file",
                        dry_run=True,
                        emit_header=True, emit_index=True, emit_trusted_host=True,
                        annotate=True,
                        generate_hashes=False,
                        default_index_url=None, index_urls=[],
                        trusted_hosts=[],
                        find_links=[],
                        format_control=FormatControl(set(), set()))


def test_format_requirement_annotation_editable(from_editable, writer):
    # Annotations are printed as comments at a fixed column
    ireq = from_editable('git+git://fake.org/x/y.git#egg=y')
    reverse_dependencies = {'y': ['xyz']}

    assert (writer._format_requirement(ireq,
                                       reverse_dependencies,
                                       primary_packages=[]) ==
            '-e git+git://fake.org/x/y.git#egg=y  ' + comment('# via xyz'))


def test_format_requirement_annotation(from_line, writer):
    ireq = from_line('test==1.2')
    reverse_dependencies = {'test': ['xyz']}

    assert (writer._format_requirement(ireq,
                                       reverse_dependencies,
                                       primary_packages=[]) ==
            'test==1.2                 ' + comment('# via xyz'))


def test_format_requirement_annotation_case_sensitive(from_line, writer):
    ireq = from_line('Test==1.2')
    reverse_dependencies = {'test': ['xyz']}

    assert (writer._format_requirement(ireq,
                                       reverse_dependencies,
                                       primary_packages=[]) ==
            'Test==1.2                 ' + comment('# via xyz'))


def test_format_requirement_not_for_primary(from_line, writer):
    "Primary packages should not get annotated."
    ireq = from_line('test==1.2')
    reverse_dependencies = {'test': ['xyz']}

    assert (writer._format_requirement(ireq,
                                       reverse_dependencies,
                                       primary_packages=['test']) ==
            'test==1.2')


def test_iter_lines_ignores_dependencies_of_unsafe(from_line, writer):
    lines = writer._iter_lines(
        results=[from_line('test'), from_line('setuptools'), from_line('appdirs')],
        reverse_dependencies={'appdirs': ['setuptools'], 'setuptools': ['test']},
        primary_packages=['test'],
        hashes=None)
    expected = [
        '\x1b[32m# This file is autogenerated by Prequ.  To update, run:\x1b[0m',
        '\x1b[32m#\x1b[0m',
        '\x1b[32m#   prequ compile-in --output-file dst_file src_file src_file2\x1b[0m',
        '\x1b[32m#\x1b[0m',
        'test',
        '',
        '\x1b[32m# The following packages are considered to be unsafe in a requirements file:\x1b[0m',
        '\x1b[32m# setuptools                \x1b[32m# via test\x1b[0m\x1b[0m',
        '',
        ('\x1b[32m# The following packages are required only by packages'
         ' considered to be unsafe in a requirements file:\x1b[0m'),
        '\x1b[32m# appdirs                   \x1b[32m# via setuptools\x1b[0m\x1b[0m',
    ]
    assert list(lines) == expected


def test_iter_lines_does_not_ignore_dependencies_of_unsafe_and_package(from_line, writer):
    lines = writer._iter_lines(
        results=[from_line('test'), from_line('setuptools'), from_line('appdirs')],
        reverse_dependencies={'appdirs': ['test', 'setuptools'], 'setuptools': ['test']},
        primary_packages=['test'],
        hashes=None)
    expected = [
        '\x1b[32m# This file is autogenerated by Prequ.  To update, run:\x1b[0m',
        '\x1b[32m#\x1b[0m',
        '\x1b[32m#   prequ compile-in --output-file dst_file src_file src_file2\x1b[0m',
        '\x1b[32m#\x1b[0m',
        'appdirs                   \x1b[32m# via setuptools, test\x1b[0m',
        'test',
        '',
        '\x1b[32m# The following packages are considered to be unsafe in a requirements file:\x1b[0m',
        '\x1b[32m# setuptools                \x1b[32m# via test\x1b[0m\x1b[0m',
    ]
    assert list(lines) == expected
