{"coverage": {"3.4b2": "----------------------------\n\n- Completely unexecuted files can now be included in coverage results, reported\n  as 0% covered.  This only happens if the --source option is specified, since\n  coverage.py needs guidance about where to look for source files.\n\n- The XML report output now properly includes a percentage for branch coverage,\n  fixing `issue 65`_ and `issue 81`_.\n\n- Coverage percentages are now displayed uniformly across reporting methods.\n  Previously, different reports could round percentages differently.  Also,\n  percentages are only reported as 0% or 100% if they are truly 0 or 100, and\n  are rounded otherwise.  Fixes `issue 41`_ and `issue 70`_.\n\n- The precision of reported coverage percentages can be set with the\n  ``[report] precision`` config file setting.  Completes `issue 16`_.\n\n- Threads derived from ``threading.Thread`` with an overridden `run` method\n  would report no coverage for the `run` method.  This is now fixed, closing\n  `issue 85`_.\n\n.. _issue 16: https://bitbucket.org/ned/coveragepy/issues/16/allow-configuration-of-accuracy-of-percentage-totals\n.. _issue 41: https://bitbucket.org/ned/coveragepy/issues/41/report-says-100-when-it-isnt-quite-there\n.. _issue 65: https://bitbucket.org/ned/coveragepy/issues/65/branch-option-not-reported-in-cobertura\n.. _issue 70: https://bitbucket.org/ned/coveragepy/issues/70/text-report-and-html-report-disagree-on-coverage\n.. _issue 81: https://bitbucket.org/ned/coveragepy/issues/81/xml-report-does-not-have-condition-coverage-attribute-for-lines-with-a\n.. _issue 85: https://bitbucket.org/ned/coveragepy/issues/85/threadrun-isnt-measured\n\n\n", "3.5b1": "----------------------------\n\n- The HTML report now has hotkeys.  Try ``n``, ``s``, ``m``, ``x``, ``b``,\n  ``p``, and ``c`` on the overview page to change the column sorting.\n  On a file page, ``r``, ``m``, ``x``, and ``p`` toggle the run, missing,\n  excluded, and partial line markings.  You can navigate the highlighted\n  sections of code by using the ``j`` and ``k`` keys for next and previous.\n  The ``1`` (one) key jumps to the first highlighted section in the file,\n  and ``0`` (zero) scrolls to the top of the file.\n\n- The ``--omit`` and ``--include`` switches now interpret their values more\n  usefully.  If the value starts with a wildcard character, it is used as-is.\n  If it does not, it is interpreted relative to the current directory.\n  Closes `issue 121`_.\n\n- Partial branch warnings can now be pragma'd away.  The configuration option\n  ``partial_branches`` is a list of regular expressions.  Lines matching any of\n  those expressions will never be marked as a partial branch.  In addition,\n  there's a built-in list of regular expressions marking statements which\n  should never be marked as partial.  This list includes ``while True:``,\n  ``while 1:``, ``if 1:``, and ``if 0:``.\n\n- The ``coverage()`` constructor accepts single strings for the ``omit=`` and\n  ``include=`` arguments, adapting to a common error in programmatic use.\n\n- Modules can now be run directly using ``coverage run -m modulename``, to\n  mirror Python's ``-m`` flag.  Closes `issue 95`_, thanks, Brandon Rhodes.\n\n- ``coverage run`` didn't emulate Python accurately in one small detail: the\n  current directory inserted into ``sys.path`` was relative rather than\n  absolute. This is now fixed.\n\n- HTML reporting is now incremental: a record is kept of the data that\n  produced the HTML reports, and only files whose data has changed will\n  be generated.  This should make most HTML reporting faster.\n\n- Pathological code execution could disable the trace function behind our\n  backs, leading to incorrect code measurement.  Now if this happens,\n  coverage.py will issue a warning, at least alerting you to the problem.\n  Closes `issue 93`_.  Thanks to Marius Gedminas for the idea.\n\n- The C-based trace function now behaves properly when saved and restored\n  with ``sys.gettrace()`` and ``sys.settrace()``.  This fixes `issue 125`_\n  and `issue 123`_.  Thanks, Devin Jeanpierre.\n\n- Source files are now opened with Python 3.2's ``tokenize.open()`` where\n  possible, to get the best handling of Python source files with encodings.\n  Closes `issue 107`_, thanks, Brett Cannon.\n\n- Syntax errors in supposed Python files can now be ignored during reporting\n  with the ``-i`` switch just like other source errors.  Closes `issue 115`_.\n\n- Installation from source now succeeds on machines without a C compiler,\n  closing `issue 80`_.\n\n- Coverage.py can now be run directly from a working tree by specifying\n  the directory name to python:  ``python coverage_py_working_dir run ...``.\n  Thanks, Brett Cannon.\n\n- A little bit of Jython support: `coverage run` can now measure Jython\n  execution by adapting when $py.class files are traced. Thanks, Adi Roiban.\n  Jython still doesn't provide the Python libraries needed to make\n  coverage reporting work, unfortunately.\n\n- Internally, files are now closed explicitly, fixing `issue 104`_.  Thanks,\n  Brett Cannon.\n\n.. _issue 80: https://bitbucket.org/ned/coveragepy/issues/80/is-there-a-duck-typing-way-to-know-we-cant\n.. _issue 93: https://bitbucket.org/ned/coveragepy/issues/93/copying-a-mock-object-breaks-coverage\n.. _issue 95: https://bitbucket.org/ned/coveragepy/issues/95/run-subcommand-should-take-a-module-name\n.. _issue 104: https://bitbucket.org/ned/coveragepy/issues/104/explicitly-close-files\n.. _issue 107: https://bitbucket.org/ned/coveragepy/issues/107/codeparser-not-opening-source-files-with\n.. _issue 115: https://bitbucket.org/ned/coveragepy/issues/115/fail-gracefully-when-reporting-on-file\n.. _issue 121: https://bitbucket.org/ned/coveragepy/issues/121/filename-patterns-are-applied-stupidly\n.. _issue 123: https://bitbucket.org/ned/coveragepy/issues/123/pyeval_settrace-used-in-way-that-breaks\n.. _issue 125: https://bitbucket.org/ned/coveragepy/issues/125/coverage-removes-decoratortoolss-tracing\n\n\n.. _changes_34:\n\n", "2.6": "--------------------------\n\n- Applied Joseph Tate's patch for function decorators.\n\n- Applied Sigve Tjora and Mark van der Wal's fixes for argument handling.\n\n- Applied Geoff Bache's parallel mode patch.\n\n- Refactorings to improve testability. Fixes to command-line logic for parallel\n  mode and collect.\n\n\n", "4.4b1": "----------------------------\n\n- Some warnings can now be individually disabled.  Warnings that can be\n  disabled have a short name appended.  The ``[run] disable_warnings`` setting\n  takes a list of these warning names to disable. Closes both `issue 96`_ and\n  `issue 355`_.\n\n- The XML report now includes attributes from version 4 of the Cobertura XML\n  format, fixing `issue 570`_.\n\n- In previous versions, calling a method that used collected data would prevent\n  further collection.  For example, `save()`, `report()`, `html_report()`, and\n  others would all stop collection.  An explicit `start()` was needed to get it\n  going again.  This is no longer true.  Now you can use the collected data and\n  also continue measurement. Both `issue 79`_ and `issue 448`_ described this\n  problem, and have been fixed.\n\n- Plugins can now find unexecuted files if they choose, by implementing the\n  `find_executable_files` method.  Thanks, Emil Madsen.\n\n- Minimal IronPython support. You should be able to run IronPython programs\n  under ``coverage run``, though you will still have to do the reporting phase\n  with CPython.\n\n- Coverage.py has long had a special hack to support CPython's need to measure\n  the coverage of the standard library tests. This code was not installed by\n  kitted versions of coverage.py.  Now it is.\n\n.. _issue 79: https://bitbucket.org/ned/coveragepy/issues/79/save-prevents-harvesting-on-stop\n.. _issue 96: https://bitbucket.org/ned/coveragepy/issues/96/unhelpful-warnings-produced-when-using\n.. _issue 355: https://bitbucket.org/ned/coveragepy/issues/355/warnings-should-be-suppressable\n.. _issue 448: https://bitbucket.org/ned/coveragepy/issues/448/save-and-html_report-prevent-further\n.. _issue 570: https://bitbucket.org/ned/coveragepy/issues/570/cobertura-coverage-04dtd-support\n\n\n.. _changes_434:\n\n", "4.4": "--------------------------\n\n- Reports could produce the wrong file names for packages, reporting ``pkg.py``\n  instead of the correct ``pkg/__init__.py``.  This is now fixed.  Thanks, Dirk\n  Thomas.\n\n- XML reports could produce ``<source>`` and ``<class>`` lines that together\n  didn't specify a valid source file path.  This is now fixed. (`issue 526`_)\n\n- Namespace packages are no longer warned as having no code. (`issue 572`_)\n\n- Code that uses ``sys.settrace(sys.gettrace())`` in a file that wasn't being\n  coverage-measured would prevent correct coverage measurement in following\n  code. An example of this was running doctests programmatically. This is now\n  fixed. (`issue 575`_)\n\n- Errors printed by the ``coverage`` command now go to stderr instead of\n  stdout.\n\n- Running ``coverage xml`` in a directory named with non-ASCII characters would\n  fail under Python 2. This is now fixed. (`issue 573`_)\n\n.. _issue 526: https://bitbucket.org/ned/coveragepy/issues/526/generated-xml-invalid-paths-for-cobertura\n.. _issue 572: https://bitbucket.org/ned/coveragepy/issues/572/no-python-source-warning-for-namespace\n.. _issue 573: https://bitbucket.org/ned/coveragepy/issues/573/cant-generate-xml-report-if-some-source\n.. _issue 575: https://bitbucket.org/ned/coveragepy/issues/575/running-doctest-prevents-complete-coverage\n\n\n", "3.6b1": "----------------------------\n\n- Wildcards in ``include=`` and ``omit=`` arguments were not handled properly\n  in reporting functions, though they were when running.  Now they are handled\n  uniformly, closing `issue 143`_ and `issue 163`_.  **NOTE**: it is possible\n  that your configurations may now be incorrect.  If you use ``include`` or\n  ``omit`` during reporting, whether on the command line, through the API, or\n  in a configuration file, please check carefully that you were not relying on\n  the old broken behavior.\n\n- The **report**, **html**, and **xml** commands now accept a ``--fail-under``\n  switch that indicates in the exit status whether the coverage percentage was\n  less than a particular value.  Closes `issue 139`_.\n\n- The reporting functions coverage.report(), coverage.html_report(), and\n  coverage.xml_report() now all return a float, the total percentage covered\n  measurement.\n\n- The HTML report's title can now be set in the configuration file, with the\n  ``--title`` switch on the command line, or via the API.\n\n- Configuration files now support substitution of environment variables, using\n  syntax like ``${WORD}``.  Closes `issue 97`_.\n\n- Embarrassingly, the ``[xml] output=`` setting in the .coveragerc file simply\n  didn't work.  Now it does.\n\n- The XML report now consistently uses file names for the file name attribute,\n  rather than sometimes using module names.  Fixes `issue 67`_.\n  Thanks, Marcus Cobden.\n\n- Coverage percentage metrics are now computed slightly differently under\n  branch coverage.  This means that completely unexecuted files will now\n  correctly have 0% coverage, fixing `issue 156`_.  This also means that your\n  total coverage numbers will generally now be lower if you are measuring\n  branch coverage.\n\n- When installing, now in addition to creating a \"coverage\" command, two new\n  aliases are also installed.  A \"coverage2\" or \"coverage3\" command will be\n  created, depending on whether you are installing in Python 2.x or 3.x.\n  A \"coverage-X.Y\" command will also be created corresponding to your specific\n  version of Python.  Closes `issue 111`_.\n\n- The coverage.py installer no longer tries to bootstrap setuptools or\n  Distribute.  You must have one of them installed first, as `issue 202`_\n  recommended.\n\n- The coverage.py kit now includes docs (closing `issue 137`_) and tests.\n\n- On Windows, files are now reported in their correct case, fixing `issue 89`_\n  and `issue 203`_.\n\n- If a file is missing during reporting, the path shown in the error message\n  is now correct, rather than an incorrect path in the current directory.\n  Fixes `issue 60`_.\n\n- Running an HTML report in Python 3 in the same directory as an old Python 2\n  HTML report would fail with a UnicodeDecodeError. This issue (`issue 193`_)\n  is now fixed.\n\n- Fixed yet another error trying to parse non-Python files as Python, this\n  time an IndentationError, closing `issue 82`_ for the fourth time...\n\n- If `coverage xml` fails because there is no data to report, it used to\n  create a zero-length XML file.  Now it doesn't, fixing `issue 210`_.\n\n- Jython files now work with the ``--source`` option, fixing `issue 100`_.\n\n- Running coverage.py under a debugger is unlikely to work, but it shouldn't\n  fail with \"TypeError: 'NoneType' object is not iterable\".  Fixes `issue\n  201`_.\n\n- On some Linux distributions, when installed with the OS package manager,\n  coverage.py would report its own code as part of the results.  Now it won't,\n  fixing `issue 214`_, though this will take some time to be repackaged by the\n  operating systems.\n\n- Docstrings for the legacy singleton methods are more helpful.  Thanks Marius\n  Gedminas.  Closes `issue 205`_.\n\n- The pydoc tool can now show documentation for the class `coverage.coverage`.\n  Closes `issue 206`_.\n\n- Added a page to the docs about contributing to coverage.py, closing\n  `issue 171`_.\n\n- When coverage.py ended unsuccessfully, it may have reported odd errors like\n  ``'NoneType' object has no attribute 'isabs'``.  It no longer does,\n  so kiss `issue 153`_ goodbye.\n\n.. _issue 60: https://bitbucket.org/ned/coveragepy/issues/60/incorrect-path-to-orphaned-pyc-files\n.. _issue 67: https://bitbucket.org/ned/coveragepy/issues/67/xml-report-filenames-may-be-generated\n.. _issue 89: https://bitbucket.org/ned/coveragepy/issues/89/on-windows-all-packages-are-reported-in\n.. _issue 97: https://bitbucket.org/ned/coveragepy/issues/97/allow-environment-variables-to-be\n.. _issue 100: https://bitbucket.org/ned/coveragepy/issues/100/source-directive-doesnt-work-for-packages\n.. _issue 111: https://bitbucket.org/ned/coveragepy/issues/111/when-installing-coverage-with-pip-not\n.. _issue 137: https://bitbucket.org/ned/coveragepy/issues/137/provide-docs-with-source-distribution\n.. _issue 139: https://bitbucket.org/ned/coveragepy/issues/139/easy-check-for-a-certain-coverage-in-tests\n.. _issue 143: https://bitbucket.org/ned/coveragepy/issues/143/omit-doesnt-seem-to-work-in-coverage\n.. _issue 153: https://bitbucket.org/ned/coveragepy/issues/153/non-existent-filename-triggers\n.. _issue 156: https://bitbucket.org/ned/coveragepy/issues/156/a-completely-unexecuted-file-shows-14\n.. _issue 163: https://bitbucket.org/ned/coveragepy/issues/163/problem-with-include-and-omit-filename\n.. _issue 171: https://bitbucket.org/ned/coveragepy/issues/171/how-to-contribute-and-run-tests\n.. _issue 193: https://bitbucket.org/ned/coveragepy/issues/193/unicodedecodeerror-on-htmlpy\n.. _issue 201: https://bitbucket.org/ned/coveragepy/issues/201/coverage-using-django-14-with-pydb-on\n.. _issue 202: https://bitbucket.org/ned/coveragepy/issues/202/get-rid-of-ez_setuppy-and\n.. _issue 203: https://bitbucket.org/ned/coveragepy/issues/203/duplicate-filenames-reported-when-filename\n.. _issue 205: https://bitbucket.org/ned/coveragepy/issues/205/make-pydoc-coverage-more-friendly\n.. _issue 206: https://bitbucket.org/ned/coveragepy/issues/206/pydoc-coveragecoverage-fails-with-an-error\n.. _issue 210: https://bitbucket.org/ned/coveragepy/issues/210/if-theres-no-coverage-data-coverage-xml\n.. _issue 214: https://bitbucket.org/ned/coveragepy/issues/214/coveragepy-measures-itself-on-precise\n\n\n.. _changes_353:\n\n", "3.5.2.b1": "\n\n", "4.3": "--------------------------\n\nSpecial thanks to **Lo\u00efc Dachary**, who took an extraordinary interest in\ncoverage.py and contributed a number of improvements in this release.\n\n- Subprocesses that are measured with `automatic subprocess measurement`_ used\n  to read in any pre-existing data file.  This meant data would be incorrectly\n  carried forward from run to run.  Now those files are not read, so each\n  subprocess only writes its own data. Fixes `issue 510`_.\n\n- The ``coverage combine`` command will now fail if there are no data files to\n  combine. The combine changes in 4.2 meant that multiple combines could lose\n  data, leaving you with an empty .coverage data file. Fixes\n  `issue 525`_, `issue 412`_, `issue 516`_, and probably `issue 511`_.\n\n- Coverage.py wouldn't execute `sys.excepthook`_ when an exception happened in\n  your program.  Now it does, thanks to Andrew Hoos.  Closes `issue 535`_.\n\n- Branch coverage fixes:\n\n  - Branch coverage could misunderstand a finally clause on a try block that\n    never continued on to the following statement, as described in `issue\n    493`_.  This is now fixed. Thanks to Joe Doherty for the report and Lo\u00efc\n    Dachary for the fix.\n\n  - A while loop with a constant condition (while True) and a continue\n    statement would be mis-analyzed, as described in `issue 496`_. This is now\n    fixed, thanks to a bug report by Eli Skeggs and a fix by Lo\u00efc Dachary.\n\n  - While loops with constant conditions that were never executed could result\n    in a non-zero coverage report.  Artem Dayneko reported this in `issue\n    502`_, and Lo\u00efc Dachary provided the fix.\n\n- The HTML report now supports a ``--skip-covered`` option like the other\n  reporting commands.  Thanks, Lo\u00efc Dachary for the implementation, closing\n  `issue 433`_.\n\n- Options can now be read from a tox.ini file, if any. Like setup.cfg, sections\n  are prefixed with \"coverage:\", so ``[run]`` options will be read from the\n  ``[coverage:run]`` section of tox.ini. Implements part of `issue 519`_.\n  Thanks, Stephen Finucane.\n\n- Specifying both ``--source`` and ``--include`` no longer silently ignores the\n  include setting, instead it fails with a message. Thanks, Nathan Land and\n  Lo\u00efc Dachary. Closes `issue 265`_.\n\n- The ``Coverage.combine`` method has a new parameter, ``strict=False``, to\n  support failing if there are no data files to combine.\n\n- When forking subprocesses, the coverage data files would have the same random\n  number appended to the file name. This didn't cause problems, because the\n  file names had the process id also, making collisions (nearly) impossible.\n  But it was disconcerting.  This is now fixed.\n\n- The text report now properly sizes headers when skipping some files, fixing\n  `issue 524`_. Thanks, Anthony Sottile and Lo\u00efc Dachary.\n\n- Coverage.py can now search .pex files for source, just as it can .zip and\n  .egg.  Thanks, Peter Ebden.\n\n- Data files are now about 15% smaller.\n\n- Improvements in the ``[run] debug`` setting:\n\n  - The \"dataio\" debug setting now also logs when data files are deleted during\n    combining or erasing.\n\n  - A new debug option, \"multiproc\", for logging the behavior of\n    ``concurrency=multiprocessing``.\n\n  - If you used the debug options \"config\" and \"callers\" together, you'd get a\n    call stack printed for every line in the multi-line config output. This is\n    now fixed.\n\n- Fixed an unusual bug involving multiple coding declarations affecting code\n  containing code in multi-line strings: `issue 529`_.\n\n- Coverage.py will no longer be misled into thinking that a plain file is a\n  package when interpreting ``--source`` options.  Thanks, Cosimo Lupo.\n\n- If you try to run a non-Python file with coverage.py, you will now get a more\n  useful error message. `Issue 514`_.\n\n- The default pragma regex changed slightly, but this will only matter to you\n  if you are deranged and use mixed-case pragmas.\n\n- Deal properly with non-ASCII file names in an ASCII-only world, `issue 533`_.\n\n- Programs that set Unicode configuration values could cause UnicodeErrors when\n  generating HTML reports.  Pytest-cov is one example.  This is now fixed.\n\n- Prevented deprecation warnings from configparser that happened in some\n  circumstances, closing `issue 530`_.\n\n- Corrected the name of the jquery.ba-throttle-debounce.js library. Thanks,\n  Ben Finney.  Closes `issue 505`_.\n\n- Testing against PyPy 5.6 and PyPy3 5.5.\n\n- Switched to pytest from nose for running the coverage.py tests.\n\n- Renamed AUTHORS.txt to CONTRIBUTORS.txt, since there are other ways to\n  contribute than by writing code. Also put the count of contributors into the\n  author string in setup.py, though this might be too cute.\n\n.. _sys.excepthook: https://docs.python.org/3/library/sys.htmlsys.excepthook\n.. _issue 265: https://bitbucket.org/ned/coveragepy/issues/265/when-using-source-include-is-silently\n.. _issue 412: https://bitbucket.org/ned/coveragepy/issues/412/coverage-combine-should-error-if-no\n.. _issue 433: https://bitbucket.org/ned/coveragepy/issues/433/coverage-html-does-not-suport-skip-covered\n.. _issue 493: https://bitbucket.org/ned/coveragepy/issues/493/confusing-branching-failure\n.. _issue 496: https://bitbucket.org/ned/coveragepy/issues/496/incorrect-coverage-with-branching-and\n.. _issue 502: https://bitbucket.org/ned/coveragepy/issues/502/incorrect-coverage-report-with-cover\n.. _issue 505: https://bitbucket.org/ned/coveragepy/issues/505/use-canonical-filename-for-debounce\n.. _issue 514: https://bitbucket.org/ned/coveragepy/issues/514/path-to-problem-file-not-reported-when\n.. _issue 510: https://bitbucket.org/ned/coveragepy/issues/510/erase-still-needed-in-42\n.. _issue 511: https://bitbucket.org/ned/coveragepy/issues/511/version-42-coverage-combine-empties\n.. _issue 516: https://bitbucket.org/ned/coveragepy/issues/516/running-coverage-combine-twice-deletes-all\n.. _issue 519: https://bitbucket.org/ned/coveragepy/issues/519/coverage-run-sections-in-toxini-or-as\n.. _issue 524: https://bitbucket.org/ned/coveragepy/issues/524/coverage-report-with-skip-covered-column\n.. _issue 525: https://bitbucket.org/ned/coveragepy/issues/525/coverage-combine-when-not-in-parallel-mode\n.. _issue 529: https://bitbucket.org/ned/coveragepy/issues/529/encoding-marker-may-only-appear-on-the\n.. _issue 530: https://bitbucket.org/ned/coveragepy/issues/530/deprecationwarning-you-passed-a-bytestring\n.. _issue 533: https://bitbucket.org/ned/coveragepy/issues/533/exception-on-unencodable-file-name\n.. _issue 535: https://bitbucket.org/ned/coveragepy/issues/535/sysexcepthook-is-not-called\n\n\n.. _changes_42:\n\n", "3.0.1": "----------------------------\n\n- Removed the recursion limit in the tracer function.  Previously, code that\n  ran more than 500 frames deep would crash. Fixed `issue 9`_.\n\n- Fixed a bizarre problem involving pyexpat, whereby lines following XML parser\n  invocations could be overlooked.  Fixed `issue 10`_.\n\n- On Python 2.3, coverage.py could mis-measure code with exceptions being\n  raised.  This is now fixed.\n\n- The coverage.py code itself will now not be measured by coverage.py, and no\n  coverage.py modules will be mentioned in the nose --with-cover plug-in.\n  Fixed `issue 8`_.\n\n- When running source files, coverage.py now opens them in universal newline\n  mode just like Python does.  This lets it run Windows files on Mac, for\n  example.\n\n.. _issue 9: https://bitbucket.org/ned/coveragepy/issues/9\n.. _issue 10: https://bitbucket.org/ned/coveragepy/issues/10\n.. _issue 8: https://bitbucket.org/ned/coveragepy/issues/8\n\n\n.. _changes_30:\n\n", "3.1": "--------------------------\n\n- Source code can now be read from eggs.  Thanks, Ross Lawley.  Fixes\n  `issue 25`_.\n\n.. _issue 25: https://bitbucket.org/ned/coveragepy/issues/25\n\n\n", "4.0b1": "----------------------------\n\n- Coverage.py is now licensed under the Apache 2.0 license.  See NOTICE.txt for\n  details.  Closes `issue 313`_.\n\n- The data storage has been completely revamped.  The data file is now\n  JSON-based instead of a pickle, closing `issue 236`_.  The `CoverageData`\n  class is now a public supported documented API to the data file.\n\n- A new configuration option, ``[run] note``, lets you set a note that will be\n  stored in the `runs` section of the data file.  You can use this to annotate\n  the data file with any information you like.\n\n- Unrecognized configuration options will now print an error message and stop\n  coverage.py.  This should help prevent configuration mistakes from passing\n  silently.  Finishes `issue 386`_.\n\n- In parallel mode, ``coverage erase`` will now delete all of the data files,\n  fixing `issue 262`_.\n\n- Coverage.py now accepts a directory name for ``coverage run`` and will run a\n  ``__main__.py`` found there, just like Python will.  Fixes `issue 252`_.\n  Thanks, Dmitry Trofimov.\n\n- The XML report now includes a ``missing-branches`` attribute.  Thanks, Steve\n  Peak.  This is not a part of the Cobertura DTD, so the XML report no longer\n  references the DTD.\n\n- Missing branches in the HTML report now have a bit more information in the\n  right-hand annotations.  Hopefully this will make their meaning clearer.\n\n- All the reporting functions now behave the same if no data had been\n  collected, exiting with a status code of 1.  Fixed ``fail_under`` to be\n  applied even when the report is empty.  Thanks, Ionel Cristian M\u0103rie\u0219.\n\n- Plugins are now initialized differently.  Instead of looking for a class\n  called ``Plugin``, coverage.py looks for a function called ``coverage_init``.\n\n- A file-tracing plugin can now ask to have built-in Python reporting by\n  returning `\"python\"` from its `file_reporter()` method.\n\n- Code that was executed with `exec` would be mis-attributed to the file that\n  called it.  This is now fixed, closing `issue 380`_.\n\n- The ability to use item access on `Coverage.config` (introduced in 4.0a2) has\n  been changed to a more explicit `Coverage.get_option` and\n  `Coverage.set_option` API.\n\n- The ``Coverage.use_cache`` method is no longer supported.\n\n- The private method ``Coverage._harvest_data`` is now called\n  ``Coverage.get_data``, and returns the ``CoverageData`` containing the\n  collected data.\n\n- The project is consistently referred to as \"coverage.py\" throughout the code\n  and the documentation, closing `issue 275`_.\n\n- Combining data files with an explicit configuration file was broken in 4.0a6,\n  but now works again, closing `issue 385`_.\n\n- ``coverage combine`` now accepts files as well as directories.\n\n- The speed is back to 3.7.1 levels, after having slowed down due to plugin\n  support, finishing up `issue 387`_.\n\n.. _issue 236: https://bitbucket.org/ned/coveragepy/issues/236/pickles-are-bad-and-you-should-feel-bad\n.. _issue 252: https://bitbucket.org/ned/coveragepy/issues/252/coverage-wont-run-a-program-with\n.. _issue 262: https://bitbucket.org/ned/coveragepy/issues/262/when-parallel-true-erase-should-erase-all\n.. _issue 275: https://bitbucket.org/ned/coveragepy/issues/275/refer-consistently-to-project-as-coverage\n.. _issue 313: https://bitbucket.org/ned/coveragepy/issues/313/add-license-file-containing-2-3-or-4\n.. _issue 380: https://bitbucket.org/ned/coveragepy/issues/380/code-executed-by-exec-excluded-from\n.. _issue 385: https://bitbucket.org/ned/coveragepy/issues/385/coverage-combine-doesnt-work-with-rcfile\n.. _issue 386: https://bitbucket.org/ned/coveragepy/issues/386/error-on-unrecognised-configuration\n.. _issue 387: https://bitbucket.org/ned/coveragepy/issues/387/performance-degradation-from-371-to-40\n\n.. 40 issues closed in 4.0 below here\n\n\n", "4.0a3": "----------------------------\n\n- Reports now use file names with extensions.  Previously, a report would\n  describe a/b/c.py as \"a/b/c\".  Now it is shown as \"a/b/c.py\".  This allows\n  for better support of non-Python files, and also fixed `issue 69`_.\n\n- The XML report now reports each directory as a package again.  This was a bad\n  regression, I apologize.  This was reported in `issue 235`_, which is now\n  fixed.\n\n- A new configuration option for the XML report: ``[xml] package_depth``\n  controls which directories are identified as packages in the report.\n  Directories deeper than this depth are not reported as packages.\n  The default is that all directories are reported as packages.\n  Thanks, Lex Berezhny.\n\n- When looking for the source for a frame, check if the file exists. On\n  Windows, .pyw files are no longer recorded as .py files. Along the way, this\n  fixed `issue 290`_.\n\n- Empty files are now reported as 100% covered in the XML report, not 0%\n  covered (`issue 345`_).\n\n- Regexes in the configuration file are now compiled as soon as they are read,\n  to provide error messages earlier (`issue 349`_).\n\n.. _issue 69: https://bitbucket.org/ned/coveragepy/issues/69/coverage-html-overwrite-files-that-doesnt\n.. _issue 235: https://bitbucket.org/ned/coveragepy/issues/235/package-name-is-missing-in-xml-report\n.. _issue 290: https://bitbucket.org/ned/coveragepy/issues/290/running-programmatically-with-pyw-files\n.. _issue 345: https://bitbucket.org/ned/coveragepy/issues/345/xml-reports-line-rate-0-for-empty-files\n.. _issue 349: https://bitbucket.org/ned/coveragepy/issues/349/bad-regex-in-config-should-get-an-earlier\n\n\n", "4.2b1": "----------------------------\n\nWork from the PyCon 2016 Sprints!\n\n- BACKWARD INCOMPATIBILITY: the ``coverage combine`` command now ignores an\n  existing ``.coverage`` data file.  It used to include that file in its\n  combining.  This caused confusing results, and extra tox \"clean\" steps.  If\n  you want the old behavior, use the new ``coverage combine --append`` option.\n\n- The ``concurrency`` option can now take multiple values, to support programs\n  using multiprocessing and another library such as eventlet.  This is only\n  possible in the configuration file, not from the command line. The\n  configuration file is the only way for sub-processes to all run with the same\n  options.  Fixes `issue 484`_.  Thanks to Josh Williams for prototyping.\n\n- Using a ``concurrency`` setting of ``multiprocessing`` now implies\n  ``--parallel`` so that the main program is measured similarly to the\n  sub-processes.\n\n- When using `automatic subprocess measurement`_, running coverage commands\n  would create spurious data files.  This is now fixed, thanks to diagnosis and\n  testing by Dan Riti.  Closes `issue 492`_.\n\n- A new configuration option, ``report:sort``, controls what column of the\n  text report is used to sort the rows.  Thanks to Dan Wandschneider, this\n  closes `issue 199`_.\n\n- The HTML report has a more-visible indicator for which column is being\n  sorted.  Closes `issue 298`_, thanks to Josh Williams.\n\n- If the HTML report cannot find the source for a file, the message now\n  suggests using the ``-i`` flag to allow the report to continue. Closes\n  `issue 231`_, thanks, Nathan Land.\n\n- When reports are ignoring errors, there's now a warning if a file cannot be\n  parsed, rather than being silently ignored.  Closes `issue 396`_. Thanks,\n  Matthew Boehm.\n\n- A new option for ``coverage debug`` is available: ``coverage debug config``\n  shows the current configuration.  Closes `issue 454`_, thanks to Matthew\n  Boehm.\n\n- Running coverage as a module (``python -m coverage``) no longer shows the\n  program name as ``__main__.py``.  Fixes `issue 478`_.  Thanks, Scott Belden.\n\n- The `test_helpers` module has been moved into a separate pip-installable\n  package: `unittest-mixins`_.\n\n.. _automatic subprocess measurement: http://coverage.readthedocs.io/en/latest/subprocess.html\n.. _issue 199: https://bitbucket.org/ned/coveragepy/issues/199/add-a-way-to-sort-the-text-report\n.. _issue 231: https://bitbucket.org/ned/coveragepy/issues/231/various-default-behavior-in-report-phase\n.. _issue 298: https://bitbucket.org/ned/coveragepy/issues/298/show-in-html-report-that-the-columns-are\n.. _issue 396: https://bitbucket.org/ned/coveragepy/issues/396/coverage-xml-shouldnt-bail-out-on-parse\n.. _issue 454: https://bitbucket.org/ned/coveragepy/issues/454/coverage-debug-config-should-be\n.. _issue 478: https://bitbucket.org/ned/coveragepy/issues/478/help-shows-silly-program-name-when-running\n.. _issue 484: https://bitbucket.org/ned/coveragepy/issues/484/multiprocessing-greenlet-concurrency\n.. _issue 492: https://bitbucket.org/ned/coveragepy/issues/492/subprocess-coverage-strange-detection-of\n.. _unittest-mixins: https://pypi.python.org/pypi/unittest-mixins\n\n\n.. _changes_41:\n\n", "3.5": "--------------------------\n\n- The HTML report hotkeys now behave slightly differently when the current\n  chunk isn't visible at all:  a chunk on the screen will be selected,\n  instead of the old behavior of jumping to the literal next chunk.\n  The hotkeys now work in Google Chrome.  Thanks, Guido van Rossum.\n\n\n", "3.2b1": "----------------------------\n\n- Branch coverage!\n\n- XML reporting has file paths that let Cobertura find the source code.\n\n- The tracer code has changed, it's a few percent faster.\n\n- Some exceptions reported by the command line interface have been cleaned up\n  so that tracebacks inside coverage.py aren't shown.  Fixes `issue 23`_.\n\n.. _issue 23: https://bitbucket.org/ned/coveragepy/issues/23\n\n\n.. _changes_31:\n\n", "3.0b": "---------------------------\n\nHTML reporting, and continued refactoring.\n\n- HTML reports and annotation of source files: use the new -b (browser) switch.\n  Thanks to George Song for code, inspiration and guidance.\n\n- Code in the Python standard library is not measured by default.  If you need\n  to measure standard library code, use the -L command-line switch during\n  execution, or the cover_pylib=True argument to the coverage() constructor.\n\n- Source annotation into a directory (-a -d) behaves differently.  The\n  annotated files are named with their hierarchy flattened so that same-named\n  files from different directories no longer collide.  Also, only files in the\n  current tree are included.\n\n- coverage.annotate_file is no longer available.\n\n- Programs executed with -x now behave more as they should, for example,\n  __file__ has the correct value.\n\n- .coverage data files have a new pickle-based format designed for better\n  extensibility.\n\n- Removed the undocumented cache_file argument to coverage.usecache().\n\n\n", "4.0a4": "----------------------------\n\n- Plugins can now provide sys_info for debugging output.\n\n- Started plugins documentation.\n\n- Prepared to move the docs to readthedocs.org.\n\n\n", "4.0": "--------------------------\n\n", "4.1b2": "----------------------------\n\n- Problems with the new branch measurement in 4.1 beta 1 were fixed:\n\n  - Class docstrings were considered executable.  Now they no longer are.\n\n  - ``yield from`` and ``await`` were considered returns from functions, since\n    they could tranfer control to the caller.  This produced unhelpful \"missing\n    branch\" reports in a number of circumstances.  Now they no longer are\n    considered returns.\n\n  - In unusual situations, a missing branch to a negative number was reported.\n    This has been fixed, closing `issue 466`_.\n\n- The XML report now produces correct package names for modules found in\n  directories specified with ``source=``.  Fixes `issue 465`_.\n\n- ``coverage report`` won't produce trailing whitespace.\n\n.. _issue 465: https://bitbucket.org/ned/coveragepy/issues/465/coveragexml-produces-package-names-with-an\n.. _issue 466: https://bitbucket.org/ned/coveragepy/issues/466/impossible-missed-branch-to-a-negative\n\n\n", "4.1": "--------------------------\n\n- The internal attribute `Reporter.file_reporters` was removed in 4.1b3.  It\n  should have come has no surprise that there were third-party tools out there\n  using that attribute.  It has been restored, but with a deprecation warning.\n\n\n", "2.1": "--------------------------\n\n- Return 'analysis' to its original behavior and add 'analysis2'. Add a global\n  for 'annotate', and factor it, adding 'annotate_file'.\n\n\n", "2.75": "---------------------------\n\n- Python 2.5 now fully supported. The method of dealing with multi-line\n  statements is now less sensitive to the exact line that Python reports during\n  execution. Pass statements are handled specially so that their disappearance\n  during execution won't throw off the measurement.\n\n\n", "4.3.4": "----------------------------\n\n- Fixing 2.6 in version 4.3.3 broke other things, because the too-tricky\n  exception wasn't properly derived from Exception, described in `issue 556`_.\n  A newb mistake; it hasn't been a good few days.\n\n.. _issue 556: https://bitbucket.org/ned/coveragepy/issues/556/43-fails-if-there-are-html-files-in-the\n\n\n.. _changes_433:\n\n", "3.2b3": "----------------------------\n\n- Fixed a memory leak in the C tracer that was introduced in 3.2b1.\n\n- Branch coverage improvements:\n\n  - Branches to excluded code are ignored.\n\n- The table of contents in the HTML report is now sortable: click the headers\n  on any column.  Thanks, `Chris Adams`_.\n\n.. _Chris Adams: http://chris.improbable.org\n\n\n", "2.78": "---------------------------\n\n- Don't try to predict whether a file is Python source based on the extension.\n  Extension-less files are often Pythons scripts. Instead, simply parse the\n  file and catch the syntax errors. Hat tip to Ben Finney.\n\n\n", "4.3.2": "----------------------------\n\n- Using the ``--skip-covered`` option on an HTML report with 100% coverage\n  would cause a \"No data to report\" error, as reported in `issue 549`_. This is\n  now fixed; thanks, Lo\u00efc Dachary.\n\n- If-statements can be optimized away during compilation, for example, `if 0:`\n  or `if __debug__:`.  Coverage.py had problems properly understanding these\n  statements which existed in the source, but not in the compiled bytecode.\n  This problem, reported in `issue 522`_, is now fixed.\n\n- If you specified ``--source`` as a directory, then coverage.py would look for\n  importable Python files in that directory, and could identify ones that had\n  never been executed at all.  But if you specified it as a package name, that\n  detection wasn't performed.  Now it is, closing `issue 426`_. Thanks to Lo\u00efc\n  Dachary for the fix.\n\n- If you started and stopped coverage measurement thousands of times in your\n  process, you could crash Python with a \"Fatal Python error: deallocating\n  None\" error.  This is now fixed.  Thanks to Alex Groce for the bug report.\n\n- On PyPy, measuring coverage in subprocesses could produce a warning: \"Trace\n  function changed, measurement is likely wrong: None\".  This was spurious, and\n  has been suppressed.\n\n- Previously, coverage.py couldn't start on Jython, due to that implementation\n  missing the multiprocessing module (`issue 551`_). This problem has now been\n  fixed. Also, `issue 322`_ about not being able to invoke coverage\n  conveniently, seems much better: ``jython -m coverage run myprog.py`` works\n  properly.\n\n- Let's say you ran the HTML report over and over again in the same output\n  directory, with ``--skip-covered``. And imagine due to your heroic\n  test-writing efforts, a file just acheived the goal of 100% coverage. With\n  coverage.py 4.3, the old HTML file with the less-than-100% coverage would be\n  left behind.  This file is now properly deleted.\n\n.. _issue 322: https://bitbucket.org/ned/coveragepy/issues/322/cannot-use-coverage-with-jython\n.. _issue 426: https://bitbucket.org/ned/coveragepy/issues/426/difference-between-coverage-results-with\n.. _issue 522: https://bitbucket.org/ned/coveragepy/issues/522/incorrect-branch-reporting-with-__debug__\n.. _issue 549: https://bitbucket.org/ned/coveragepy/issues/549/skip-covered-with-100-coverage-throws-a-no\n.. _issue 551: https://bitbucket.org/ned/coveragepy/issues/551/coveragepy-cannot-be-imported-in-jython27\n\n\n.. _changes_431:\n\n", "2.5": "--------------------------\n\n- Call threading.settrace so that all threads are measured. Thanks Martin\n  Fuzzey.\n\n- Add a file argument to report so that reports can be captured to a different\n  destination.\n\n- Coverage.py can now measure itself.\n\n- Adapted Greg Rogers' patch for using relative file names, and sorting and\n  omitting files to report on.\n\n\n", "3.4b1": "----------------------------\n\n- BACKWARD INCOMPATIBILITY: the ``--omit`` and ``--include`` switches now take\n  file patterns rather than file prefixes, closing `issue 34`_ and `issue 36`_.\n\n- BACKWARD INCOMPATIBILITY: the `omit_prefixes` argument is gone throughout\n  coverage.py, replaced with `omit`, a list of file name patterns suitable for\n  `fnmatch`.  A parallel argument `include` controls what files are included.\n\n- The run command now has a ``--source`` switch, a list of directories or\n  module names.  If provided, coverage.py will only measure execution in those\n  source files.\n\n- Various warnings are printed to stderr for problems encountered during data\n  measurement: if a ``--source`` module has no Python source to measure, or is\n  never encountered at all, or if no data is collected.\n\n- The reporting commands (report, annotate, html, and xml) now have an\n  ``--include`` switch to restrict reporting to modules matching those file\n  patterns, similar to the existing ``--omit`` switch. Thanks, Zooko.\n\n- The run command now supports ``--include`` and ``--omit`` to control what\n  modules it measures. This can speed execution and reduce the amount of data\n  during reporting. Thanks Zooko.\n\n- Since coverage.py 3.1, using the Python trace function has been slower than\n  it needs to be.  A cache of tracing decisions was broken, but has now been\n  fixed.\n\n- Python 2.7 and 3.2 have introduced new opcodes that are now supported.\n\n- Python files with no statements, for example, empty ``__init__.py`` files,\n  are now reported as having zero statements instead of one.  Fixes `issue 1`_.\n\n- Reports now have a column of missed line counts rather than executed line\n  counts, since developers should focus on reducing the missed lines to zero,\n  rather than increasing the executed lines to varying targets.  Once\n  suggested, this seemed blindingly obvious.\n\n- Line numbers in HTML source pages are clickable, linking directly to that\n  line, which is highlighted on arrival.  Added a link back to the index page\n  at the bottom of each HTML page.\n\n- Programs that call ``os.fork`` will properly collect data from both the child\n  and parent processes.  Use ``coverage run -p`` to get two data files that can\n  be combined with ``coverage combine``.  Fixes `issue 56`_.\n\n- Coverage.py is now runnable as a module: ``python -m coverage``.  Thanks,\n  Brett Cannon.\n\n- When measuring code running in a virtualenv, most of the system library was\n  being measured when it shouldn't have been.  This is now fixed.\n\n- Doctest text files are no longer recorded in the coverage data, since they\n  can't be reported anyway.  Fixes `issue 52`_ and `issue 61`_.\n\n- Jinja HTML templates compile into Python code using the HTML file name,\n  which confused coverage.py.  Now these files are no longer traced, fixing\n  `issue 82`_.\n\n- Source files can have more than one dot in them (foo.test.py), and will be\n  treated properly while reporting.  Fixes `issue 46`_.\n\n- Source files with DOS line endings are now properly tokenized for syntax\n  coloring on non-DOS machines.  Fixes `issue 53`_.\n\n- Unusual code structure that confused exits from methods with exits from\n  classes is now properly analyzed.  See `issue 62`_.\n\n- Asking for an HTML report with no files now shows a nice error message rather\n  than a cryptic failure ('int' object is unsubscriptable). Fixes `issue 59`_.\n\n.. _issue 1:  https://bitbucket.org/ned/coveragepy/issues/1/empty-__init__py-files-are-reported-as-1-executable\n.. _issue 34: https://bitbucket.org/ned/coveragepy/issues/34/enhanced-omit-globbing-handling\n.. _issue 36: https://bitbucket.org/ned/coveragepy/issues/36/provide-regex-style-omit\n.. _issue 46: https://bitbucket.org/ned/coveragepy/issues/46\n.. _issue 53: https://bitbucket.org/ned/coveragepy/issues/53\n.. _issue 52: https://bitbucket.org/ned/coveragepy/issues/52/doctesttestfile-confuses-source-detection\n.. _issue 56: https://bitbucket.org/ned/coveragepy/issues/56\n.. _issue 61: https://bitbucket.org/ned/coveragepy/issues/61/annotate-i-doesnt-work\n.. _issue 62: https://bitbucket.org/ned/coveragepy/issues/62\n.. _issue 59: https://bitbucket.org/ned/coveragepy/issues/59/html-report-fails-with-int-object-is\n.. _issue 82: https://bitbucket.org/ned/coveragepy/issues/82/tokenerror-when-generating-html-report\n\n\n.. _changes_331:\n\n", "4.0b2": "----------------------------\n\n- 4.0b1 broke ``--append`` creating new data files.  This is now fixed, closing\n  `issue 392`_.\n\n- ``py.test --cov`` can write empty data, then touch files due to ``--source``,\n  which made coverage.py mistakenly force the data file to record lines instead\n  of arcs.  This would lead to a \"Can't combine line data with arc data\" error\n  message.  This is now fixed, and changed some method names in the\n  CoverageData interface.  Fixes `issue 399`_.\n\n- `CoverageData.read_fileobj` and `CoverageData.write_fileobj` replace the\n  `.read` and `.write` methods, and are now properly inverses of each other.\n\n- When using ``report --skip-covered``, a message will now be included in the\n  report output indicating how many files were skipped, and if all files are\n  skipped, coverage.py won't accidentally scold you for having no data to\n  report.  Thanks, Krystian Kichewko.\n\n- A new conversion utility has been added:  ``python -m coverage.pickle2json``\n  will convert v3.x pickle data files to v4.x JSON data files.  Thanks,\n  Alexander Todorov.  Closes `issue 395`_.\n\n- A new version identifier is available, `coverage.version_info`, a plain tuple\n  of values similar to `sys.version_info`_.\n\n.. _issue 392: https://bitbucket.org/ned/coveragepy/issues/392/run-append-doesnt-create-coverage-file\n.. _issue 395: https://bitbucket.org/ned/coveragepy/issues/395/rfe-read-pickled-files-as-well-for\n.. _issue 399: https://bitbucket.org/ned/coveragepy/issues/399/coverageexception-cant-combine-line-data\n.. _sys.version_info: https://docs.python.org/3/library/sys.htmlsys.version_info\n\n\n", "4.0.3": "----------------------------\n\n- Fixed a mysterious problem that manifested in different ways: sometimes\n  hanging the process (`issue 420`_), sometimes making database connections\n  fail (`issue 445`_).\n\n- The XML report now has correct ``<source>`` elements when using a\n  ``--source=`` option somewhere besides the current directory.  This fixes\n  `issue 439`_. Thanks, Arcady Ivanov.\n\n- Fixed an unusual edge case of detecting source encodings, described in\n  `issue 443`_.\n\n- Help messages that mention the command to use now properly use the actual\n  command name, which might be different than \"coverage\".  Thanks to Ben\n  Finney, this closes `issue 438`_.\n\n.. _issue 420: https://bitbucket.org/ned/coveragepy/issues/420/coverage-40-hangs-indefinitely-on-python27\n.. _issue 438: https://bitbucket.org/ned/coveragepy/issues/438/parameterise-coverage-command-name\n.. _issue 439: https://bitbucket.org/ned/coveragepy/issues/439/incorrect-cobertura-file-sources-generated\n.. _issue 443: https://bitbucket.org/ned/coveragepy/issues/443/coverage-gets-confused-when-encoding\n.. _issue 445: https://bitbucket.org/ned/coveragepy/issues/445/django-app-cannot-connect-to-cassandra\n\n\n.. _changes_402:\n\n", "2.0": "--------------------------\n\nSignificant code changes.\n\n- Finding executable statements has been rewritten so that docstrings and\n  other quirks of Python execution aren't mistakenly identified as missing\n  lines.\n\n- Lines can be excluded from consideration, even entire suites of lines.\n\n- The file system cache of covered lines can be disabled programmatically.\n\n- Modernized the code.\n\n\nEarlier History\n---------------\n\n2001-12-04 GDR Created.\n\n2001-12-06 GDR Added command-line interface and source code annotation.\n\n2001-12-09 GDR Moved design and interface to separate documents.\n\n2001-12-10 GDR Open cache file as binary on Windows. Allow simultaneous -e and\n-x, or -a and -r.\n\n2001-12-12 GDR Added command-line help. Cache analysis so that it only needs to\nbe done once when you specify -a and -r.\n\n2001-12-13 GDR Improved speed while recording. Portable between Python 1.5.2\nand 2.1.1.\n\n2002-01-03 GDR Module-level functions work correctly.\n\n2002-01-07 GDR Update sys.path when running a file with the -x option, so that\nit matches the value the program would get if it were run on its own.\n", "3.7.1": "----------------------------\n\n- Improved the speed of HTML report generation by about 20%.\n\n- Fixed the mechanism for finding OS-installed static files for the HTML report\n  so that it will actually find OS-installed static files.\n\n\n.. _changes_37:\n\n", "3.7": "--------------------------\n\n- Added the ``--debug`` switch to ``coverage run``.  It accepts a list of\n  options indicating the type of internal activity to log to stderr.\n\n- Improved the branch coverage facility, fixing `issue 92`_ and `issue 175`_.\n\n- Running code with ``coverage run -m`` now behaves more like Python does,\n  setting sys.path properly, which fixes `issue 207`_ and `issue 242`_.\n\n- Coverage.py can now run .pyc files directly, closing `issue 264`_.\n\n- Coverage.py properly supports .pyw files, fixing `issue 261`_.\n\n- Omitting files within a tree specified with the ``source`` option would\n  cause them to be incorrectly marked as unexecuted, as described in\n  `issue 218`_.  This is now fixed.\n\n- When specifying paths to alias together during data combining, you can now\n  specify relative paths, fixing `issue 267`_.\n\n- Most file paths can now be specified with username expansion (``~/src``, or\n  ``~build/src``, for example), and with environment variable expansion\n  (``build/$BUILDNUM/src``).\n\n- Trying to create an XML report with no files to report on, would cause a\n  ZeroDivideError, but no longer does, fixing `issue 250`_.\n\n- When running a threaded program under the Python tracer, coverage.py no\n  longer issues a spurious warning about the trace function changing: \"Trace\n  function changed, measurement is likely wrong: None.\"  This fixes `issue\n  164`_.\n\n- Static files necessary for HTML reports are found in system-installed places,\n  to ease OS-level packaging of coverage.py.  Closes `issue 259`_.\n\n- Source files with encoding declarations, but a blank first line, were not\n  decoded properly.  Now they are.  Thanks, Roger Hu.\n\n- The source kit now includes the ``__main__.py`` file in the root coverage\n  directory, fixing `issue 255`_.\n\n.. _issue 92: https://bitbucket.org/ned/coveragepy/issues/92/finally-clauses-arent-treated-properly-in\n.. _issue 164: https://bitbucket.org/ned/coveragepy/issues/164/trace-function-changed-warning-when-using\n.. _issue 175: https://bitbucket.org/ned/coveragepy/issues/175/branch-coverage-gets-confused-in-certain\n.. _issue 207: https://bitbucket.org/ned/coveragepy/issues/207/run-m-cannot-find-module-or-package-in\n.. _issue 242: https://bitbucket.org/ned/coveragepy/issues/242/running-a-two-level-package-doesnt-work\n.. _issue 218: https://bitbucket.org/ned/coveragepy/issues/218/run-command-does-not-respect-the-omit-flag\n.. _issue 250: https://bitbucket.org/ned/coveragepy/issues/250/uncaught-zerodivisionerror-when-generating\n.. _issue 255: https://bitbucket.org/ned/coveragepy/issues/255/directory-level-__main__py-not-included-in\n.. _issue 259: https://bitbucket.org/ned/coveragepy/issues/259/allow-use-of-system-installed-third-party\n.. _issue 261: https://bitbucket.org/ned/coveragepy/issues/261/pyw-files-arent-reported-properly\n.. _issue 264: https://bitbucket.org/ned/coveragepy/issues/264/coverage-wont-run-pyc-files\n.. _issue 267: https://bitbucket.org/ned/coveragepy/issues/267/relative-path-aliases-dont-work\n\n\n.. _changes_36:\n\n", "3.0b1": "----------------------------\n\nMajor overhaul.\n\n- Coverage.py is now a package rather than a module.  Functionality has been\n  split into classes.\n\n- The trace function is implemented in C for speed.  Coverage.py runs are now\n  much faster.  Thanks to David Christian for productive micro-sprints and\n  other encouragement.\n\n- Executable lines are identified by reading the line number tables in the\n  compiled code, removing a great deal of complicated analysis code.\n\n- Precisely which lines are considered executable has changed in some cases.\n  Therefore, your coverage stats may also change slightly.\n\n- The singleton coverage object is only created if the module-level functions\n  are used.  This maintains the old interface while allowing better\n  programmatic use of Coverage.py.\n\n- The minimum supported Python version is 2.3.\n\n\n", "4.0.2": "----------------------------\n\n- More work on supporting unusually encoded source. Fixed `issue 431`_.\n\n- Files or directories with non-ASCII characters are now handled properly,\n  fixing `issue 432`_.\n\n- Setting a trace function with sys.settrace was broken by a change in 4.0.1,\n  as reported in `issue 436`_.  This is now fixed.\n\n- Officially support PyPy 4.0, which required no changes, just updates to the\n  docs.\n\n.. _issue 431: https://bitbucket.org/ned/coveragepy/issues/431/couldnt-parse-python-file-with-cp1252\n.. _issue 432: https://bitbucket.org/ned/coveragepy/issues/432/path-with-unicode-characters-various\n.. _issue 436: https://bitbucket.org/ned/coveragepy/issues/436/disabled-coverage-ctracer-may-rise-from\n\n\n.. _changes_401:\n\n", "4.3.1": "----------------------------\n\n- Some environments couldn't install 4.3, as described in `issue 540`_. This is\n  now fixed.\n\n- The check for conflicting ``--source`` and ``--include`` was too simple in a\n  few different ways, breaking a few perfectly reasonable use cases, described\n  in `issue 541`_.  The check has been reverted while we re-think the fix for\n  `issue 265`_.\n\n.. _issue 540: https://bitbucket.org/ned/coveragepy/issues/540/cant-install-coverage-v43-into-under\n.. _issue 541: https://bitbucket.org/ned/coveragepy/issues/541/coverage-43-breaks-nosetest-with-coverage\n\n\n.. _changes_43:\n\n", "2.80": "---------------------------\n\n- Open files in rU mode to avoid line ending craziness. Thanks, Edward Loper.\n\n\n", "4.1b3": "----------------------------\n\n- When running your program, execution can jump from an ``except X:`` line to\n  some other line when an exception other than ``X`` happens.  This jump is no\n  longer considered a branch when measuring branch coverage.\n\n- When measuring branch coverage, ``yield`` statements that were never resumed\n  were incorrectly marked as missing, as reported in `issue 440`_.  This is now\n  fixed.\n\n- During branch coverage of single-line callables like lambdas and generator\n  expressions, coverage.py can now distinguish between them never being called,\n  or being called but not completed.  Fixes `issue 90`_, `issue 460`_ and\n  `issue 475`_.\n\n- The HTML report now has a map of the file along the rightmost edge of the\n  page, giving an overview of where the missed lines are.  Thanks, Dmitry\n  Shishov.\n\n- The HTML report now uses different monospaced fonts, favoring Consolas over\n  Courier.  Along the way, `issue 472`_ about not properly handling one-space\n  indents was fixed.  The index page also has slightly different styling, to\n  try to make the clickable detail pages more apparent.\n\n- Missing branches reported with ``coverage report -m`` will now say ``->exit``\n  for missed branches to the exit of a function, rather than a negative number.\n  Fixes `issue 469`_.\n\n- ``coverage --help`` and ``coverage --version`` now mention which tracer is\n  installed, to help diagnose problems. The docs mention which features need\n  the C extension. (`issue 479`_)\n\n- Officially support PyPy 5.1, which required no changes, just updates to the\n  docs.\n\n- The `Coverage.report` function had two parameters with non-None defaults,\n  which have been changed.  `show_missing` used to default to True, but now\n  defaults to None.  If you had been calling `Coverage.report` without\n  specifying `show_missing`, you'll need to explicitly set it to True to keep\n  the same behavior.  `skip_covered` used to default to False. It is now None,\n  which doesn't change the behavior.  This fixes `issue 485`_.\n\n- It's never been possible to pass a namespace module to one of the analysis\n  functions, but now at least we raise a more specific error message, rather\n  than getting confused. (`issue 456`_)\n\n- The `coverage.process_startup` function now returns the `Coverage` instance\n  it creates, as suggested in `issue 481`_.\n\n- Make a small tweak to how we compare threads, to avoid buggy custom\n  comparison code in thread classes. (`issue 245`_)\n\n.. _issue 90: https://bitbucket.org/ned/coveragepy/issues/90/lambda-expression-confuses-branch\n.. _issue 245: https://bitbucket.org/ned/coveragepy/issues/245/change-solution-for-issue-164\n.. _issue 440: https://bitbucket.org/ned/coveragepy/issues/440/yielded-twisted-failure-marked-as-missed\n.. _issue 456: https://bitbucket.org/ned/coveragepy/issues/456/coverage-breaks-with-implicit-namespaces\n.. _issue 460: https://bitbucket.org/ned/coveragepy/issues/460/confusing-html-report-for-certain-partial\n.. _issue 469: https://bitbucket.org/ned/coveragepy/issues/469/strange-1-line-number-in-branch-coverage\n.. _issue 472: https://bitbucket.org/ned/coveragepy/issues/472/html-report-indents-incorrectly-for-one\n.. _issue 475: https://bitbucket.org/ned/coveragepy/issues/475/generator-expression-is-marked-as-not\n.. _issue 479: https://bitbucket.org/ned/coveragepy/issues/479/clarify-the-need-for-the-c-extension\n.. _issue 481: https://bitbucket.org/ned/coveragepy/issues/481/asyncioprocesspoolexecutor-tracing-not\n.. _issue 485: https://bitbucket.org/ned/coveragepy/issues/485/coveragereport-ignores-show_missing-and\n\n\n", "3.2b2": "----------------------------\n\n- Branch coverage improvements:\n\n  - Classes are no longer incorrectly marked as branches: `issue 32`_.\n\n  - \"except\" clauses with types are no longer incorrectly marked as branches:\n    `issue 35`_.\n\n- Fixed some problems syntax coloring sources with line continuations and\n  source with tabs: `issue 30`_ and `issue 31`_.\n\n- The --omit option now works much better than before, fixing `issue 14`_ and\n  `issue 33`_.  Thanks, Danek Duvall.\n\n.. _issue 14: https://bitbucket.org/ned/coveragepy/issues/14\n.. _issue 30: https://bitbucket.org/ned/coveragepy/issues/30\n.. _issue 31: https://bitbucket.org/ned/coveragepy/issues/31\n.. _issue 32: https://bitbucket.org/ned/coveragepy/issues/32\n.. _issue 33: https://bitbucket.org/ned/coveragepy/issues/33\n.. _issue 35: https://bitbucket.org/ned/coveragepy/issues/35\n\n\n", "3.3.1": "----------------------------\n\n- Using `parallel=True` in .coveragerc file prevented reporting, but now does\n  not, fixing `issue 49`_.\n\n- When running your code with \"coverage run\", if you call `sys.exit()`,\n  coverage.py will exit with that status code, fixing `issue 50`_.\n\n.. _issue 49: https://bitbucket.org/ned/coveragepy/issues/49\n.. _issue 50: https://bitbucket.org/ned/coveragepy/issues/50\n\n\n.. _changes_33:\n\n", "2.76": "---------------------------\n\n- Now Python 2.5 is *really* fully supported: the body of the new with\n  statement is counted as executable.\n\n\n", "3.5.1b1": "------------------------------\n\n- When combining data files from parallel runs, you can now instruct\n  coverage.py about which directories are equivalent on different machines.  A\n  ``[paths]`` section in the configuration file lists paths that are to be\n  considered equivalent.  Finishes `issue 17`_.\n\n- for-else constructs are understood better, and don't cause erroneous partial\n  branch warnings.  Fixes `issue 122`_.\n\n- Branch coverage for ``with`` statements is improved, fixing `issue 128`_.\n\n- The number of partial branches reported on the HTML summary page was\n  different than the number reported on the individual file pages.  This is\n  now fixed.\n\n- An explicit include directive to measure files in the Python installation\n  wouldn't work because of the standard library exclusion.  Now the include\n  directive takes precedence, and the files will be measured.  Fixes\n  `issue 138`_.\n\n- The HTML report now handles Unicode characters in Python source files\n  properly.  This fixes `issue 124`_ and `issue 144`_. Thanks, Devin\n  Jeanpierre.\n\n- In order to help the core developers measure the test coverage of the\n  standard library, Brandon Rhodes devised an aggressive hack to trick Python\n  into running some coverage.py code before anything else in the process.\n  See the coverage/fullcoverage directory if you are interested.\n\n.. _issue 17: https://bitbucket.org/ned/coveragepy/issues/17/support-combining-coverage-data-from\n.. _issue 122: https://bitbucket.org/ned/coveragepy/issues/122/for-else-always-reports-missing-branch\n.. _issue 124: https://bitbucket.org/ned/coveragepy/issues/124/no-arbitrary-unicode-in-html-reports-in\n.. _issue 128: https://bitbucket.org/ned/coveragepy/issues/128/branch-coverage-of-with-statement-in-27\n.. _issue 138: https://bitbucket.org/ned/coveragepy/issues/138/include-should-take-precedence-over-is\n.. _issue 144: https://bitbucket.org/ned/coveragepy/issues/144/failure-generating-html-output-for\n\n\n.. _changes_35:\n\n", "2.2": "--------------------------\n\n- Allow for keyword arguments in the module global functions. Thanks, Allen.\n\n\n", "3.5.2": "----------------------------\n\n", "3.3": "--------------------------\n\n- Settings are now read from a .coveragerc file.  A specific file can be\n  specified on the command line with --rcfile=FILE.  The name of the file can\n  be programmatically set with the `config_file` argument to the coverage()\n  constructor, or reading a config file can be disabled with\n  `config_file=False`.\n\n- Fixed a problem with nested loops having their branch possibilities\n  mischaracterized: `issue 39`_.\n\n- Added coverage.process_start to enable coverage measurement when Python\n  starts.\n\n- Parallel data file names now have a random number appended to them in\n  addition to the machine name and process id.\n\n- Parallel data files combined with \"coverage combine\" are deleted after\n  they're combined, to clean up unneeded files.  Fixes `issue 40`_.\n\n- Exceptions thrown from product code run with \"coverage run\" are now displayed\n  without internal coverage.py frames, so the output is the same as when the\n  code is run without coverage.py.\n\n- The `data_suffix` argument to the coverage constructor is now appended with\n  an added dot rather than simply appended, so that .coveragerc files will not\n  be confused for data files.\n\n- Python source files that don't end with a newline can now be executed, fixing\n  `issue 47`_.\n\n- Added an AUTHORS.txt file.\n\n.. _issue 39: https://bitbucket.org/ned/coveragepy/issues/39\n.. _issue 40: https://bitbucket.org/ned/coveragepy/issues/40\n.. _issue 47: https://bitbucket.org/ned/coveragepy/issues/47\n\n\n.. _changes_32:\n\n", "4.4.1": "----------------------------\n\n- No code changes: just corrected packaging for Python 2.7 Linux wheels.\n\n\n.. _changes_44:\n\n", "3.0b3": "----------------------------\n\n- Added parameters to coverage.__init__ for options that had been set on the\n  coverage object itself.\n\n- Added clear_exclude() and get_exclude_list() methods for programmatic\n  manipulation of the exclude regexes.\n\n- Added coverage.load() to read previously-saved data from the data file.\n\n- Improved the finding of code files.  For example, .pyc files that have been\n  installed after compiling are now located correctly.  Thanks, Detlev\n  Offenbach.\n\n- When using the object API (that is, constructing a coverage() object), data\n  is no longer saved automatically on process exit.  You can re-enable it with\n  the auto_data=True parameter on the coverage() constructor. The module-level\n  interface still uses automatic saving.\n\n\n", "4.2": "--------------------------\n\n- Since ``concurrency=multiprocessing`` uses subprocesses, options specified on\n  the coverage.py command line will not be communicated down to them.  Only\n  options in the configuration file will apply to the subprocesses.\n  Previously, the options didn't apply to the subprocesses, but there was no\n  indication.  Now it is an error to use ``--concurrency=multiprocessing`` and\n  other run-affecting options on the command line.  This prevents\n  failures like those reported in `issue 495`_.\n\n- Filtering the HTML report is now faster, thanks to Ville Skytt\u00e4.\n\n.. _issue 495: https://bitbucket.org/ned/coveragepy/issues/495/branch-and-concurrency-are-conflicting\n\n\n", "3.0": "--------------------------\n\n- Fixed the way the Python library was ignored.  Too much code was being\n  excluded the old way.\n\n- Tabs are now properly converted in HTML reports.  Previously indentation was\n  lost.  Fixed `issue 6`_.\n\n- Nested modules now get a proper flat_rootname.  Thanks, Christian Heimes.\n\n.. _issue 6: https://bitbucket.org/ned/coveragepy/issues/6\n\n\n", "4.0a1": "----------------------------\n\n- Python versions supported are now CPython 2.6, 2.7, 3.2, 3.3, and 3.4, and\n  PyPy 2.2.\n\n- Gevent, eventlet, and greenlet are now supported, closing `issue 149`_.\n  The ``concurrency`` setting specifies the concurrency library in use.  Huge\n  thanks to Peter Portante for initial implementation, and to Joe Jevnik for\n  the final insight that completed the work.\n\n- Options are now also read from a setup.cfg file, if any.  Sections are\n  prefixed with \"coverage:\", so the ``[run]`` options will be read from the\n  ``[coverage:run]`` section of setup.cfg.  Finishes `issue 304`_.\n\n- The ``report -m`` command can now show missing branches when reporting on\n  branch coverage.  Thanks, Steve Leonard. Closes `issue 230`_.\n\n- The XML report now contains a <source> element, fixing `issue 94`_.  Thanks\n  Stan Hu.\n\n- The class defined in the coverage module is now called ``Coverage`` instead\n  of ``coverage``, though the old name still works, for backward compatibility.\n\n- The ``fail-under`` value is now rounded the same as reported results,\n  preventing paradoxical results, fixing `issue 284`_.\n\n- The XML report will now create the output directory if need be, fixing\n  `issue 285`_.  Thanks, Chris Rose.\n\n- HTML reports no longer raise UnicodeDecodeError if a Python file has\n  undecodable characters, fixing `issue 303`_ and `issue 331`_.\n\n- The annotate command will now annotate all files, not just ones relative to\n  the current directory, fixing `issue 57`_.\n\n- The coverage module no longer causes deprecation warnings on Python 3.4 by\n  importing the imp module, fixing `issue 305`_.\n\n- Encoding declarations in source files are only considered if they are truly\n  comments.  Thanks, Anthony Sottile.\n\n.. _issue 57: https://bitbucket.org/ned/coveragepy/issues/57/annotate-command-fails-to-annotate-many\n.. _issue 94: https://bitbucket.org/ned/coveragepy/issues/94/coverage-xml-doesnt-produce-sources\n.. _issue 149: https://bitbucket.org/ned/coveragepy/issues/149/coverage-gevent-looks-broken\n.. _issue 230: https://bitbucket.org/ned/coveragepy/issues/230/show-line-no-for-missing-branches-in\n.. _issue 284: https://bitbucket.org/ned/coveragepy/issues/284/fail-under-should-show-more-precision\n.. _issue 285: https://bitbucket.org/ned/coveragepy/issues/285/xml-report-fails-if-output-file-directory\n.. _issue 303: https://bitbucket.org/ned/coveragepy/issues/303/unicodedecodeerror\n.. _issue 304: https://bitbucket.org/ned/coveragepy/issues/304/attempt-to-get-configuration-from-setupcfg\n.. _issue 305: https://bitbucket.org/ned/coveragepy/issues/305/pendingdeprecationwarning-the-imp-module\n.. _issue 331: https://bitbucket.org/ned/coveragepy/issues/331/failure-of-encoding-detection-on-python2\n\n\n.. _changes_371:\n\n", "2.85": "---------------------------\n\n- Add support for finding source files in eggs. Don't check for\n  morf's being instances of ModuleType, instead use duck typing so that\n  pseudo-modules can participate. Thanks, Imri Goldberg.\n\n- Use os.realpath as part of the fixing of file names so that symlinks won't\n  confuse things. Thanks, Patrick Mezard.\n\n\n", "4.0.1": "----------------------------\n\n- When combining data files, unreadable files will now generate a warning\n  instead of failing the command.  This is more in line with the older\n  coverage.py v3.7.1 behavior, which silently ignored unreadable files.\n  Prompted by `issue 418`_.\n\n- The --skip-covered option would skip reporting on 100% covered files, but\n  also skipped them when calculating total coverage.  This was wrong, it should\n  only remove lines from the report, not change the final answer.  This is now\n  fixed, closing `issue 423`_.\n\n- In 4.0, the data file recorded a summary of the system on which it was run.\n  Combined data files would keep all of those summaries.  This could lead to\n  enormous data files consisting of mostly repetitive useless information. That\n  summary is now gone, fixing `issue 415`_.  If you want summary information,\n  get in touch, and we'll figure out a better way to do it.\n\n- Test suites that mocked os.path.exists would experience strange failures, due\n  to coverage.py using their mock inadvertently.  This is now fixed, closing\n  `issue 416`_.\n\n- Importing a ``__init__`` module explicitly would lead to an error:\n  ``AttributeError: 'module' object has no attribute '__path__'``, as reported\n  in `issue 410`_.  This is now fixed.\n\n- Code that uses ``sys.settrace(sys.gettrace())`` used to incur a more than 2x\n  speed penalty.  Now there's no penalty at all. Fixes `issue 397`_.\n\n- Pyexpat C code will no longer be recorded as a source file, fixing\n  `issue 419`_.\n\n- The source kit now contains all of the files needed to have a complete source\n  tree, re-fixing `issue 137`_ and closing `issue 281`_.\n\n.. _issue 281: https://bitbucket.org/ned/coveragepy/issues/281/supply-scripts-for-testing-in-the\n.. _issue 397: https://bitbucket.org/ned/coveragepy/issues/397/stopping-and-resuming-coverage-with\n.. _issue 410: https://bitbucket.org/ned/coveragepy/issues/410/attributeerror-module-object-has-no\n.. _issue 415: https://bitbucket.org/ned/coveragepy/issues/415/repeated-coveragedataupdates-cause\n.. _issue 416: https://bitbucket.org/ned/coveragepy/issues/416/mocking-ospathexists-causes-failures\n.. _issue 418: https://bitbucket.org/ned/coveragepy/issues/418/json-parse-error\n.. _issue 419: https://bitbucket.org/ned/coveragepy/issues/419/nosource-no-source-for-code-path-to-c\n.. _issue 423: https://bitbucket.org/ned/coveragepy/issues/423/skip_covered-changes-reported-total\n\n\n.. _changes_40:\n\n", "3.2": "--------------------------\n\n- Added a ``--version`` option on the command line.\n\n\n", "2.77": "---------------------------\n\n- Better packaging.\n\n\n", "4.0a6": "----------------------------\n\n- Python 3.5b2 and PyPy 2.6.0 are supported.\n\n- The original module-level function interface to coverage.py is no longer\n  supported.  You must now create a ``coverage.Coverage`` object, and use\n  methods on it.\n\n- The ``coverage combine`` command now accepts any number of directories as\n  arguments, and will combine all the data files from those directories.  This\n  means you don't have to copy the files to one directory before combining.\n  Thanks, Christine Lytwynec.  Finishes `issue 354`_.\n\n- Branch coverage couldn't properly handle certain extremely long files. This\n  is now fixed (`issue 359`_).\n\n- Branch coverage didn't understand yield statements properly.  Mickie Betz\n  persisted in pursuing this despite Ned's pessimism.  Fixes `issue 308`_ and\n  `issue 324`_.\n\n- The COVERAGE_DEBUG environment variable can be used to set the\n  ``[run] debug`` configuration option to control what internal operations are\n  logged.\n\n- HTML reports were truncated at formfeed characters.  This is now fixed\n  (`issue 360`_).  It's always fun when the problem is due to a `bug in the\n  Python standard library <http://bugs.python.org/issue19035>`_.\n\n- Files with incorrect encoding declaration comments are no longer ignored by\n  the reporting commands, fixing `issue 351`_.\n\n- HTML reports now include a timestamp in the footer, closing `issue 299`_.\n  Thanks, Conrad Ho.\n\n- HTML reports now begrudgingly use double-quotes rather than single quotes,\n  because there are \"software engineers\" out there writing tools that read HTML\n  and somehow have no idea that single quotes exist.  Capitulates to the absurd\n  `issue 361`_.  Thanks, Jon Chappell.\n\n- The ``coverage annotate`` command now handles non-ASCII characters properly,\n  closing `issue 363`_.  Thanks, Leonardo Pistone.\n\n- Drive letters on Windows were not normalized correctly, now they are. Thanks,\n  Ionel Cristian M\u0103rie\u0219.\n\n- Plugin support had some bugs fixed, closing `issue 374`_ and `issue 375`_.\n  Thanks, Stefan Behnel.\n\n.. _issue 299: https://bitbucket.org/ned/coveragepy/issues/299/inserted-created-on-yyyy-mm-dd-hh-mm-in\n.. _issue 308: https://bitbucket.org/ned/coveragepy/issues/308/yield-lambda-branch-coverage\n.. _issue 324: https://bitbucket.org/ned/coveragepy/issues/324/yield-in-loop-confuses-branch-coverage\n.. _issue 351: https://bitbucket.org/ned/coveragepy/issues/351/files-with-incorrect-encoding-are-ignored\n.. _issue 354: https://bitbucket.org/ned/coveragepy/issues/354/coverage-combine-should-take-a-list-of\n.. _issue 359: https://bitbucket.org/ned/coveragepy/issues/359/xml-report-chunk-error\n.. _issue 360: https://bitbucket.org/ned/coveragepy/issues/360/html-reports-get-confused-by-l-in-the-code\n.. _issue 361: https://bitbucket.org/ned/coveragepy/issues/361/use-double-quotes-in-html-output-to\n.. _issue 363: https://bitbucket.org/ned/coveragepy/issues/363/annotate-command-hits-unicode-happy-fun\n.. _issue 374: https://bitbucket.org/ned/coveragepy/issues/374/c-tracer-lookups-fail-in\n.. _issue 375: https://bitbucket.org/ned/coveragepy/issues/375/ctracer_handle_return-reads-byte-code\n\n\n", "2.7": "--------------------------\n\n- \"pragma: nocover\" is excluded by default.\n\n- Properly ignore docstrings and other constant expressions that appear in the\n  middle of a function, a problem reported by Tim Leslie.\n\n- coverage.erase() shouldn't clobber the exclude regex. Change how parallel\n  mode is invoked, and fix erase() so that it erases the cache when called\n  programmatically.\n\n- In reports, ignore code executed from strings, since we can't do anything\n  useful with it anyway.\n\n- Better file handling on Linux, thanks Guillaume Chazarain.\n\n- Better shell support on Windows, thanks Noel O'Boyle.\n\n- Python 2.2 support maintained, thanks Catherine Proulx.\n\n- Minor changes to avoid lint warnings.\n\n\n", "3.4": "--------------------------\n\n- The XML report is now sorted by package name, fixing `issue 88`_.\n\n- Programs that exited with ``sys.exit()`` with no argument weren't handled\n  properly, producing a coverage.py stack trace.  That is now fixed.\n\n.. _issue 88: https://bitbucket.org/ned/coveragepy/issues/88/xml-report-lists-packages-in-random-order\n\n\n", "3.6b2": "----------------------------\n\n- Coverage.py runs on Python 2.3 and 2.4 again. It was broken in 3.6b1.\n\n- The C extension is optionally compiled using a different more widely-used\n  technique, taking another stab at fixing `issue 80`_ once and for all.\n\n- Combining data files would create entries for phantom files if used with\n  ``source`` and path aliases.  It no longer does.\n\n- ``debug sys`` now shows the configuration file path that was read.\n\n- If an oddly-behaved package claims that code came from an empty-string\n  file name, coverage.py no longer associates it with the directory name,\n  fixing `issue 221`_.\n\n.. _issue 221: https://bitbucket.org/ned/coveragepy/issues/221/coveragepy-incompatible-with-pyratemp\n\n\n", "3.2b4": "----------------------------\n\n- Branch coverage improvements:\n\n  - The XML report now includes branch information.\n\n- Click-to-sort HTML report columns are now persisted in a cookie.  Viewing\n  a report will sort it first the way you last had a coverage report sorted.\n  Thanks, `Chris Adams`_.\n\n- On Python 3.x, setuptools has been replaced by `Distribute`_.\n\n.. _Distribute: https://pypi.python.org/pypi/distribute\n\n\n", "3.1b1": "----------------------------\n\n- Python 3.1 is now supported.\n\n- Coverage.py has a new command line syntax with sub-commands.  This expands\n  the possibilities for adding features and options in the future.  The old\n  syntax is still supported.  Try \"coverage help\" to see the new commands.\n  Thanks to Ben Finney for early help.\n\n- Added an experimental \"coverage xml\" command for producing coverage reports\n  in a Cobertura-compatible XML format.  Thanks, Bill Hart.\n\n- Added the --timid option to enable a simpler slower trace function that works\n  for DecoratorTools projects, including TurboGears.  Fixed `issue 12`_ and\n  `issue 13`_.\n\n- HTML reports show modules from other directories.  Fixed `issue 11`_.\n\n- HTML reports now display syntax-colored Python source.\n\n- Programs that change directory will still write .coverage files in the\n  directory where execution started.  Fixed `issue 24`_.\n\n- Added a \"coverage debug\" command for getting diagnostic information about the\n  coverage.py installation.\n\n.. _issue 11: https://bitbucket.org/ned/coveragepy/issues/11\n.. _issue 12: https://bitbucket.org/ned/coveragepy/issues/12\n.. _issue 13: https://bitbucket.org/ned/coveragepy/issues/13\n.. _issue 24: https://bitbucket.org/ned/coveragepy/issues/24\n\n\n.. _changes_301:\n\n", "3.6": "--------------------------\n\n- Added a page to the docs about troublesome situations, closing `issue 226`_,\n  and added some info to the TODO file, closing `issue 227`_.\n\n.. _issue 226: https://bitbucket.org/ned/coveragepy/issues/226/make-readme-section-to-describe-when\n.. _issue 227: https://bitbucket.org/ned/coveragepy/issues/227/update-todo\n\n\n", "4.0b3": "----------------------------\n\n- Reporting on an unmeasured file would fail with a traceback.  This is now\n  fixed, closing `issue 403`_.\n\n- The Jenkins ShiningPanda plugin looks for an obsolete file name to find the\n  HTML reports to publish, so it was failing under coverage.py 4.0.  Now we\n  create that file if we are running under Jenkins, to keep things working\n  smoothly. `issue 404`_.\n\n- Kits used to include tests and docs, but didn't install them anywhere, or\n  provide all of the supporting tools to make them useful.  Kits no longer\n  include tests and docs.  If you were using them from the older packages, get\n  in touch and help me understand how.\n\n.. _issue 403: https://bitbucket.org/ned/coveragepy/issues/403/hasherupdate-fails-with-typeerror-nonetype\n.. _issue 404: https://bitbucket.org/ned/coveragepy/issues/404/shiningpanda-jenkins-plugin-cant-find-html\n\n\n", "4.3.3": "----------------------------\n\n- Python 2.6 support was broken due to a testing exception imported for the\n  benefit of the coverage.py test suite.  Properly conditionalizing it fixed\n  `issue 554`_ so that Python 2.6 works again.\n\n.. _issue 554: https://bitbucket.org/ned/coveragepy/issues/554/traceback-on-python-26-starting-with-432\n\n\n.. _changes_432:\n\n", "3.5.3": "----------------------------\n\n- Line numbers in the HTML report line up better with the source lines, fixing\n  `issue 197`_, thanks Marius Gedminas.\n\n- When specifying a directory as the source= option, the directory itself no\n  longer needs to have a ``__init__.py`` file, though its sub-directories do,\n  to be considered as source files.\n\n- Files encoded as UTF-8 with a BOM are now properly handled, fixing\n  `issue 179`_.  Thanks, Pablo Carballo.\n\n- Fixed more cases of non-Python files being reported as Python source, and\n  then not being able to parse them as Python.  Closes `issue 82`_ (again).\n  Thanks, Julian Berman.\n\n- Fixed memory leaks under Python 3, thanks, Brett Cannon. Closes `issue 147`_.\n\n- Optimized .pyo files may not have been handled correctly, `issue 195`_.\n  Thanks, Marius Gedminas.\n\n- Certain unusually named file paths could have been mangled during reporting,\n  `issue 194`_.  Thanks, Marius Gedminas.\n\n- Try to do a better job of the impossible task of detecting when we can't\n  build the C extension, fixing `issue 183`_.\n\n- Testing is now done with `tox`_, thanks, Marc Abramowitz.\n\n.. _issue 147: https://bitbucket.org/ned/coveragepy/issues/147/massive-memory-usage-by-ctracer\n.. _issue 179: https://bitbucket.org/ned/coveragepy/issues/179/htmlreporter-fails-when-source-file-is\n.. _issue 183: https://bitbucket.org/ned/coveragepy/issues/183/install-fails-for-python-23\n.. _issue 194: https://bitbucket.org/ned/coveragepy/issues/194/filelocatorrelative_filename-could-mangle\n.. _issue 195: https://bitbucket.org/ned/coveragepy/issues/195/pyo-file-handling-in-codeunit\n.. _issue 197: https://bitbucket.org/ned/coveragepy/issues/197/line-numbers-in-html-report-do-not-align\n.. _tox: http://tox.readthedocs.io/\n\n\n.. _changes_352:\n\n", "4.1b1": "----------------------------\n\n- Branch analysis has been rewritten: it used to be based on bytecode, but now\n  uses AST analysis.  This has changed a number of things:\n\n  - More code paths are now considered runnable, especially in\n    ``try``/``except`` structures.  This may mean that coverage.py will\n    identify more code paths as uncovered.  This could either raise or lower\n    your overall coverage number.\n\n  - Python 3.5's ``async`` and ``await`` keywords are properly supported,\n    fixing `issue 434`_.\n\n  - Some long-standing branch coverage bugs were fixed:\n\n    - `issue 129`_: functions with only a docstring for a body would\n      incorrectly report a missing branch on the ``def`` line.\n\n    - `issue 212`_: code in an ``except`` block could be incorrectly marked as\n      a missing branch.\n\n    - `issue 146`_: context managers (``with`` statements) in a loop or ``try``\n      block could confuse the branch measurement, reporting incorrect partial\n      branches.\n\n    - `issue 422`_: in Python 3.5, an actual partial branch could be marked as\n      complete.\n\n- Pragmas to disable coverage measurement can now be used on decorator lines,\n  and they will apply to the entire function or class being decorated.  This\n  implements the feature requested in `issue 131`_.\n\n- Multiprocessing support is now available on Windows.  Thanks, Rodrigue\n  Cloutier.\n\n- Files with two encoding declarations are properly supported, fixing\n  `issue 453`_. Thanks, Max Linke.\n\n- Non-ascii characters in regexes in the configuration file worked in 3.7, but\n  stopped working in 4.0.  Now they work again, closing `issue 455`_.\n\n- Form-feed characters would prevent accurate determination of the beginning of\n  statements in the rest of the file.  This is now fixed, closing `issue 461`_.\n\n.. _issue 129: https://bitbucket.org/ned/coveragepy/issues/129/misleading-branch-coverage-of-empty\n.. _issue 131: https://bitbucket.org/ned/coveragepy/issues/131/pragma-on-a-decorator-line-should-affect\n.. _issue 146: https://bitbucket.org/ned/coveragepy/issues/146/context-managers-confuse-branch-coverage\n.. _issue 212: https://bitbucket.org/ned/coveragepy/issues/212/coverage-erroneously-reports-partial\n.. _issue 422: https://bitbucket.org/ned/coveragepy/issues/422/python35-partial-branch-marked-as-fully\n.. _issue 434: https://bitbucket.org/ned/coveragepy/issues/434/indexerror-in-python-35\n.. _issue 453: https://bitbucket.org/ned/coveragepy/issues/453/source-code-encoding-can-only-be-specified\n.. _issue 455: https://bitbucket.org/ned/coveragepy/issues/455/unusual-exclusions-stopped-working-in\n.. _issue 461: https://bitbucket.org/ned/coveragepy/issues/461/multiline-asserts-need-too-many-pragma\n\n\n.. _changes_403:\n\n", "3.5.1": "----------------------------\n\n- The ``[paths]`` feature unfortunately didn't work in real world situations\n  where you wanted to, you know, report on the combined data.  Now all paths\n  stored in the combined file are canonicalized properly.\n\n\n", "3.5.2b1": "------------------------------\n\n- The HTML report has slightly tweaked controls: the buttons at the top of\n  the page are color-coded to the source lines they affect.\n\n- Custom CSS can be applied to the HTML report by specifying a CSS file as\n  the ``extra_css`` configuration value in the ``[html]`` section.\n\n- Source files with custom encodings declared in a comment at the top are now\n  properly handled during reporting on Python 2.  Python 3 always handled them\n  properly.  This fixes `issue 157`_.\n\n- Backup files left behind by editors are no longer collected by the source=\n  option, fixing `issue 168`_.\n\n- If a file doesn't parse properly as Python, we don't report it as an error\n  if the file name seems like maybe it wasn't meant to be Python.  This is a\n  pragmatic fix for `issue 82`_.\n\n- The ``-m`` switch on ``coverage report``, which includes missing line numbers\n  in the summary report, can now be specified as ``show_missing`` in the\n  config file.  Closes `issue 173`_.\n\n- When running a module with ``coverage run -m <modulename>``, certain details\n  of the execution environment weren't the same as for\n  ``python -m <modulename>``.  This had the unfortunate side-effect of making\n  ``coverage run -m unittest discover`` not work if you had tests in a\n  directory named \"test\".  This fixes `issue 155`_ and `issue 142`_.\n\n- Now the exit status of your product code is properly used as the process\n  status when running ``python -m coverage run ...``.  Thanks, JT Olds.\n\n- When installing into pypy, we no longer attempt (and fail) to compile\n  the C tracer function, closing `issue 166`_.\n\n.. _issue 142: https://bitbucket.org/ned/coveragepy/issues/142/executing-python-file-syspath-is-replaced\n.. _issue 155: https://bitbucket.org/ned/coveragepy/issues/155/cant-use-coverage-run-m-unittest-discover\n.. _issue 157: https://bitbucket.org/ned/coveragepy/issues/157/chokes-on-source-files-with-non-utf-8\n.. _issue 166: https://bitbucket.org/ned/coveragepy/issues/166/dont-try-to-compile-c-extension-on-pypy\n.. _issue 168: https://bitbucket.org/ned/coveragepy/issues/168/dont-be-alarmed-by-emacs-droppings\n.. _issue 173: https://bitbucket.org/ned/coveragepy/issues/173/theres-no-way-to-specify-show-missing-in\n\n\n.. _changes_351:\n\n", "4.0a2": "----------------------------\n\n- Officially support PyPy 2.4, and PyPy3 2.4.  Drop support for\n  CPython 3.2 and older versions of PyPy.  The code won't work on CPython 3.2.\n  It will probably still work on older versions of PyPy, but I'm not testing\n  against them.\n\n- Plugins!\n\n- The original command line switches (`-x` to run a program, etc) are no\n  longer supported.\n\n- A new option: `coverage report --skip-covered` will reduce the number of\n  files reported by skipping files with 100% coverage.  Thanks, Krystian\n  Kichewko.  This means that empty `__init__.py` files will be skipped, since\n  they are 100% covered, closing `issue 315`_.\n\n- You can now specify the ``--fail-under`` option in the ``.coveragerc`` file\n  as the ``[report] fail_under`` option.  This closes `issue 314`_.\n\n- The ``COVERAGE_OPTIONS`` environment variable is no longer supported.  It was\n  a hack for ``--timid`` before configuration files were available.\n\n- The HTML report now has filtering.  Type text into the Filter box on the\n  index page, and only modules with that text in the name will be shown.\n  Thanks, Danny Allen.\n\n- The textual report and the HTML report used to report partial branches\n  differently for no good reason.  Now the text report's \"missing branches\"\n  column is a \"partial branches\" column so that both reports show the same\n  numbers.  This closes `issue 342`_.\n\n- If you specify a ``--rcfile`` that cannot be read, you will get an error\n  message.  Fixes `issue 343`_.\n\n- The ``--debug`` switch can now be used on any command.\n\n- You can now programmatically adjust the configuration of coverage.py by\n  setting items on `Coverage.config` after construction.\n\n- A module run with ``-m`` can be used as the argument to ``--source``, fixing\n  `issue 328`_.  Thanks, Buck Evan.\n\n- The regex for matching exclusion pragmas has been fixed to allow more kinds\n  of whitespace, fixing `issue 334`_.\n\n- Made some PyPy-specific tweaks to improve speed under PyPy.  Thanks, Alex\n  Gaynor.\n\n- In some cases, with a source file missing a final newline, coverage.py would\n  count statements incorrectly.  This is now fixed, closing `issue 293`_.\n\n- The status.dat file that HTML reports use to avoid re-creating files that\n  haven't changed is now a JSON file instead of a pickle file.  This obviates\n  `issue 287`_ and `issue 237`_.\n\n.. _issue 237: https://bitbucket.org/ned/coveragepy/issues/237/htmlcov-with-corrupt-statusdat\n.. _issue 287: https://bitbucket.org/ned/coveragepy/issues/287/htmlpy-doesnt-specify-pickle-protocol\n.. _issue 293: https://bitbucket.org/ned/coveragepy/issues/293/number-of-statement-detection-wrong-if-no\n.. _issue 314: https://bitbucket.org/ned/coveragepy/issues/314/fail_under-param-not-working-in-coveragerc\n.. _issue 315: https://bitbucket.org/ned/coveragepy/issues/315/option-to-omit-empty-files-eg-__init__py\n.. _issue 328: https://bitbucket.org/ned/coveragepy/issues/328/misbehavior-in-run-source\n.. _issue 334: https://bitbucket.org/ned/coveragepy/issues/334/pragma-not-recognized-if-tab-character\n.. _issue 342: https://bitbucket.org/ned/coveragepy/issues/342/console-and-html-coverage-reports-differ\n.. _issue 343: https://bitbucket.org/ned/coveragepy/issues/343/an-explicitly-named-non-existent-config\n\n\n", "3.6b3": "----------------------------\n\n- Beta 2 broke the nose plugin. It's fixed again, closing `issue 224`_.\n\n.. _issue 224: https://bitbucket.org/ned/coveragepy/issues/224/36b2-breaks-nosexcover\n\n\n", "4.0a5": "----------------------------\n\n- Plugin support is now implemented in the C tracer instead of the Python\n  tracer. This greatly improves the speed of tracing projects using plugins.\n\n- Coverage.py now always adds the current directory to sys.path, so that\n  plugins can import files in the current directory (`issue 358`_).\n\n- If the `config_file` argument to the Coverage constructor is specified as\n  \".coveragerc\", it is treated as if it were True.  This means setup.cfg is\n  also examined, and a missing file is not considered an error (`issue 357`_).\n\n- Wildly experimental: support for measuring processes started by the\n  multiprocessing module.  To use, set ``--concurrency=multiprocessing``,\n  either on the command line or in the .coveragerc file (`issue 117`_). Thanks,\n  Eduardo Schettino.  Currently, this does not work on Windows.\n\n- A new warning is possible, if a desired file isn't measured because it was\n  imported before coverage.py was started (`issue 353`_).\n\n- The `coverage.process_startup` function now will start coverage measurement\n  only once, no matter how many times it is called.  This fixes problems due\n  to unusual virtualenv configurations (`issue 340`_).\n\n- Added 3.5.0a1 to the list of supported CPython versions.\n\n.. _issue 117: https://bitbucket.org/ned/coveragepy/issues/117/enable-coverage-measurement-of-code-run-by\n.. _issue 340: https://bitbucket.org/ned/coveragepy/issues/340/keyerror-subpy\n.. _issue 353: https://bitbucket.org/ned/coveragepy/issues/353/40a3-introduces-an-unexpected-third-case\n.. _issue 357: https://bitbucket.org/ned/coveragepy/issues/357/behavior-changed-when-coveragerc-is\n.. _issue 358: https://bitbucket.org/ned/coveragepy/issues/358/all-coverage-commands-should-adjust\n\n\n"}, "pyflakes": {"0.7.3": "  - Do not report undefined name for generator expression and dict or\n    set comprehension at class level.\n  - Deprecate `Checker.pushFunctionScope` and `Checker.pushClassScope`:\n    use `Checker.pushScope` instead.\n  - Remove dependency on Unittest2 for the tests.\n\n", "0.9.2": "  - Fix a traceback when a global is defined in one scope, and used in another.\n\n", "0.5.0": "  - Convert pyflakes to use newer _ast infrastructure rather than compiler.\n  - Support for new syntax in 2.7 (including set literals, set comprehensions,\n    and dictionary comprehensions).\n  - Make sure class names don't get bound until after class definition.\n\n", "1.6.0": "  - Process function scope variable annotations for used names\n  - Find Python files without extensions by their shebang\n\n", "0.3.0": "  - Display more informative SyntaxError messages.\n  - Don't hang flymake with unmatched triple quotes (only report a single\n    line of source for a multiline syntax error).\n  - Recognize __builtins__ as a defined name.\n  - Improve pyflakes support for python versions 2.3-2.5\n  - Support for if-else expressions and with statements.\n  - Warn instead of error on non-existent file paths.\n  - Check for __future__ imports after other statements.\n  - Add reporting for some types of import shadowing.\n  - Improve reporting of unbound locals\n", "0.7.1": "  - File `bin/pyflakes` was missing in tarball generated with distribute.\n  - Fix reporting errors in non-ASCII filenames (Python 2.x).\n\n", "0.8.0": "  - Adapt for the AST in Python 3.4.\n  - Fix caret position on SyntaxError.\n  - Fix crash on Python 2.x with some doctest SyntaxError.\n  - Add tox.ini.\n  - The `PYFLAKES_NODOCTEST` environment variable has been replaced with the\n    `PYFLAKES_DOCTEST` environment variable (with the opposite meaning).\n    Doctest checking is now disabled by default; set the environment variable\n    to enable it.\n  - Correctly parse incremental `__all__ += [...]`.\n  - Catch return with arguments inside a generator (Python <= 3.2).\n  - Do not complain about `_` in doctests.\n  - Drop deprecated methods `pushFunctionScope` and `pushClassScope`.\n\n", "1.4.0": "  - Change formatting of ImportStarMessage to be consistent with other errors\n  - Support PEP 498 \"f-strings\"\n\n", "0.9.0": "  - Exit gracefully, not with a traceback, on SIGINT and SIGPIPE.\n  - Fix incorrect report of undefined name when using lambda expressions in\n    generator expressions.\n  - Don't crash on DOS line endings on Windows and Python 2.6.\n  - Don't report an undefined name if the 'del' which caused a name to become\n    undefined is only conditionally executed.\n  - Properly handle differences in list comprehension scope in Python 3.\n  - Improve handling of edge cases around 'global' defined variables.\n  - Report an error for 'return' outside a function.\n\n", "1.2.2": "  - Avoid traceback when exception is del-ed in except\n\n", "1.2.1": "  - Fix false RedefinedWhileUnused for submodule imports\n\n", "1.3.0": "  - Fix PyPy2 Windows IntegrationTests\n  - Check for duplicate dictionary keys\n  - Fix TestMain tests on Windows\n  - Fix \"continue\" and \"break\" checks ignoring py3.5's \"async for\" loop\n\n", "1.0.0": "  - Python 3.5 support. async/await statements in particular.\n  - Fix test_api.py on Windows.\n  - Eliminate a false UnusedImport warning when the name has been\n    declared \"global\"\n\n", "0.6.1": "  - Fix detection of variables in augmented assignments.\n\n", "1.1.0": "  - Allow main() to accept arguments.\n  - Support  matrix-multiplication operator\n  - Validate __future__ imports\n  - Fix doctest scope testing\n  - Warn for tuple assertions which are always true\n  - Warn for \"import *\" not at module level on Python 3\n  - Catch many more kinds of SyntaxErrors\n  - Check PEP 498 f-strings\n  - (and a few more sundry bugfixes)\n\n", "0.8.1": "  - Detect the declared encoding in Python 3.\n  - Do not report redefinition of import in a local scope, if the\n    global name is used elsewhere in the module.\n  - Catch undefined variable in loop generator when it is also used as\n    loop variable.\n  - Report undefined name for `(a, b) = (1, 2)` but not for the general\n    unpacking `(a, b) = func()`.\n  - Correctly detect when an imported module is used in default arguments\n    of a method, when the method and the module use the same name.\n  - Distribute a universal wheel file.\n\n", "0.6.0": "  - Support Python 3 up to 3.3, based on the pyflakes3k project.\n  - Preserve compatibility with Python 2.5 and all recent versions of Python.\n  - Support custom reporters in addition to the default Reporter.\n  - Allow function redefinition for modern property construction via\n    property.setter/deleter.\n  - Fix spurious redefinition warnings in conditionals.\n  - Do not report undefined name in __all__ if import * is used.\n  - Add WindowsError as a known built-in name on all platforms.\n  - Support specifying additional built-ins in the `Checker` constructor.\n  - Don't issue Unused Variable warning when using locals() in current scope.\n  - Handle problems with the encoding of source files.\n  - Remove dependency on Twisted for the tests.\n  - Support `python setup.py test` and `python setup.py develop`.\n  - Create script using setuptools `entry_points` to support all platforms,\n    including Windows.\n\n", "0.4.0": "  - Fix reporting for certain SyntaxErrors which lack line number\n    information.\n  - Check for syntax errors more rigorously.\n  - Support checking names used with the class decorator syntax in versions\n    of Python which have it.\n  - Detect local variables which are bound but never used.\n  - Handle permission errors when trying to read source files.\n  - Handle problems with the encoding of source files.\n  - Support importing dotted names so as not to incorrectly report them as\n    redefined unused names.\n  - Support all forms of the with statement.\n  - Consider static `__all__` definitions and avoid reporting unused names\n    if the names are listed there.\n  - Fix incorrect checking of class names with respect to the names of their\n    bases in the class statement.\n  - Support the `__path__` global in `__init__.py`.\n\n", "0.9.1": "  - Update NEWS.txt to include 0.9.0, which had been forgotten.\n\n", "1.2.3": "  - Fix TypeError when processing relative imports\n\n", "1.2.0": "  - Warn against reusing exception names after the except: block on Python 3\n  - Improve the error messages for imports\n\n", "0.7.2": "  - Fix computation of `DoctestSyntaxError.lineno` and `col`.\n  - Add boolean attribute `Checker.withDoctest` to ignore doctests.\n  - If environment variable `PYFLAKES_NODOCTEST` is set, skip doctests.\n  - Environment variable `PYFLAKES_BUILTINS` accepts a comma-separated\n    list of additional built-in names.\n\n", "1.5.0": "  - Enable support for PEP 526 annotated assignments\n\n", "0.7.0": "  - Add --version and --help options.\n  - Support `python -m pyflakes` (Python 2.7 and Python 3.x).\n  - Add attribute `Message.col` to report column offset.\n  - Do not report redefinition of variable for a variable used in a list\n    comprehension in a conditional.\n  - Do not report redefinition of variable for generator expressions and\n    set or dict comprehensions.\n  - Do not report undefined name when the code is protected with a\n    `NameError` exception handler.\n  - Do not report redefinition of variable when unassigning a module imported\n    for its side-effect.\n  - Support special locals like `__tracebackhide__` for py.test.\n  - Support checking doctests.\n  - Fix issue with Turkish locale where `'i'.upper() == 'i'` in Python 2.\n\n"}, "termcolor": {}, "flake8-isort": {"0.1": "----------------\n- Initial release\n  [gforcada]\n\n- Add all boilerplate files.\n  [gforcada]\n\n- Create the flake8 plugin per se.\n  [gforcada]\n", "1.3": "----------------\n\n- Make error messages clearer.\n  [do3cc]\n\n- Use either pep8 or pycodestyle (new name for pep8).\n  [Maxim Novikov]\n\n- Fix coveralls.\n  [gforcada]\n\n", "0.2": "----------------\n- Fix entry point.\n  [gforcada]\n\n", "2.2.2": "------------------\n\n- Workaround for isort bug when skipping files.\n  [danpalmer]\n\n", "2.1.2": "------------------\n\n- Fix another corner case: ignored files.\n  [cas--]\n\n", "2.1.0": "------------------\n\n- Show the exact line and kind of error,\n  rather than a generic message.\n  [cas--]\n\n", "2.3": "----------------\n\n- Nothing changed yet.\n\n\n", "2.1.1": "------------------\n\n- Fix corner cases of isort: newlines and grouped imports.\n  [cas--]\n\n", "2.1.3": "------------------\n\n- Fix yet another corner case.\n  [gforcada]\n\n", "2.2": "----------------\n\n- Support flake8 git hook.\n  [sergio-alonso]\n\n- Support python 3.6.\n  [gforcada]\n\n- Search configuration on home folder.\n  [gforcada]\n\n", "2.0.2": "------------------\n\n- Add flake8 classifier.\n  [sigmavirus24]\n\n- Require flake8 3.2.1.\n  flake8 series 3.1.x and 3.2.0 where not reporting flake8-isort errors.\n  [gforcada]\n\n- Test on pypy and pypy3.\n  [gforcada]\n\n- Fix tests and formatting.\n  [gforcada]\n\n", "2.2.1": "------------------\n\n- Release as universal wheel.\n  [gforcada]\n\n", "1.2": "----------------\n- Allow stdin processing, this way text editor can pass input to flake8.\n  [mjacksonw]\n\n", "1.0": "----------------\n- Check for an isort configuration file.\n  [gforcada]\n\n", "2.0.3": "------------------\n\n- Update trove classifiers.\n  [gforcada]\n\n", "0.1.post0": "----------------------\n- Release wheels as well.\n  [gforcada]\n\n", "1.1.1": "------------------\n- Silence isort messages.\n  [gforcada]\n\n- Improve wording.\n  [gforcada]\n\n", "2.0.1": "------------------\n\n- Fix standard input processing.\n  [carljm]\n\n\n", "1.1": "----------------\n- Check for isort configuration on setup.cfg as well.\n  [plumdog]\n\n", "2.0": "----------------\n\n- Refactor code to handle flake8 version 3.\n  [danpalmer]\n\n- Require flake8 version 3.0.\n  [gforcada]\n\n"}, "isort": {"4.2.4": "- Fixed an issue that caused module that contained functions before doc strings, to incorrectly place imports\n- Fixed regression in how `force_alphabetical_sort` was being interpretted (issue 409)\n- Fixed stray print statement printing skipped files (issue 411)\n- Added option for forcing imports into a single bucket: `no_sections`\n- Added option for new lines between import types (from, straight): `lines_between_sections`\n\n", "4.1.0": "- Started keeping a log of all changes between releases\n- Added the isort logo to the command line interface\n- Added example usage gif to README\n- Implemented issue 292: skip setting now supports glob patterns\n- Implemented issue 271: Add option to sort imports purely alphabetically\n- Implemented issue 301: Readme is now natively in RST format, making it easier for Python tooling to pick up\n- Implemented pylama isort extension\n- Fixed issue 260:  encoding lines at the top of the file are now correctly supported\n- Fixed issue 284: Sticky comments above first import are now supported\n- Fixed issue 310: Ensure comments don't get duplicated when reformatting imports\n- Fixed issue 289: Sections order not being respected\n- Fixed issue 296: Made it more clear how to set arguments more then once\n\n", "4.2.14": "- Fixed 559 & 565: Added missing standard library imports\n\n", "4.1.2": "- Fixed issue 323: Accidental default configuration change introduced\n\n", "4.0.0": "- Removed all external dependencies\n", "4.2.5": "- Fixed an issue that caused modules to inccorectly be matched as thirdparty when they simply had `src` in the leading path, even if they weren't withing $VIRTUALENV/src 414\n\n", "4.2.12": "- Fixed wheel distribution bug\n\n", "4.2.1": "- Hot fix release to fix code error when skipping globs\n\n", "4.2.9": "- Fixed 428: Check only modifies sorting\n- Fixed 540: Not correctly identifying stdlib modules\n\n", "4.2.13": "- Fixed 553: Check only and --diff now work together again\n\n", "4.2.15": "IMPORTANT NOTE: This will be the last release with Python 2.6 support, subsequent releases will be 2.7+ only\n- Fixed certain one line imports not being successfully wrapped\n\n", "4.3.0": "- Fixed 557: `force_alphabetical_sort` and `force_sort_within_sections` can now be utilized together without extra new lines\n- Implemented `--version-number` to retrieve just the version number without the isort logo\n- Breaking changes\n    - Python 2.7+ only (dropped 2.6) allowing various code simplifications and improvements.\n\n", "4.1.1": "- Added support for partial file match skips (thanks to Amwam)\n- Added support for --quiet option to only show errors when running isort\n- Fixed issue 316: isort added new lines incorrectly when a top-of line comment is present\n\n", "4.2.3": "- Fixed a large number of priority bugs - bug fix only release\n\n", "4.2.2": "- Give an error message when isort is unable to determine where to place a module\n- Allow imports to be sorted by module, independent of import_type, when `force_sort_within_sections` option is set\n- Fixed an issue that caused Python files with 2 top comments not to be sorted\n\n", "4.2.11": "- Fixed 546: Can't select y/n/c after latest update\n- Fixed 545: Incorrectly moves __future__ imports above encoding comments\n\n", "4.2.8": "- Added `--virtual-env` switch command line option\n- Added --enforce-whitespace option to go along with --check-only for more exact checks (issue 423)\n- Fixed imports with a tailing '\\' and no space in-between getting removed (issue 425)\n- Fixed issue 299: long lines occasionally not wrapped\n- Fixed issue 432: No longer add import inside class when class starts at top of file after encoding comment\n- Fixed issue 440: Added missing `--use-parentheses` option to command line tool and documentation\n- Fixed issue 496: import* imports now get successfully identified and reformatted instead of deleted\n- Fixed issue 491: Non ending parentheses withing single line comments no longer cause formatting issues\n- Fixed issue 471: Imports that wrap the maximum line length and contain comments on the last line are no longer rendered incorrectly\n- Fixed issue 436: Force sort within section no longer rearranges comments\n- Fixed issue 473: Force_to_top and force_sort_within_sections now work together\n- Fixed issue 484 & 472: Consistent output with imports of same spelling but different case\n- Fixed issue 433: No longer incorrectly add an extra new-line when comment between imports and function definition\n- Fixed issue 419: Path specification for skipped paths is not Unix/Windows inter-operable.\nBreaking Changes:\n    - Fixed issue 511: All command line options with an underscore, have had the underscore replaced with a dash for consistency. This effects: multi-line, add-import, remove-import, force-adds, --force-single-line-imports, and length-sort.\n    - Replaced the `--enforce-whitespace` option with `--ignore-whitespace` to restore original behavior of strict whitespace by default\n\n", "4.2.0": "- Added option \"NOQA\" Do not wrap lines, but add a noqa statement at the end\n- Added support for running isort recursively, simply with a standalone `isort` command\n- Added support to run isort library as a module\n- Added compatibility for Python 3.5\n- Fixed performance issue (338) when running on project with lots of skipped directories\n- Fixed issue 328: extra new can occasionally occur when using alphabetical-only sort\n- Fixed custom sections parsing from config file (unicode string -> list)\n- Updated pylama extension to the correct entry point\n- Skip files even when file_contents is provided if they are explicitly in skip list\n- Removed always showing isort banner, keeping it for when the version is requested, verbose is used, or show_logo setting is set.\n\n"}, "pytest": {"2.6.1": "==================\n\n- No longer show line numbers in the --verbose output, the output is now\n  purely the nodeid.  The line number is still shown in failure reports.\n  Thanks Floris Bruynooghe.\n\n- fix issue437 where assertion rewriting could cause pytest-xdist slaves\n  to collect different tests. Thanks Bruno Oliveira.\n\n- fix issue555: add \"errors\" attribute to capture-streams to satisfy\n  some distutils and possibly other code accessing sys.stdout.errors.\n\n- fix issue547 capsys/capfd also work when output capturing (\"-s\") is disabled.\n\n- address issue170: allow pytest.mark.xfail(...) to specify expected exceptions via\n  an optional \"raises=EXC\" argument where EXC can be a single exception\n  or a tuple of exception classes.  Thanks David Mohr for the complete\n  PR.\n\n- fix integration of pytest with unittest.mock.patch decorator when\n  it uses the \"new\" argument.  Thanks Nicolas Delaby for test and PR.\n\n- fix issue with detecting conftest files if the arguments contain\n  \"::\" node id specifications (copy pasted from \"-v\" output)\n\n- fix issue544 by only removing \"NUM\" at the end of \"::\" separated parts\n  and if the part has an \".py\" extension\n\n- don't use py.std import helper, rather import things directly.\n  Thanks Bruno Oliveira.\n\n", "2.8.0": "==================\n\n- new ``--lf`` and ``-ff`` options to run only the last failing tests or\n  \"failing tests first\" from the last run.  This functionality is provided\n  through porting the formerly external pytest-cache plugin into pytest core.\n  BACKWARD INCOMPAT: if you used pytest-cache's functionality to persist\n  data between test runs be aware that we don't serialize sets anymore.\n  Thanks Ronny Pfannschmidt for most of the merging work.\n\n- \"-r\" option now accepts \"a\" to include all possible reports, similar\n  to passing \"fEsxXw\" explicitly (isse960).\n  Thanks Abhijeet Kasurde for the PR.\n\n- avoid python3.5 deprecation warnings by introducing version\n  specific inspection helpers, thanks Michael Droettboom.\n\n- fix issue562: nose.tools.istest now fully respected.\n\n- fix issue934: when string comparison fails and a diff is too large to display\n  without passing -vv, still show a few lines of the diff.\n  Thanks Florian Bruhin for the report and Bruno Oliveira for the PR.\n\n- fix issue736: Fix a bug where fixture params would be discarded when combined\n  with parametrization markers.\n  Thanks to Markus Unterwaditzer for the PR.\n\n- fix issue710: introduce ALLOW_UNICODE doctest option: when enabled, the\n  ``u`` prefix is stripped from unicode strings in expected doctest output. This\n  allows doctests which use unicode to run in Python 2 and 3 unchanged.\n  Thanks Jason R. Coombs for the report and Bruno Oliveira for the PR.\n\n- parametrize now also generates meaningful test IDs for enum, regex and class\n  objects (as opposed to class instances).\n  Thanks to Florian Bruhin for the PR.\n\n- Add 'warns' to assert that warnings are thrown (like 'raises').\n  Thanks to Eric Hunsberger for the PR.\n\n- Fix issue683: Do not apply an already applied mark.  Thanks ojake for the PR.\n\n- Deal with capturing failures better so fewer exceptions get lost to\n  /dev/null.  Thanks David Szotten for the PR.\n\n- fix issue730: deprecate and warn about the --genscript option.\n  Thanks Ronny Pfannschmidt for the report and Christian Pommranz for the PR.\n\n- fix issue751: multiple parametrize with ids bug if it parametrizes class with\n  two or more test methods. Thanks Sergey Chipiga for reporting and Jan\n  Bednarik for PR.\n\n- fix issue82: avoid loading conftest files from setup.cfg/pytest.ini/tox.ini\n  files and upwards by default (--confcutdir can still be set to override this).\n  Thanks Bruno Oliveira for the PR.\n\n- fix issue768: docstrings found in python modules were not setting up session\n  fixtures. Thanks Jason R. Coombs for reporting and Bruno Oliveira for the PR.\n\n- added ``tmpdir_factory``, a session-scoped fixture that can be used to create\n  directories under the base temporary directory. Previously this object was\n  installed as a ``_tmpdirhandler`` attribute of the ``config`` object, but now it\n  is part of the official API and using ``config._tmpdirhandler`` is\n  deprecated.\n  Thanks Bruno Oliveira for the PR.\n\n- fix issue808: pytest's internal assertion rewrite hook now implements the\n  optional PEP302 get_data API so tests can access data files next to them.\n  Thanks xmo-odoo for request and example and Bruno Oliveira for\n  the PR.\n\n- rootdir and inifile are now displayed during usage errors to help\n  users diagnose problems such as unexpected ini files which add\n  unknown options being picked up by pytest. Thanks to Pavel Savchenko for\n  bringing the problem to attention in 821 and Bruno Oliveira for the PR.\n\n- Summary bar now is colored yellow for warning\n  situations such as: all tests either were skipped or xpass/xfailed,\n  or no tests were run at all (this is a partial fix for issue500).\n\n- fix issue812: pytest now exits with status code 5 in situations where no\n  tests were run at all, such as the directory given in the command line does\n  not contain any tests or as result of a command line option filters\n  all out all tests (-k for example).\n  Thanks Eric Siegerman (issue812) and Bruno Oliveira for the PR.\n\n- Summary bar now is colored yellow for warning\n  situations such as: all tests either were skipped or xpass/xfailed,\n  or no tests were run at all (related to issue500).\n  Thanks Eric Siegerman.\n\n- New ``testpaths`` ini option: list of directories to search for tests\n  when executing pytest from the root directory. This can be used\n  to speed up test collection when a project has well specified directories\n  for tests, being usually more practical than configuring norecursedirs for\n  all directories that do not contain tests.\n  Thanks to Adrian for idea (694) and Bruno Oliveira for the PR.\n\n- fix issue713: JUnit XML reports for doctest failures.\n  Thanks Punyashloka Biswal.\n\n- fix issue970: internal pytest warnings now appear as \"pytest-warnings\" in\n  the terminal instead of \"warnings\", so it is clear for users that those\n  warnings are from pytest and not from the builtin \"warnings\" module.\n  Thanks Bruno Oliveira.\n\n- Include setup and teardown in junitxml test durations.\n  Thanks Janne Vanhala.\n\n- fix issue735: assertion failures on debug versions of Python 3.4+\n\n- new option ``--import-mode`` to allow to change test module importing\n  behaviour to append to sys.path instead of prepending.  This better allows\n  to run test modules against installed versions of a package even if the\n  package under test has the same import root.  In this example::\n\n        testing/__init__.py\n        testing/test_pkg_under_test.py\n        pkg_under_test/\n\n  the tests will run against the installed version\n  of pkg_under_test when ``--import-mode=append`` is used whereas\n  by default they would always pick up the local version.  Thanks Holger Krekel.\n\n- pytester: add method ``TmpTestdir.delete_loaded_modules()``, and call it\n  from ``inline_run()`` to allow temporary modules to be reloaded.\n  Thanks Eduardo Schettino.\n\n- internally refactor pluginmanager API and code so that there\n  is a clear distinction between a pytest-agnostic rather simple\n  pluginmanager and the PytestPluginManager which adds a lot of\n  behaviour, among it handling of the local conftest files.\n  In terms of documented methods this is a backward compatible\n  change but it might still break 3rd party plugins which relied on\n  details like especially the pluginmanager.add_shutdown() API.\n  Thanks Holger Krekel.\n\n- pluginmanagement: introduce ``pytest.hookimpl`` and\n  ``pytest.hookspec`` decorators for setting impl/spec\n  specific parameters.  This substitutes the previous\n  now deprecated use of ``pytest.mark`` which is meant to\n  contain markers for test functions only.\n\n- write/refine docs for \"writing plugins\" which now have their\n  own page and are separate from the \"using/installing plugins`` page.\n\n- fix issue732: properly unregister plugins from any hook calling\n  sites allowing to have temporary plugins during test execution.\n\n- deprecate and warn about ``__multicall__`` argument in hook\n  implementations.  Use the ``hookwrapper`` mechanism instead already\n  introduced with pytest-2.7.\n\n- speed up pytest's own test suite considerably by using inprocess\n  tests by default (testrun can be modified with --runpytest=subprocess\n  to create subprocesses in many places instead).  The main\n  APIs to run pytest in a test is \"runpytest()\" or \"runpytest_subprocess\"\n  and \"runpytest_inprocess\" if you need a particular way of running\n  the test.  In all cases you get back a RunResult but the inprocess\n  one will also have a \"reprec\" attribute with the recorded events/reports.\n\n- fix monkeypatch.setattr(\"x.y\", raising=False) to actually not raise\n  if \"y\" is not a pre-existing attribute. Thanks Florian Bruhin.\n\n- fix issue741: make running output from testdir.run copy/pasteable\n  Thanks Bruno Oliveira.\n\n- add a new ``--noconftest`` argument which ignores all ``conftest.py`` files.\n\n- add ``file`` and ``line`` attributes to JUnit-XML output.\n\n- fix issue890: changed extension of all documentation files from ``txt`` to\n  ``rst``. Thanks to Abhijeet for the PR.\n\n- fix issue714: add ability to apply indirect=True parameter on particular argnames.\n  Thanks Elizaveta239.\n\n- fix issue890: changed extension of all documentation files from ``txt`` to\n  ``rst``. Thanks to Abhijeet for the PR.\n\n- fix issue957: \" doctest: SKIP\" option will now register doctests as SKIPPED\n  rather than PASSED.\n  Thanks Thomas Grainger for the report and Bruno Oliveira for the PR.\n\n- issue951: add new record_xml_property fixture, that supports logging\n  additional information on xml output. Thanks David Diaz for the PR.\n\n- issue949: paths after normal options (for example ``-s``, ``-v``, etc) are now\n  properly used to discover ``rootdir`` and ``ini`` files.\n  Thanks Peter Lauri for the report and Bruno Oliveira for the PR.\n\n", "1.0.2": "==================\n\n* fixing packaging issues, triggered by fedora redhat packaging,\n  also added doc, examples and contrib dirs to the tarball.\n\n* added a documentation link to the new django plugin.\n\n", "2.3.0": "==================\n\n- fix issue202 - better automatic names for parametrized test functions\n- fix issue139 - introduce pytest.fixture which allows direct scoping\n  and parametrization of funcarg factories.\n- fix issue198 - conftest fixtures were not found on windows32 in some\n  circumstances with nested directory structures due to path manipulation issues\n- fix issue193 skip test functions with were parametrized with empty\n  parameter sets\n- fix python3.3 compat, mostly reporting bits that previously depended\n  on dict ordering\n- introduce re-ordering of tests by resource and parametrization setup\n  which takes precedence to the usual file-ordering\n- fix issue185 monkeypatching time.time does not cause pytest to fail\n- fix issue172 duplicate call of pytest.fixture decoratored setup_module\n  functions\n- fix junitxml=path construction so that if tests change the\n  current working directory and the path is a relative path\n  it is constructed correctly from the original current working dir.\n- fix \"python setup.py test\" example to cause a proper \"errno\" return\n- fix issue165 - fix broken doc links and mention stackoverflow for FAQ\n- catch unicode-issues when writing failure representations\n  to terminal to prevent the whole session from crashing\n- fix xfail/skip confusion: a skip-mark or an imperative pytest.skip\n  will now take precedence before xfail-markers because we\n  can't determine xfail/xpass status in case of a skip. see also:\n  http://stackoverflow.com/questions/11105828/in-py-test-when-i-explicitly-skip-a-test-that-is-marked-as-xfail-how-can-i-get\n\n- always report installed 3rd party plugins in the header of a test run\n\n- fix issue160: a failing setup of an xfail-marked tests should\n  be reported as xfail (not xpass)\n\n- fix issue128: show captured output when capsys/capfd are used\n\n- fix issue179: properly show the dependency chain of factories\n\n- pluginmanager.register(...) now raises ValueError if the\n  plugin has been already registered or the name is taken\n\n- fix issue159: improve http://pytest.org/latest/faq.html\n  especially with respect to the \"magic\" history, also mention\n  pytest-django, trial and unittest integration.\n\n- make request.keywords and node.keywords writable.  All descendant\n  collection nodes will see keyword values.  Keywords are dictionaries\n  containing markers and other info.\n\n- fix issue 178: xml binary escapes are now wrapped in py.xml.raw\n\n- fix issue 176: correctly catch the builtin AssertionError\n  even when we replaced AssertionError with a subclass on the\n  python level\n\n- factory discovery no longer fails with magic global callables\n  that provide no sane __code__ object (mock.call for example)\n\n- fix issue 182: testdir.inprocess_run now considers passed plugins\n\n- fix issue 188: ensure sys.exc_info is clear on python2\n                 before calling into a test\n\n- fix issue 191: add unittest TestCase runTest method support\n- fix issue 156: monkeypatch correctly handles class level descriptors\n\n- reporting refinements:\n\n  - pytest_report_header now receives a \"startdir\" so that\n    you can use startdir.bestrelpath(yourpath) to show\n    nice relative path\n\n  - allow plugins to implement both pytest_report_header and\n    pytest_sessionstart (sessionstart is invoked first).\n\n  - don't show deselected reason line if there is none\n\n  - py.test -vv will show all of assert comparisons instead of truncating\n\n", "1.0.0b7": "=======\n\n* renamed py.test.xfail back to py.test.mark.xfail to avoid\n  two ways to decorate for xfail\n\n* re-added py.test.mark decorator for setting keywords on functions\n  (it was actually documented so removing it was not nice)\n\n* remove scope-argument from request.addfinalizer() because\n  request.cached_setup has the scope arg. TOOWTDI.\n\n* perform setup finalization before reporting failures\n\n* apply modified patches from Andreas Kloeckner to allow\n  test functions to have no func_code (22) and to make\n  \"-k\" and function keywords work  (20)\n\n* apply patch from Daniel Peolzleithner (issue 23)\n\n* resolve issue 18, multiprocessing.Manager() and\n  redirection clash\n\n* make __name__ == \"__channelexec__\" for remote_exec code\n\n", "2.6": "===\n\n- Cache exceptions from fixtures according to their scope (issue 467).\n\n- fix issue537: Avoid importing old assertion reinterpretation code by default.\n\n- fix issue364: shorten and enhance tracebacks representation by default.\n  The new \"--tb=auto\" option (default) will only display long tracebacks\n  for the first and last entry.  You can get the old behaviour of printing\n  all entries as long entries with \"--tb=long\".  Also short entries by\n  default are now printed very similarly to \"--tb=native\" ones.\n\n- fix issue514: teach assertion reinterpretation about private class attributes\n\n- change -v output to include full node IDs of tests.  Users can copy\n  a node ID from a test run, including line number, and use it as a\n  positional argument in order to run only a single test.\n\n- fix issue 475: fail early and comprehensible if calling\n  pytest.raises with wrong exception type.\n\n- fix issue516: tell in getting-started about current dependencies.\n\n- cleanup setup.py a bit and specify supported versions. Thanks Jurko\n  Gospodnetic for the PR.\n\n- change XPASS colour to yellow rather then red when tests are run\n  with -v.\n\n- fix issue473: work around mock putting an unbound method into a class\n  dict when double-patching.\n\n- fix issue498: if a fixture finalizer fails, make sure that\n  the fixture is still invalidated.\n\n- fix issue453: the result of the pytest_assertrepr_compare hook now gets\n  it's newlines escaped so that format_exception does not blow up.\n\n- internal new warning system: pytest will now produce warnings when\n  it detects oddities in your test collection or execution.\n  Warnings are ultimately sent to a new pytest_logwarning hook which is\n  currently only implemented by the terminal plugin which displays\n  warnings in the summary line and shows more details when -rw (report on\n  warnings) is specified.\n\n- change skips into warnings for test classes with an __init__ and\n  callables in test modules which look like a test but are not functions.\n\n- fix issue436: improved finding of initial conftest files from command\n  line arguments by using the result of parse_known_args rather than\n  the previous flaky heuristics.  Thanks Marc Abramowitz for tests\n  and initial fixing approaches in this area.\n\n- fix issue 479: properly handle nose/unittest(2) SkipTest exceptions\n  during collection/loading of test modules.  Thanks to Marc Schlaich\n  for the complete PR.\n\n- fix issue490: include pytest_load_initial_conftests in documentation\n  and improve docstring.\n\n- fix issue472: clarify that ``pytest.config.getvalue()`` cannot work\n  if it's triggered ahead of command line parsing.\n\n- merge PR123: improved integration with mock.patch decorator on tests.\n\n- fix issue412: messing with stdout/stderr FD-level streams is now\n  captured without crashes.\n\n- fix issue483: trial/py33 works now properly.  Thanks Daniel Grana for PR.\n\n- improve example for pytest integration with \"python setup.py test\"\n  which now has a generic \"-a\" or \"--pytest-args\" option where you\n  can pass additional options as a quoted string.  Thanks Trevor Bekolay.\n\n- simplified internal capturing mechanism and made it more robust\n  against tests or setups changing FD1/FD2, also better integrated\n  now with pytest.pdb() in single tests.\n\n- improvements to pytest's own test-suite leakage detection, courtesy of PRs\n  from Marc Abramowitz\n\n- fix issue492: avoid leak in test_writeorg.  Thanks Marc Abramowitz.\n\n- fix issue493: don't run tests in doc directory with ``python setup.py test``\n  (use tox -e doctesting for that)\n\n- fix issue486: better reporting and handling of early conftest loading failures\n\n- some cleanup and simplification of internal conftest handling.\n\n- work a bit harder to break reference cycles when catching exceptions.\n  Thanks Jurko Gospodnetic.\n\n- fix issue443: fix skip examples to use proper comparison.  Thanks Alex\n  Groenholm.\n\n- support nose-style ``__test__`` attribute on modules, classes and\n  functions, including unittest-style Classes.  If set to False, the\n  test will not be collected.\n\n- fix issue512: show \"<notset>\" for arguments which might not be set\n  in monkeypatch plugin.  Improves output in documentation.\n\n\n", "2.6.4": "==================\n\n- Improve assertion failure reporting on iterables, by using ndiff and\n  pprint.\n\n- removed outdated japanese docs from source tree.\n\n- docs for \"pytest_addhooks\" hook.  Thanks Bruno Oliveira.\n\n- updated plugin index docs.  Thanks Bruno Oliveira.\n\n- fix issue557: with \"-k\" we only allow the old style \"-\" for negation\n  at the beginning of strings and even that is deprecated.  Use \"not\" instead.\n  This should allow to pick parametrized tests where \"-\" appeared in the parameter.\n\n- fix issue604: Escape % character in the assertion message.\n\n- fix issue620: add explanation in the --genscript target about what\n  the binary blob means. Thanks Dinu Gherman.\n\n- fix issue614: fixed pastebin support.\n\n\n- fix issue620: add explanation in the --genscript target about what\n  the binary blob means. Thanks Dinu Gherman.\n\n- fix issue614: fixed pastebin support.\n\n", "1.3.2": "==================\n\n**New features**\n\n- fix issue103:  introduce py.test.raises as context manager, examples::\n\n    with py.test.raises(ZeroDivisionError):\n        x = 0\n        1 / x\n\n    with py.test.raises(RuntimeError) as excinfo:\n        call_something()\n\n     you may do extra checks on excinfo.value|type|traceback here\n\n  (thanks Ronny Pfannschmidt)\n\n- Funcarg factories can now dynamically apply a marker to a\n  test invocation.  This is for example useful if a factory\n  provides parameters to a test which are expected-to-fail::\n\n    def pytest_funcarg__arg(request):\n        request.applymarker(py.test.mark.xfail(reason=\"flaky config\"))\n        ...\n\n    def test_function(arg):\n        ...\n\n- improved error reporting on collection and import errors. This makes\n  use of a more general mechanism, namely that for custom test item/collect\n  nodes ``node.repr_failure(excinfo)`` is now uniformly called so that you can\n  override it to return a string error representation of your choice\n  which is going to be reported as a (red) string.\n\n- introduce '--junitprefix=STR' option to prepend a prefix\n  to all reports in the junitxml file.\n\n**Bug fixes**\n\n- make tests and the ``pytest_recwarn`` plugin in particular fully compatible\n  to Python2.7 (if you use the ``recwarn`` funcarg warnings will be enabled so that\n  you can properly check for their existence in a cross-python manner).\n- refine --pdb: ignore xfailed tests, unify its TB-reporting and\n  don't display failures again at the end.\n- fix assertion interpretation with the ** operator (thanks Benjamin Peterson)\n- fix issue105 assignment on the same line as a failing assertion (thanks Benjamin Peterson)\n- fix issue104 proper escaping for test names in junitxml plugin (thanks anonymous)\n- fix issue57 -f|--looponfail to work with xpassing tests (thanks Ronny)\n- fix issue92 collectonly reporter and --pastebin (thanks Benjamin Peterson)\n- fix py.code.compile(source) to generate unique filenames\n- fix assertion re-interp problems on PyPy, by defering code\n  compilation to the (overridable) Frame.eval class. (thanks Amaury Forgeot)\n- fix py.path.local.pyimport() to work with directories\n- streamline py.path.local.mkdtemp implementation and usage\n- don't print empty lines when showing junitxml-filename\n- add optional boolean ignore_errors parameter to py.path.local.remove\n- fix terminal writing on win32/python2.4\n- py.process.cmdexec() now tries harder to return properly encoded unicode objects\n  on all python versions\n- install plain py.test/py.which scripts also for Jython, this helps to\n  get canonical script paths in virtualenv situations\n- make path.bestrelpath(path) return \".\", note that when calling\n  X.bestrelpath the assumption is that X is a directory.\n- make initial conftest discovery ignore \"--\" prefixed arguments\n- fix resultlog plugin when used in an multicpu/multihost xdist situation\n  (thanks Jakub Gustak)\n- perform distributed testing related reporting in the xdist-plugin\n  rather than having dist-related code in the generic py.test\n  distribution\n- fix homedir detection on Windows\n- ship distribute_setup.py version 0.6.13\n\n", "2.0.0": "==================\n\n- pytest-2.0 is now its own package and depends on pylib-2.0\n- new ability: python -m pytest / python -m pytest.main ability\n- new python invocation: pytest.main(args, plugins) to load\n  some custom plugins early.\n- try harder to run unittest test suites in a more compatible manner\n  by deferring setup/teardown semantics to the unittest package.\n  also work harder to run twisted/trial and Django tests which\n  should now basically work by default.\n- introduce a new way to set config options via ini-style files,\n  by default setup.cfg and tox.ini files are searched.  The old\n  ways (certain environment variables, dynamic conftest.py reading\n  is removed).\n- add a new \"-q\" option which decreases verbosity and prints a more\n  nose/unittest-style \"dot\" output.\n- fix issue135 - marks now work with unittest test cases as well\n- fix issue126 - introduce py.test.set_trace() to trace execution via\n  PDB during the running of tests even if capturing is ongoing.\n- fix issue123 - new \"python -m py.test\" invocation for py.test\n  (requires Python 2.5 or above)\n- fix issue124 - make reporting more resilient against tests opening\n  files on filedescriptor 1 (stdout).\n- fix issue109 - sibling conftest.py files will not be loaded.\n  (and Directory collectors cannot be customized anymore from a Directory's\n  conftest.py - this needs to happen at least one level up).\n- introduce (customizable) assertion failure representations and enhance\n  output on assertion failures for comparisons and other cases (Floris Bruynooghe)\n- nose-plugin: pass through type-signature failures in setup/teardown\n  functions instead of not calling them (Ed Singleton)\n- remove py.test.collect.Directory (follows from a major refactoring\n  and simplification of the collection process)\n- majorly reduce py.test core code, shift function/python testing to own plugin\n- fix issue88 (finding custom test nodes from command line arg)\n- refine 'tmpdir' creation, will now create basenames better associated\n  with test names (thanks Ronny)\n- \"xpass\" (unexpected pass) tests don't cause exitcode!=0\n- fix issue131 / issue60 - importing doctests in __init__ files used as namespace packages\n- fix issue93 stdout/stderr is captured while importing conftest.py\n- fix bug: unittest collected functions now also can have \"pytestmark\"\n  applied at class/module level\n- add ability to use \"class\" level for cached_setup helper\n- fix strangeness: mark.* objects are now immutable, create new instances\n\n", "2.7.0": "==================\n\n- fix issue435: make reload() work when assert rewriting is active.\n  Thanks Daniel Hahler.\n\n- fix issue616: conftest.py files and their contained fixutres are now\n  properly considered for visibility, independently from the exact\n  current working directory and test arguments that are used.\n  Many thanks to Eric Siegerman and his PR235 which contains\n  systematic tests for conftest visibility and now passes.\n  This change also introduces the concept of a ``rootdir`` which\n  is printed as a new pytest header and documented in the pytest\n  customize web page.\n\n- change reporting of \"diverted\" tests, i.e. tests that are collected\n  in one file but actually come from another (e.g. when tests in a test class\n  come from a base class in a different file).  We now show the nodeid\n  and indicate via a postfix the other file.\n\n- add ability to set command line options by environment variable PYTEST_ADDOPTS.\n\n- added documentation on the new pytest-dev teams on bitbucket and\n  github.  See https://pytest.org/latest/contributing.html .\n  Thanks to Anatoly for pushing and initial work on this.\n\n- fix issue650: new option ``--docttest-ignore-import-errors`` which\n  will turn import errors in doctests into skips.  Thanks Charles Cloud\n  for the complete PR.\n\n- fix issue655: work around different ways that cause python2/3\n  to leak sys.exc_info into fixtures/tests causing failures in 3rd party code\n\n- fix issue615: assertion re-writing did not correctly escape % signs\n  when formatting boolean operations, which tripped over mixing\n  booleans with modulo operators.  Thanks to Tom Viner for the report,\n  triaging and fix.\n\n- implement issue351: add ability to specify parametrize ids as a callable\n  to generate custom test ids.  Thanks Brianna Laugher for the idea and\n  implementation.\n\n- introduce and document new hookwrapper mechanism useful for plugins\n  which want to wrap the execution of certain hooks for their purposes.\n  This supersedes the undocumented ``__multicall__`` protocol which\n  pytest itself and some external plugins use.  Note that pytest-2.8\n  is scheduled to drop supporting the old ``__multicall__``\n  and only support the hookwrapper protocol.\n\n- majorly speed up invocation of plugin hooks\n\n- use hookwrapper mechanism in builtin pytest plugins.\n\n- add a doctest ini option for doctest flags, thanks Holger Peters.\n\n- add note to docs that if you want to mark a parameter and the\n  parameter is a callable, you also need to pass in a reason to disambiguate\n  it from the \"decorator\" case.  Thanks Tom Viner.\n\n- \"python_classes\" and \"python_functions\" options now support glob-patterns\n  for test discovery, as discussed in issue600. Thanks Ldiary Translations.\n\n- allow to override parametrized fixtures with non-parametrized ones and vice versa (bubenkoff).\n\n- fix issue463: raise specific error for 'parameterize' misspelling (pfctdayelise).\n\n- On failure, the ``sys.last_value``, ``sys.last_type`` and\n  ``sys.last_traceback`` are set, so that a user can inspect the error\n  via postmortem debugging (almarklein).\n\n", "2.1.0": "==================\n\n- fix issue53 call nosestyle setup functions with correct ordering\n- fix issue58 and issue59: new assertion code fixes\n- merge Benjamin's assertionrewrite branch: now assertions\n  for test modules on python 2.6 and above are done by rewriting\n  the AST and saving the pyc file before the test module is imported.\n  see doc/assert.txt for more info.\n- fix issue43: improve doctests with better traceback reporting on\n  unexpected exceptions\n- fix issue47: timing output in junitxml for test cases is now correct\n- fix issue48: typo in MarkInfo repr leading to exception\n- fix issue49: avoid confusing error when initizaliation partially fails\n- fix issue44: env/username expansion for junitxml file path\n- show releaselevel information in test runs for pypy\n- reworked doc pages for better navigation and PDF generation\n- report KeyboardInterrupt even if interrupted during session startup\n- fix issue 35 - provide PDF doc version and download link from index page\n\n", "2.3.2": "==================\n\n- fix issue208 and fix issue29 use new py version to avoid long pauses\n  when printing tracebacks in long modules\n\n- fix issue205 - conftests in subdirs customizing\n  pytest_pycollect_makemodule and pytest_pycollect_makeitem\n  now work properly\n\n- fix teardown-ordering for parametrized setups\n\n- fix issue127 - better documentation for pytest_addoption\n  and related objects.\n\n- fix unittest behaviour: TestCase.runtest only called if there are\n  test methods defined\n\n- improve trial support: don't collect its empty\n  unittest.TestCase.runTest() method\n\n- \"python setup.py test\" now works with pytest itself\n\n- fix/improve internal/packaging related bits:\n\n  - exception message check of test_nose.py now passes on python33 as well\n\n  - issue206 - fix test_assertrewrite.py to work when a global\n    PYTHONDONTWRITEBYTECODE=1 is present\n\n  - add tox.ini to pytest distribution so that ignore-dirs and others config\n    bits are properly distributed for maintainers who run pytest-own tests\n\n", "2.8.1": "==================\n\n- fix 1034: Add missing nodeid on pytest_logwarning call in\n  addhook.  Thanks Simon Gomizelj for the PR.\n\n- 'deprecated_call' is now only satisfied with a DeprecationWarning or\n  PendingDeprecationWarning. Before 2.8.0, it accepted any warning, and 2.8.0\n  made it accept only DeprecationWarning (but not PendingDeprecationWarning).\n  Thanks Alex Gaynor for the issue and Eric Hunsberger for the PR.\n\n- fix issue 1073: avoid calling __getattr__ on potential plugin objects.\n  This fixes an incompatibility with pytest-django.  Thanks Andreas Pelme,\n  Bruno Oliveira and Ronny Pfannschmidt for contributing and Holger Krekel\n  for the fix.\n\n- Fix issue 704: handle versionconflict during plugin loading more\n  gracefully.  Thanks Bruno Oliveira for the PR.\n\n- Fix issue 1064: \"\"--junitxml\" regression when used with the\n  \"pytest-xdist\" plugin, with test reports being assigned to the wrong tests.\n  Thanks Daniel Grunwald for the report and Bruno Oliveira for the PR.\n\n- (experimental) adapt more SEMVER style versioning and change meaning of\n  master branch in git repo: \"master\" branch now keeps the bugfixes, changes\n  aimed for micro releases.  \"features\" branch will only be released\n  with minor or major pytest releases.\n\n- Fix issue 766 by removing documentation references to distutils.\n  Thanks Russel Winder.\n\n- Fix issue 1030: now byte-strings are escaped to produce item node ids\n  to make them always serializable.\n  Thanks Andy Freeland for the report and Bruno Oliveira for the PR.\n\n- Python 2: if unicode parametrized values are convertible to ascii, their\n  ascii representation is used for the node id.\n\n- Fix issue 411: Add __eq__ method to assertion comparison example.\n  Thanks Ben Webb.\n- Fix issue 653: deprecated_call can be used as context manager.\n\n- fix issue 877: properly handle assertion explanations with non-ascii repr\n  Thanks Mathieu Agopian for the report and Ronny Pfannschmidt for the PR.\n\n- fix issue 1029: transform errors when writing cache values into pytest-warnings\n\n", "3.0.1": "==================\n\n* Fix regression when ``importorskip`` is used at module level (`1822`_).\n  Thanks `jaraco`_ and `The-Compiler`_ for the report and `nicoddemus`_ for the PR.\n\n* Fix parametrization scope when session fixtures are used in conjunction\n  with normal parameters in the same call (`1832`_).\n  Thanks `The-Compiler`_ for the report, `Kingdread`_ and `nicoddemus`_ for the PR.\n\n* Fix internal error when parametrizing tests or fixtures using an empty ``ids`` argument (`1849`_).\n  Thanks `OPpuolitaival`_ for the report and `nicoddemus`_ for the PR.\n\n* Fix loader error when running ``pytest`` embedded in a zipfile.\n  Thanks `mbachry`_ for the PR.\n\n\n.. _Kingdread: https://github.com/Kingdread\n.. _mbachry: https://github.com/mbachry\n.. _OPpuolitaival: https://github.com/OPpuolitaival\n\n.. _1822: https://github.com/pytest-dev/pytest/issues/1822\n.. _1832: https://github.com/pytest-dev/pytest/issues/1832\n.. _1849: https://github.com/pytest-dev/pytest/issues/1849\n\n\n", "2.7.2": "==================\n\n- fix issue767: pytest.raises value attribute does not contain the exception\n  instance on Python 2.6. Thanks Eric Siegerman for providing the test\n  case and Bruno Oliveira for PR.\n\n- Automatically create directory for junitxml and results log.\n  Thanks Aron Curzon.\n\n- fix issue713: JUnit XML reports for doctest failures.\n  Thanks Punyashloka Biswal.\n\n- fix issue735: assertion failures on debug versions of Python 3.4+\n  Thanks Benjamin Peterson.\n\n- fix issue114: skipif marker reports to internal skipping plugin;\n  Thanks Floris Bruynooghe for reporting and Bruno Oliveira for the PR.\n\n- fix issue748: unittest.SkipTest reports to internal pytest unittest plugin.\n  Thanks Thomas De Schampheleire for reporting and Bruno Oliveira for the PR.\n\n- fix issue718: failed to create representation of sets containing unsortable\n  elements in python 2. Thanks Edison Gustavo Muenz.\n\n- fix issue756, fix issue752 (and similar issues): depend on py-1.4.29\n  which has a refined algorithm for traceback generation.\n\n\n", "2.9.1": "==================\n\n**Bug Fixes**\n\n* Improve error message when a plugin fails to load.\n  Thanks `nicoddemus`_ for the PR.\n\n* Fix (`1178 <https://github.com/pytest-dev/pytest/issues/1178>`_):\n  ``pytest.fail`` with non-ascii characters raises an internal pytest error.\n  Thanks `nicoddemus`_ for the PR.\n\n* Fix (`469`_): junit parses report.nodeid incorrectly, when params IDs\n  contain ``::``. Thanks `tomviner`_ for the PR (`1431`_).\n\n* Fix (`578 <https://github.com/pytest-dev/pytest/issues/578>`_): SyntaxErrors\n  containing non-ascii lines at the point of failure generated an internal\n  py.test error.\n  Thanks `asottile`_ for the report and `nicoddemus`_ for the PR.\n\n* Fix (`1437`_): When passing in a bytestring regex pattern to parameterize\n  attempt to decode it as utf-8 ignoring errors.\n\n* Fix (`649`_): parametrized test nodes cannot be specified to run on the command line.\n\n* Fix (`138`_): better reporting for python 3.3+ chained exceptions\n\n.. _1437: https://github.com/pytest-dev/pytest/issues/1437\n.. _469: https://github.com/pytest-dev/pytest/issues/469\n.. _1431: https://github.com/pytest-dev/pytest/pull/1431\n.. _649: https://github.com/pytest-dev/pytest/issues/649\n.. _138: https://github.com/pytest-dev/pytest/issues/138\n\n.. _asottile: https://github.com/asottile\n\n\n", "2.0.3": "==================\n\n- fix issue38: nicer tracebacks on calls to hooks, particularly early\n  configure/sessionstart ones\n\n- fix missing skip reason/meta information in junitxml files, reported\n  via http://lists.idyll.org/pipermail/testing-in-python/2011-March/003928.html\n\n- fix issue34: avoid collection failure with \"test\" prefixed classes\n  deriving from object.\n\n- don't require zlib (and other libs) for genscript plugin without\n  --genscript actually being used.\n\n- speed up skips (by not doing a full traceback representation\n  internally)\n\n- fix issue37: avoid invalid characters in junitxml's output\n\n", "2.5.1": "==================\n\n- merge new documentation styling PR from Tobias Bieniek.\n\n- fix issue403: allow parametrize of multiple same-name functions within\n  a collection node.  Thanks Andreas Kloeckner and Alex Gaynor for reporting\n  and analysis.\n\n- Allow parameterized fixtures to specify the ID of the parameters by\n  adding an ids argument to pytest.fixture() and pytest.yield_fixture().\n  Thanks Floris Bruynooghe.\n\n- fix issue404 by always using the binary xml escape in the junitxml\n  plugin.  Thanks Ronny Pfannschmidt.\n\n- fix issue407: fix addoption docstring to point to argparse instead of\n  optparse. Thanks Daniel D. Wright.\n\n\n\n", "3.0.5": "==================\n\n* Add warning when not passing ``option=value`` correctly to ``-o/--override-ini`` (`2105`_).\n  Also improved the help documentation. Thanks to `mbukatov`_ for the report and\n  `lwm`_ for the PR.\n\n* Now ``--confcutdir`` and ``--junit-xml`` are properly validated if they are directories\n  and filenames, respectively (`2089`_ and `2078`_). Thanks to `lwm`_ for the PR.\n\n* Add hint to error message hinting possible missing ``__init__.py`` (`478`_). Thanks `DuncanBetts`_.\n\n* More accurately describe when fixture finalization occurs in documentation (`687`_). Thanks `DuncanBetts`_.\n\n* Provide ``:ref:`` targets for ``recwarn.rst`` so we can use intersphinx referencing.\n  Thanks to `dupuy`_ for the report and `lwm`_ for the PR.\n\n* In Python 2, use a simple ``+-`` ASCII string in the string representation of ``pytest.approx`` (for example ``\"4 +- 4.0e-06\"``)\n  because it is brittle to handle that in different contexts and representations internally in pytest\n  which can result in bugs such as `2111`_. In Python 3, the representation still uses ``\u00b1`` (for example ``4 \u00b1 4.0e-06``).\n  Thanks `kerrick-lyft`_ for the report and `nicoddemus`_ for the PR.\n\n* Using ``item.Function``, ``item.Module``, etc., is now issuing deprecation warnings, prefer\n  ``pytest.Function``, ``pytest.Module``, etc., instead (`2034`_).\n  Thanks `nmundar`_ for the PR.\n\n* Fix error message using ``approx`` with complex numbers (`2082`_).\n  Thanks `adler-j`_ for the report and `nicoddemus`_ for the PR.\n\n* Fixed false-positives warnings from assertion rewrite hook for modules imported more than\n  once by the ``pytest_plugins`` mechanism.\n  Thanks `nicoddemus`_ for the PR.\n\n* Remove an internal cache which could cause hooks from ``conftest.py`` files in\n  sub-directories to be called in other directories incorrectly (`2016`_).\n  Thanks `d-b-w`_ for the report and `nicoddemus`_ for the PR.\n\n* Remove internal code meant to support earlier Python 3 versions that produced the side effect\n  of leaving ``None`` in ``sys.modules`` when expressions were evaluated by pytest (for example passing a condition\n  as a string to ``pytest.mark.skipif``)(`2103`_).\n  Thanks `jaraco`_ for the report and `nicoddemus`_ for the PR.\n\n* Cope gracefully with a .pyc file with no matching .py file (`2038`_). Thanks\n  `nedbat`_.\n\n.. _syre: https://github.com/syre\n.. _adler-j: https://github.com/adler-j\n.. _d-b-w: https://bitbucket.org/d-b-w/\n.. _DuncanBetts: https://github.com/DuncanBetts\n.. _dupuy: https://bitbucket.org/dupuy/\n.. _kerrick-lyft: https://github.com/kerrick-lyft\n.. _lwm: https://github.com/lwm\n.. _mbukatov: https://github.com/mbukatov\n.. _nedbat: https://github.com/nedbat\n.. _nmundar: https://github.com/nmundar\n\n.. _2016: https://github.com/pytest-dev/pytest/issues/2016\n.. _2034: https://github.com/pytest-dev/pytest/issues/2034\n.. _2038: https://github.com/pytest-dev/pytest/issues/2038\n.. _2078: https://github.com/pytest-dev/pytest/issues/2078\n.. _2082: https://github.com/pytest-dev/pytest/issues/2082\n.. _2089: https://github.com/pytest-dev/pytest/issues/2089\n.. _2103: https://github.com/pytest-dev/pytest/issues/2103\n.. _2105: https://github.com/pytest-dev/pytest/issues/2105\n.. _2111: https://github.com/pytest-dev/pytest/issues/2111\n.. _478: https://github.com/pytest-dev/pytest/issues/478\n.. _687: https://github.com/pytest-dev/pytest/issues/687\n\n\n", "3.1.0": "==================\n\n\nNew Features\n------------\n\n* The ``pytest-warnings`` plugin has been integrated into the core and now ``pytest`` automatically\n  captures and displays warnings at the end of the test session.\n\n  .. warning::\n\n    This feature may disrupt test suites which apply and treat warnings themselves, and can be\n    disabled in your ``pytest.ini``:\n\n    .. code-block:: ini\n\n      [pytest]\n      addopts = -p no:warnings\n\n    See the `warnings documentation page <https://docs.pytest.org/en/latest/warnings.html>`_ for more\n    information.\n\n  Thanks `nicoddemus`_ for the PR.\n\n* Added ``junit_suite_name`` ini option to specify root ``<testsuite>`` name for JUnit XML reports (`533`_).\n\n* Added an ini option ``doctest_encoding`` to specify which encoding to use for doctest files.\n  Thanks `wheerd`_ for the PR (`2101`_).\n\n* ``pytest.warns`` now checks for subclass relationship rather than\n  class equality. Thanks `lesteve`_ for the PR (`2166`_)\n\n* ``pytest.raises`` now asserts that the error message matches a text or regex\n  with the ``match`` keyword argument. Thanks `Kriechi`_ for the PR.\n\n* ``pytest.param`` can be used to declare test parameter sets with marks and test ids.\n  Thanks `RonnyPfannschmidt`_ for the PR.\n\n\nChanges\n-------\n\n* remove all internal uses of pytest_namespace hooks,\n  this is to prepare the removal of preloadconfig in pytest 4.0\n  Thanks to `RonnyPfannschmidt`_ for the PR.\n\n* pytest now warns when a callable ids raises in a parametrized test. Thanks `fogo`_ for the PR.\n\n* It is now possible to skip test classes from being collected by setting a\n  ``__test__`` attribute to ``False`` in the class body (`2007`_). Thanks\n  to `syre`_ for the report and `lwm`_ for the PR.\n\n* Change junitxml.py to produce reports that comply with Junitxml schema.\n  If the same test fails with failure in call and then errors in teardown\n  we split testcase element into two, one containing the error and the other\n  the failure. (`2228`_) Thanks to `kkoukiou`_ for the PR.\n\n* Testcase reports with a ``url`` attribute will now properly write this to junitxml.\n  Thanks `fushi`_ for the PR (`1874`_).\n\n* Remove common items from dict comparision output when verbosity=1. Also update\n  the truncation message to make it clearer that pytest truncates all\n  assertion messages if verbosity < 2 (`1512`_).\n  Thanks `mattduck`_ for the PR\n\n* ``--pdbcls`` no longer implies ``--pdb``. This makes it possible to use\n  ``addopts=--pdbcls=module.SomeClass`` on ``pytest.ini``. Thanks `davidszotten`_ for\n  the PR (`1952`_).\n\n* fix `2013`_: turn RecordedWarning into ``namedtuple``,\n  to give it a comprehensible repr while preventing unwarranted modification.\n\n* fix `2208`_: ensure a iteration limit for _pytest.compat.get_real_func.\n  Thanks `RonnyPfannschmidt`_ for the report and PR.\n\n* Hooks are now verified after collection is complete, rather than right after loading installed plugins. This\n  makes it easy to write hooks for plugins which will be loaded during collection, for example using the\n  ``pytest_plugins`` special variable (`1821`_).\n  Thanks `nicoddemus`_ for the PR.\n\n* Modify ``pytest_make_parametrize_id()`` hook to accept ``argname`` as an\n  additional parameter.\n  Thanks `unsignedint`_ for the PR.\n\n* Add ``venv`` to the default ``norecursedirs`` setting.\n  Thanks `The-Compiler`_ for the PR.\n\n* ``PluginManager.import_plugin`` now accepts unicode plugin names in Python 2.\n  Thanks `reutsharabani`_ for the PR.\n\n* fix `2308`_: When using both ``--lf`` and ``--ff``, only the last failed tests are run.\n  Thanks `ojii`_ for the PR.\n\n* Replace minor/patch level version numbers in the documentation with placeholders.\n  This significantly reduces change-noise as different contributors regnerate\n  the documentation on different platforms.\n  Thanks `RonnyPfannschmidt`_ for the PR.\n\n* fix `2391`_: consider pytest_plugins on all plugin modules\n  Thanks `RonnyPfannschmidt`_ for the PR.\n\n\nBug Fixes\n---------\n\n* Fix ``AttributeError`` on ``sys.stdout.buffer`` / ``sys.stderr.buffer``\n  while using ``capsys`` fixture in python 3. (`1407`_).\n  Thanks to `asottile`_.\n\n* Change capture.py's ``DontReadFromInput`` class to throw ``io.UnsupportedOperation`` errors rather\n  than ValueErrors in the ``fileno`` method (`2276`_).\n  Thanks `metasyn`_ and `vlad-dragos`_ for the PR.\n\n* Fix exception formatting while importing modules when the exception message\n  contains non-ascii characters (`2336`_).\n  Thanks `fabioz`_ for the report and `nicoddemus`_ for the PR.\n\n* Added documentation related to issue (`1937`_)\n  Thanks `skylarjhdownes`_ for the PR.\n\n* Allow collecting files with any file extension as Python modules (`2369`_).\n  Thanks `Kodiologist`_ for the PR.\n\n* Show the correct error message when collect \"parametrize\" func with wrong args (`2383`_).\n  Thanks `The-Compiler`_ for the report and `robin0371`_ for the PR.\n\n\n.. _davidszotten: https://github.com/davidszotten\n.. _fabioz: https://github.com/fabioz\n.. _fogo: https://github.com/fogo\n.. _fushi: https://github.com/fushi\n.. _Kodiologist: https://github.com/Kodiologist\n.. _Kriechi: https://github.com/Kriechi\n.. _mandeep: https://github.com/mandeep\n.. _mattduck: https://github.com/mattduck\n.. _metasyn: https://github.com/metasyn\n.. _MichalTHEDUDE: https://github.com/MichalTHEDUDE\n.. _ojii: https://github.com/ojii\n.. _reutsharabani: https://github.com/reutsharabani\n.. _robin0371: https://github.com/robin0371\n.. _skylarjhdownes: https://github.com/skylarjhdownes\n.. _unsignedint: https://github.com/unsignedint\n.. _wheerd: https://github.com/wheerd\n\n\n.. _1407: https://github.com/pytest-dev/pytest/issues/1407\n.. _1512: https://github.com/pytest-dev/pytest/issues/1512\n.. _1821: https://github.com/pytest-dev/pytest/issues/1821\n.. _1874: https://github.com/pytest-dev/pytest/pull/1874\n.. _1937: https://github.com/pytest-dev/pytest/issues/1937\n.. _1952: https://github.com/pytest-dev/pytest/pull/1952\n.. _2007: https://github.com/pytest-dev/pytest/issues/2007\n.. _2013: https://github.com/pytest-dev/pytest/issues/2013\n.. _2101: https://github.com/pytest-dev/pytest/pull/2101\n.. _2166: https://github.com/pytest-dev/pytest/pull/2166\n.. _2208: https://github.com/pytest-dev/pytest/issues/2208\n.. _2228: https://github.com/pytest-dev/pytest/issues/2228\n.. _2276: https://github.com/pytest-dev/pytest/issues/2276\n.. _2308: https://github.com/pytest-dev/pytest/issues/2308\n.. _2336: https://github.com/pytest-dev/pytest/issues/2336\n.. _2369: https://github.com/pytest-dev/pytest/issues/2369\n.. _2383: https://github.com/pytest-dev/pytest/issues/2383\n.. _2391: https://github.com/pytest-dev/pytest/issues/2391\n.. _533: https://github.com/pytest-dev/pytest/issues/533\n\n\n\n", "2.8.5": "==================\n\n- fix 1243: fixed issue where class attributes injected during collection could break pytest.\n  PR by Alexei Kozlenok, thanks Ronny Pfannschmidt and Bruno Oliveira for the review and help.\n\n- fix 1074: precompute junitxml chunks instead of storing the whole tree in objects\n  Thanks Bruno Oliveira for the report and Ronny Pfannschmidt for the PR\n\n- fix 1238: fix ``pytest.deprecated_call()`` receiving multiple arguments\n  (Regression introduced in 2.8.4). Thanks Alex Gaynor for the report and\n  Bruno Oliveira for the PR.\n\n\n", "3.0.2": "==================\n\n* Improve error message when passing non-string ids to ``pytest.mark.parametrize`` (`1857`_).\n  Thanks `okken`_ for the report and `nicoddemus`_ for the PR.\n\n* Add ``buffer`` attribute to stdin stub class ``pytest.capture.DontReadFromInput``\n  Thanks `joguSD`_ for the PR.\n\n* Fix ``UnicodeEncodeError`` when string comparison with unicode has failed. (`1864`_)\n  Thanks `AiOO`_ for the PR.\n\n* ``pytest_plugins`` is now handled correctly if defined as a string (as opposed as\n  a sequence of strings) when modules are considered for assertion rewriting.\n  Due to this bug, much more modules were being rewritten than necessary\n  if a test suite uses ``pytest_plugins`` to load internal plugins (`1888`_).\n  Thanks `jaraco`_ for the report and `nicoddemus`_ for the PR (`1891`_).\n\n* Do not call tearDown and cleanups when running tests from\n  ``unittest.TestCase`` subclasses with ``--pdb``\n  enabled. This allows proper post mortem debugging for all applications\n  which have significant logic in their tearDown machinery (`1890`_). Thanks\n  `mbyt`_ for the PR.\n\n* Fix use of deprecated ``getfuncargvalue`` method in the internal doctest plugin.\n  Thanks `ViviCoder`_ for the report (`1898`_).\n\n.. _joguSD: https://github.com/joguSD\n.. _AiOO: https://github.com/AiOO\n.. _mbyt: https://github.com/mbyt\n.. _ViviCoder: https://github.com/ViviCoder\n\n.. _1857: https://github.com/pytest-dev/pytest/issues/1857\n.. _1864: https://github.com/pytest-dev/pytest/issues/1864\n.. _1888: https://github.com/pytest-dev/pytest/issues/1888\n.. _1891: https://github.com/pytest-dev/pytest/pull/1891\n.. _1890: https://github.com/pytest-dev/pytest/issues/1890\n.. _1898: https://github.com/pytest-dev/pytest/issues/1898\n\n\n", "1.0.0": "==================\n\n* more terse reporting try to show filesystem path relatively to current dir\n* improve xfail output a bit\n\n", "3.0.3": "==================\n\n* The ``ids`` argument to ``parametrize`` again accepts ``unicode`` strings\n  in Python 2 (`1905`_).\n  Thanks `philpep`_ for the report and `nicoddemus`_ for the PR.\n\n* Assertions are now being rewritten for plugins in development mode\n  (``pip install -e``) (`1934`_).\n  Thanks `nicoddemus`_ for the PR.\n\n* Fix pkg_resources import error in Jython projects (`1853`_).\n  Thanks `raquel-ucl`_ for the PR.\n\n* Got rid of ``AttributeError: 'Module' object has no attribute '_obj'`` exception\n  in Python 3 (`1944`_).\n  Thanks `axil`_ for the PR.\n\n* Explain a bad scope value passed to ``fixture`` declarations or\n  a ``MetaFunc.parametrize()`` call. Thanks `tgoodlet`_ for the PR.\n\n* This version includes ``pluggy-0.4.0``, which correctly handles\n  ``VersionConflict`` errors in plugins (`704`_).\n  Thanks `nicoddemus`_ for the PR.\n\n\n.. _philpep: https://github.com/philpep\n.. _raquel-ucl: https://github.com/raquel-ucl\n.. _axil: https://github.com/axil\n.. _tgoodlet: https://github.com/tgoodlet\n.. _vlad-dragos: https://github.com/vlad-dragos\n\n.. _1853: https://github.com/pytest-dev/pytest/issues/1853\n.. _1905: https://github.com/pytest-dev/pytest/issues/1905\n.. _1934: https://github.com/pytest-dev/pytest/issues/1934\n.. _1944: https://github.com/pytest-dev/pytest/issues/1944\n.. _704: https://github.com/pytest-dev/pytest/issues/704\n\n\n\n\n", "1.1.0": "==================\n\n- introduce automatic plugin registration via 'pytest11'\n  entrypoints via setuptools' pkg_resources.iter_entry_points\n\n- fix py.test dist-testing to work with execnet >= 1.0.0b4\n\n- re-introduce py.test.cmdline.main() for better backward compatibility\n\n- svn paths: fix a bug with path.check(versioned=True) for svn paths,\n  allow '%' in svn paths, make svnwc.update() default to interactive mode\n  like in 1.0.x and add svnwc.update(interactive=False) to inhibit interaction.\n\n- refine distributed tarball to contain test and no pyc files\n\n- try harder to have deprecation warnings for py.compat.* accesses\n  report a correct location\n\n", "2.8.2": "==================\n\n- fix 1085: proper handling of encoding errors when passing encoded byte\n  strings to pytest.parametrize in Python 2.\n  Thanks Themanwithoutaplan for the report and Bruno Oliveira for the PR.\n\n- fix 1087: handling SystemError when passing empty byte strings to\n  pytest.parametrize in Python 3.\n  Thanks Paul Kehrer for the report and Bruno Oliveira for the PR.\n\n- fix 995: fixed internal error when filtering tracebacks where one entry\n  was generated by an exec() statement.\n  Thanks Daniel Hahler, Ashley C Straw, Philippe Gauthier and Pavel Savchenko\n  for contributing and Bruno Oliveira for the PR.\n\n- fix 1100 and 1057: errors when using autouse fixtures and doctest modules.\n  Thanks Sergey B Kirpichev and Vital Kudzelka for contributing and Bruno\n  Oliveira for the PR.\n\n", "2.8.7": "==================\n\n- fix 1338: use predictable object resolution for monkeypatch\n\n", "2.5.0": "==================\n\n- dropped python2.5 from automated release testing of pytest itself\n  which means it's probably going to break soon (but still works\n  with this release we believe).\n\n- simplified and fixed implementation for calling finalizers when\n  parametrized fixtures or function arguments are involved.  finalization\n  is now performed lazily at setup time instead of in the \"teardown phase\".\n  While this might sound odd at first, it helps to ensure that we are\n  correctly handling setup/teardown even in complex code.  User-level code\n  should not be affected unless it's implementing the pytest_runtest_teardown\n  hook and expecting certain fixture instances are torn down within (very\n  unlikely and would have been unreliable anyway).\n\n- PR90: add --color=yes|no|auto option to force terminal coloring\n  mode (\"auto\" is default).  Thanks Marc Abramowitz.\n\n- fix issue319 - correctly show unicode in assertion errors.  Many\n  thanks to Floris Bruynooghe for the complete PR.  Also means\n  we depend on py>=1.4.19 now.\n\n- fix issue396 - correctly sort and finalize class-scoped parametrized\n  tests independently from number of methods on the class.\n\n- refix issue323 in a better way -- parametrization should now never\n  cause Runtime Recursion errors because the underlying algorithm\n  for re-ordering tests per-scope/per-fixture is not recursive\n  anymore (it was tail-call recursive before which could lead\n  to problems for more than >966 non-function scoped parameters).\n\n- fix issue290 - there is preliminary support now for parametrizing\n  with repeated same values (sometimes useful to test if calling\n  a second time works as with the first time).\n\n- close issue240 - document precisely how pytest module importing\n  works, discuss the two common test directory layouts, and how it\n  interacts with PEP420-namespace packages.\n\n- fix issue246 fix finalizer order to be LIFO on independent fixtures\n  depending on a parametrized higher-than-function scoped fixture.\n  (was quite some effort so please bear with the complexity of this sentence :)\n  Thanks Ralph Schmitt for the precise failure example.\n\n- fix issue244 by implementing special index for parameters to only use\n  indices for paramentrized test ids\n\n- fix issue287 by running all finalizers but saving the exception\n  from the first failing finalizer and re-raising it so teardown will\n  still have failed.  We reraise the first failing exception because\n  it might be the cause for other finalizers to fail.\n\n- fix ordering when mock.patch or other standard decorator-wrappings\n  are used with test methods.  This fixues issue346 and should\n  help with random \"xdist\" collection failures.  Thanks to\n  Ronny Pfannschmidt and Donald Stufft for helping to isolate it.\n\n- fix issue357 - special case \"-k\" expressions to allow for\n  filtering with simple strings that are not valid python expressions.\n  Examples: \"-k 1.3\" matches all tests parametrized with 1.3.\n  \"-k None\" filters all tests that have \"None\" in their name\n  and conversely \"-k 'not None'\".\n  Previously these examples would raise syntax errors.\n\n- fix issue384 by removing the trial support code\n  since the unittest compat enhancements allow\n  trial to handle it on its own\n\n- don't hide an ImportError when importing a plugin produces one.\n  fixes issue375.\n\n- fix issue275 - allow usefixtures and autouse fixtures\n  for running doctest text files.\n\n- fix issue380 by making --resultlog only rely on longrepr instead\n  of the \"reprcrash\" attribute which only exists sometimes.\n\n- address issue122: allow pytest.fixture(params=iterator) by exploding\n  into a list early on.\n\n- fix pexpect-3.0 compatibility for pytest's own tests.\n  (fixes issue386)\n\n- allow nested parametrize-value markers, thanks James Lan for the PR.\n\n- fix unicode handling with new monkeypatch.setattr(import_path, value)\n  API.  Thanks Rob Dennis.  Fixes issue371.\n\n- fix unicode handling with junitxml, fixes issue368.\n\n- In assertion rewriting mode on Python 2, fix the detection of coding\n  cookies. See issue 330.\n\n- make \"--runxfail\" turn imperative pytest.xfail calls into no ops\n  (it already did neutralize pytest.mark.xfail markers)\n\n- refine pytest / pkg_resources interactions: The AssertionRewritingHook\n  PEP302 compliant loader now registers itself with setuptools/pkg_resources\n  properly so that the pkg_resources.resource_stream method works properly.\n  Fixes issue366.  Thanks for the investigations and full PR to Jason R. Coombs.\n\n- pytestconfig fixture is now session-scoped as it is the same object during the\n  whole test run.  Fixes issue370.\n\n- avoid one surprising case of marker malfunction/confusion::\n\n      pytest.mark.some(lambda arg: ...)\n      def test_function():\n\n  would not work correctly because pytest assumes pytest.mark.some\n  gets a function to be decorated already.  We now at least detect if this\n  arg is an lambda and thus the example will work.  Thanks Alex Gaynor\n  for bringing it up.\n\n- xfail a test on pypy that checks wrong encoding/ascii (pypy does\n  not error out). fixes issue385.\n\n- internally make varnames() deal with classes's __init__,\n  although it's not needed by pytest itself atm.  Also\n  fix caching.  Fixes issue376.\n\n- fix issue221 - handle importing of namespace-package with no\n  __init__.py properly.\n\n- refactor internal FixtureRequest handling to avoid monkeypatching.\n  One of the positive user-facing effects is that the \"request\" object\n  can now be used in closures.\n\n- fixed version comparison in pytest.importskip(modname, minverstring)\n\n- fix issue377 by clarifying in the nose-compat docs that pytest\n  does not duplicate the unittest-API into the \"plain\" namespace.\n\n- fix verbose reporting for mock'd test functions\n\n", "2.3.3": "==================\n\n- fix issue214 - parse modules that contain special objects like e. g.\n  flask's request object which blows up on getattr access if no request\n  is active. thanks Thomas Waldmann.\n\n- fix issue213 - allow to parametrize with values like numpy arrays that\n  do not support an __eq__ operator\n\n- fix issue215 - split test_python.org into multiple files\n\n- fix issue148 - unittest.skip on classes is now recognized and avoids\n  calling setUpClass/tearDownClass, thanks Pavel Repin\n\n- fix issue209 - reintroduce python2.4 support by depending on newer\n  pylib which re-introduced statement-finding for pre-AST interpreters\n\n- nose support: only call setup if it's a callable, thanks Andrew\n  Taumoefolau\n\n- fix issue219 - add py2.4-3.3 classifiers to TROVE list\n\n- in tracebacks *,** arg values are now shown next to normal arguments\n  (thanks Manuel Jacob)\n\n- fix issue217 - support mock.patch with pytest's fixtures - note that\n  you need either mock-1.0.1 or the python3.3 builtin unittest.mock.\n\n- fix issue127 - improve documentation for pytest_addoption() and\n  add a ``config.getoption(name)`` helper function for consistency.\n\n", "1.0.0b3": "====================\n\n* plugin classes are removed: one now defines\n  hooks directly in conftest.py or global pytest_*.py\n  files.\n\n* added new pytest_namespace(config) hook that allows\n  to inject helpers directly to the py.test.* namespace.\n\n* documented and refined many hooks\n\n* added new style of generative tests via\n  pytest_generate_tests hook that integrates\n  well with function arguments.\n\n\n", "2.3.4": "==================\n\n- yielded test functions will now have autouse-fixtures active but\n  cannot accept fixtures as funcargs - it's anyway recommended to\n  rather use the post-2.0 parametrize features instead of yield, see:\n  http://pytest.org/latest/example/parametrize.html\n- fix autouse-issue where autouse-fixtures would not be discovered\n  if defined in a a/conftest.py file and tests in a/tests/test_some.py\n- fix issue226 - LIFO ordering for fixture teardowns\n- fix issue224 - invocations with >256 char arguments now work\n- fix issue91 - add/discuss package/directory level setups in example\n- allow to dynamically define markers via\n  item.keywords[...]=assignment integrating with \"-m\" option\n- make \"-k\" accept an expressions the same as with \"-m\" so that one\n  can write: -k \"name1 or name2\" etc.  This is a slight incompatibility\n  if you used special syntax like \"TestClass.test_method\" which you now\n  need to write as -k \"TestClass and test_method\" to match a certain\n  method in a certain test class.\n\n", "2.1.1": "=====\n\n- fix issue64 / pytest.set_trace now works within pytest_generate_tests hooks\n- fix issue60 / fix error conditions involving the creation of __pycache__\n- fix issue63 / assertion rewriting on inserts involving strings containing '%'\n- fix assertion rewriting on calls with a ** arg\n- don't cache rewritten modules if bytecode generation is disabled\n- fix assertion rewriting in read-only directories\n- fix issue59: provide system-out/err tags for junitxml output\n- fix issue61: assertion rewriting on boolean operations with 3 or more operands\n- you can now build a man page with \"cd doc ; make man\"\n\n", "0.9.1": "=====\n\nThis is a fairly complete list of v0.9.1, which can\nserve as a reference for developers.\n\n* allowing + signs in py.path.svn urls [39106]\n* fixed support for Failed exceptions without excinfo in py.test [39340]\n* added support for killing processes for Windows (as well as platforms that\n  support os.kill) in py.misc.killproc [39655]\n* added setup/teardown for generative tests to py.test [40702]\n* added detection of FAILED TO LOAD MODULE to py.test [40703, 40738, 40739]\n* fixed problem with calling .remove() on wcpaths of non-versioned files in\n  py.path [44248]\n* fixed some import and inheritance issues in py.test [41480, 44648, 44655]\n* fail to run greenlet tests when pypy is available, but without stackless\n  [45294]\n* small fixes in rsession tests [45295]\n* fixed issue with 2.5 type representations in py.test [45483, 45484]\n* made that internal reporting issues displaying is done atomically in py.test\n  [45518]\n* made that non-existing files are ignored by the py.lookup script [45519]\n* improved exception name creation in py.test [45535]\n* made that less threads are used in execnet [merge in 45539]\n* removed lock required for atomic reporting issue displaying in py.test\n  [45545]\n* removed globals from execnet [45541, 45547]\n* refactored cleanup mechanics, made that setDaemon is set to 1 to make atexit\n  get called in 2.5 (py.execnet) [45548]\n* fixed bug in joining threads in py.execnet's servemain [45549]\n* refactored py.test.rsession tests to not rely on exact output format anymore\n  [45646]\n* using repr() on test outcome [45647]\n* added 'Reason' classes for py.test.skip() [45648, 45649]\n* killed some unnecessary sanity check in py.test.collect [45655]\n* avoid using os.tmpfile() in py.io.fdcapture because on Windows it's only\n  usable by Administrators [45901]\n* added support for locking and non-recursive commits to py.path.svnwc [45994]\n* locking files in py.execnet to prevent CPython from segfaulting [46010]\n* added export() method to py.path.svnurl\n* fixed -d -x in py.test [47277]\n* fixed argument concatenation problem in py.path.svnwc [49423]\n* restore py.test behaviour that it exits with code 1 when there are failures\n  [49974]\n* don't fail on html files that don't have an accompanying .txt file [50606]\n* fixed 'utestconvert.py < input' [50645]\n* small fix for code indentation in py.code.source [50755]\n* fix _docgen.py documentation building [51285]\n* improved checks for source representation of code blocks in py.test [51292]\n* added support for passing authentication to py.path.svn* objects [52000,\n  52001]\n* removed sorted() call for py.apigen tests in favour of [].sort() to support\n  Python 2.3 [52481]\n", "2.3.1": "==================\n\n- fix issue202 - fix regression: using \"self\" from fixture functions now\n  works as expected (it's the same \"self\" instance that a test method\n  which uses the fixture sees)\n\n- skip pexpect using tests (test_pdb.py mostly) on freebsd* systems\n  due to pexpect not supporting it properly (hanging)\n\n- link to web pages from --markers output which provides help for\n  pytest.mark.* usage.\n\n", "3.1.2": "=========================\n\nBug Fixes\n---------\n\n- Required options added via ``pytest_addoption`` will no longer prevent using\n  --help without passing them. (1999)\n\n- Respect ``python_files`` in assertion rewriting. (2121)\n\n- Fix recursion error detection when frames in the traceback contain objects\n  that can't be compared (like ``numpy`` arrays). (2459)\n\n- ``UnicodeWarning`` is issued from the internal pytest warnings plugin only\n  when the message contains non-ascii unicode (Python 2 only). (2463)\n\n- Added a workaround for Python 3.6 ``WindowsConsoleIO`` breaking due to Pytests's\n  ``FDCapture``. Other code using console handles might still be affected by the\n  very same issue and might require further workarounds/fixes, i.e. ``colorama``.\n  (2467)\n\n\nImproved Documentation\n----------------------\n\n- Fix internal API links to ``pluggy`` objects. (2331)\n\n- Make it clear that ``pytest.xfail`` stops test execution at the calling point\n  and improve overall flow of the ``skipping`` docs. (810)\n\n\n", "3.2.0": "=========================\n\nDeprecations and Removals\n-------------------------\n\n- ``pytest.approx`` no longer supports ``>``, ``>=``, ``<`` and ``<=``\n  operators to avoid surprising/inconsistent behavior. See `the docs\n  <https://docs.pytest.org/en/latest/builtin.htmlpytest.approx>`_ for more\n  information. (`2003 <https://github.com/pytest-dev/pytest/issues/2003>`_)\n\n- All old-style specific behavior in current classes in the pytest's API is\n  considered deprecated at this point and will be removed in a future release.\n  This affects Python 2 users only and in rare situations. (`2147\n  <https://github.com/pytest-dev/pytest/issues/2147>`_)\n\n- A deprecation warning is now raised when using marks for parameters\n  in ``pytest.mark.parametrize``. Use ``pytest.param`` to apply marks to\n  parameters instead. (`2427 <https://github.com/pytest-dev/pytest/issues/2427>`_)\n\n\nFeatures\n--------\n\n- Add support for numpy arrays (and dicts) to approx. (`1994\n  <https://github.com/pytest-dev/pytest/issues/1994>`_)\n\n- Now test function objects have a ``pytestmark`` attribute containing a list\n  of marks applied directly to the test function, as opposed to marks inherited\n  from parent classes or modules. (`2516 <https://github.com/pytest-\n  dev/pytest/issues/2516>`_)\n\n- Collection ignores local virtualenvs by default; `--collect-in-virtualenv`\n  overrides this behavior. (`2518 <https://github.com/pytest-\n  dev/pytest/issues/2518>`_)\n\n- Allow class methods decorated as ``staticmethod`` to be candidates for\n  collection as a test function. (Only for Python 2.7 and above. Python 2.6\n  will still ignore static methods.) (`2528 <https://github.com/pytest-\n  dev/pytest/issues/2528>`_)\n\n- Introduce ``mark.with_args`` in order to allow passing functions/classes as\n  sole argument to marks. (`2540 <https://github.com/pytest-\n  dev/pytest/issues/2540>`_)\n\n- New ``cache_dir`` ini option: sets the directory where the contents of the\n  cache plugin are stored. Directory may be relative or absolute path: if relative path, then\n  directory is created relative to ``rootdir``, otherwise it is used as is.\n  Additionally path may contain environment variables which are expanded during\n  runtime. (`2543 <https://github.com/pytest-dev/pytest/issues/2543>`_)\n\n- Introduce the ``PYTEST_CURRENT_TEST`` environment variable that is set with\n  the ``nodeid`` and stage (``setup``, ``call`` and ``teardown``) of the test\n  being currently executed. See the `documentation\n  <https://docs.pytest.org/en/latest/example/simple.htmlpytest-current-test-\n  environment-variable>`_ for more info. (`2583 <https://github.com/pytest-\n  dev/pytest/issues/2583>`_)\n\n- Introduced ``pytest.mark.filterwarnings`` mark which allows overwriting the\n  warnings filter on a per test, class or module level. See the `docs\n  <https://docs.pytest.org/en/latest/warnings.htmlpytest-mark-\n  filterwarnings>`_ for more information. (`2598 <https://github.com/pytest-\n  dev/pytest/issues/2598>`_)\n\n- ``--last-failed`` now remembers forever when a test has failed and only\n  forgets it if it passes again. This makes it easy to fix a test suite by\n  selectively running files and fixing tests incrementally. (`2621\n  <https://github.com/pytest-dev/pytest/issues/2621>`_)\n\n- New ``pytest_report_collectionfinish`` hook which allows plugins to add\n  messages to the terminal reporting after collection has been finished\n  successfully. (`2622 <https://github.com/pytest-dev/pytest/issues/2622>`_)\n\n- Added support for `PEP-415's <https://www.python.org/dev/peps/pep-0415/>`_\n  ``Exception.__suppress_context__``. Now if a ``raise exception from None`` is\n  caught by pytest, pytest will no longer chain the context in the test report.\n  The behavior now matches Python's traceback behavior. (`2631\n  <https://github.com/pytest-dev/pytest/issues/2631>`_)\n\n- Exceptions raised by ``pytest.fail``, ``pytest.skip`` and ``pytest.xfail``\n  now subclass BaseException, making them harder to be caught unintentionally\n  by normal code. (`580 <https://github.com/pytest-dev/pytest/issues/580>`_)\n\n\nBug Fixes\n---------\n\n- Set ``stdin`` to a closed ``PIPE`` in ``pytester.py.Testdir.popen()`` for\n  avoid unwanted interactive ``pdb`` (`2023 <https://github.com/pytest-\n  dev/pytest/issues/2023>`_)\n\n- Add missing ``encoding`` attribute to ``sys.std*`` streams when using\n  ``capsys`` capture mode. (`2375 <https://github.com/pytest-\n  dev/pytest/issues/2375>`_)\n\n- Fix terminal color changing to black on Windows if ``colorama`` is imported\n  in a ``conftest.py`` file. (`2510 <https://github.com/pytest-\n  dev/pytest/issues/2510>`_)\n\n- Fix line number when reporting summary of skipped tests. (`2548\n  <https://github.com/pytest-dev/pytest/issues/2548>`_)\n\n- capture: ensure that EncodedFile.name is a string. (`2555\n  <https://github.com/pytest-dev/pytest/issues/2555>`_)\n\n- The options ``--fixtures`` and ``--fixtures-per-test`` will now keep\n  indentation within docstrings. (`2574 <https://github.com/pytest-\n  dev/pytest/issues/2574>`_)\n\n- doctests line numbers are now reported correctly, fixing `pytest-sugar122\n  <https://github.com/Frozenball/pytest-sugar/issues/122>`_. (`2610\n  <https://github.com/pytest-dev/pytest/issues/2610>`_)\n\n- Fix non-determinism in order of fixture collection. Adds new dependency\n  (ordereddict) for Python 2.6. (`920 <https://github.com/pytest-\n  dev/pytest/issues/920>`_)\n\n\nImproved Documentation\n----------------------\n\n- Clarify ``pytest_configure`` hook call order. (`2539\n  <https://github.com/pytest-dev/pytest/issues/2539>`_)\n\n- Extend documentation for testing plugin code with the ``pytester`` plugin.\n  (`971 <https://github.com/pytest-dev/pytest/issues/971>`_)\n\n\nTrivial/Internal Changes\n------------------------\n\n- Update help message for ``--strict`` to make it clear it only deals with\n  unregistered markers, not warnings. (`2444 <https://github.com/pytest-\n  dev/pytest/issues/2444>`_)\n\n- Internal code move: move code for pytest.approx/pytest.raises to own files in\n  order to cut down the size of python.py (`2489 <https://github.com/pytest-\n  dev/pytest/issues/2489>`_)\n\n- Renamed the utility function ``_pytest.compat._escape_strings`` to\n  ``_ascii_escaped`` to better communicate the function's purpose. (`2533\n  <https://github.com/pytest-dev/pytest/issues/2533>`_)\n\n- Improve error message for CollectError with skip/skipif. (`2546\n  <https://github.com/pytest-dev/pytest/issues/2546>`_)\n\n- Emit warning about ``yield`` tests being deprecated only once per generator.\n  (`2562 <https://github.com/pytest-dev/pytest/issues/2562>`_)\n\n- Ensure final collected line doesn't include artifacts of previous write.\n  (`2571 <https://github.com/pytest-dev/pytest/issues/2571>`_)\n\n- Fixed all flake8 errors and warnings. (`2581 <https://github.com/pytest-\n  dev/pytest/issues/2581>`_)\n\n- Added ``fix-lint`` tox environment to run automatic pep8 fixes on the code.\n  (`2582 <https://github.com/pytest-dev/pytest/issues/2582>`_)\n\n- Turn warnings into errors in pytest's own test suite in order to catch\n  regressions due to deprecations more promptly. (`2588\n  <https://github.com/pytest-dev/pytest/issues/2588>`_)\n\n- Show multiple issue links in CHANGELOG entries. (`2620\n  <https://github.com/pytest-dev/pytest/issues/2620>`_)\n\n\n", "2.4.2": "==================\n\n- on Windows require colorama and a newer py lib so that py.io.TerminalWriter()\n  now uses colorama instead of its own ctypes hacks. (fixes issue365)\n  thanks Paul Moore for bringing it up.\n\n- fix \"-k\" matching of tests where \"repr\" and \"attr\" and other names would\n  cause wrong matches because of an internal implementation quirk\n  (don't ask) which is now properly implemented. fixes issue345.\n\n- avoid tmpdir fixture to create too long filenames especially\n  when parametrization is used (issue354)\n\n- fix pytest-pep8 and pytest-flakes / pytest interactions\n  (collection names in mark plugin was assuming an item always\n  has a function which is not true for those plugins etc.)\n  Thanks Andi Zeidler.\n\n- introduce node.get_marker/node.add_marker API for plugins\n  like pytest-pep8 and pytest-flakes to avoid the messy\n  details of the node.keywords  pseudo-dicts.  Adapted\n  docs.\n\n- remove attempt to \"dup\" stdout at startup as it's icky.\n  the normal capturing should catch enough possibilities\n  of tests messing up standard FDs.\n\n- add pluginmanager.do_configure(config) as a link to\n  config.do_configure() for plugin-compatibility\n\n", "1.3.3": "==================\n\n- fix issue113: assertion representation problem with triple-quoted strings\n  (and possibly other cases)\n- make conftest loading detect that a conftest file with the same\n  content was already loaded, avoids surprises in nested directory structures\n  which can be produced e.g. by Hudson. It probably removes the need to use\n  --confcutdir in most cases.\n- fix terminal coloring for win32\n  (thanks Michael Foord for reporting)\n- fix weirdness: make terminal width detection work on stdout instead of stdin\n  (thanks Armin Ronacher for reporting)\n- remove trailing whitespace in all py/text distribution files\n\n", "1.0.1": "==================\n\n* added a 'pytest_nose' plugin which handles nose.SkipTest,\n  nose-style function/method/generator setup/teardown and\n  tries to report functions correctly.\n\n* capturing of unicode writes or encoded strings to sys.stdout/err\n  work better, also terminalwriting was adapted and somewhat\n  unified between windows and linux.\n\n* improved documentation layout and content a lot\n\n* added a \"--help-config\" option to show conftest.py / ENV-var names for\n  all longopt cmdline options, and some special conftest.py variables.\n  renamed 'conf_capture' conftest setting to 'option_capture' accordingly.\n\n* fix issue 27: better reporting on non-collectable items given on commandline\n  (e.g. pyc files)\n\n* fix issue 33: added --version flag (thanks Benjamin Peterson)\n\n* fix issue 32: adding support for \"incomplete\" paths to wcpath.status()\n\n* \"Test\" prefixed classes are *not* collected by default anymore if they\n  have an __init__ method\n\n* monkeypatch setenv() now accepts a \"prepend\" parameter\n\n* improved reporting of collection error tracebacks\n\n* simplified multicall mechanism and plugin architecture,\n  renamed some internal methods and argnames\n\n", "2.9.0": "==================\n\n**New Features**\n\n* New ``pytest.mark.skip`` mark, which unconditionally skips marked tests.\n  Thanks `MichaelAquilina`_ for the complete PR (`1040`_).\n\n* ``--doctest-glob`` may now be passed multiple times in the command-line.\n  Thanks `jab`_ and `nicoddemus`_ for the PR.\n\n* New ``-rp`` and ``-rP`` reporting options give the summary and full output\n  of passing tests, respectively. Thanks to `codewarrior0`_ for the PR.\n\n* ``pytest.mark.xfail`` now has a ``strict`` option, which makes ``XPASS``\n  tests to fail the test suite (defaulting to ``False``). There's also a\n  ``xfail_strict`` ini option that can be used to configure it project-wise.\n  Thanks `rabbbit`_ for the request and `nicoddemus`_ for the PR (`1355`_).\n\n* ``Parser.addini`` now supports options of type ``bool``.\n  Thanks `nicoddemus`_ for the PR.\n\n* New ``ALLOW_BYTES`` doctest option. This strips ``b`` prefixes from byte strings\n  in doctest output (similar to ``ALLOW_UNICODE``).\n  Thanks `jaraco`_ for the request and `nicoddemus`_ for the PR (`1287`_).\n\n* Give a hint on ``KeyboardInterrupt`` to use the ``--fulltrace`` option to show the errors.\n  Fixes `1366`_.\n  Thanks to `hpk42`_ for the report and `RonnyPfannschmidt`_ for the PR.\n\n* Catch ``IndexError`` exceptions when getting exception source location.\n  Fixes a pytest internal error for dynamically generated code (fixtures and tests)\n  where source lines are fake by intention.\n\n**Changes**\n\n* **Important**: `py.code <https://pylib.readthedocs.io/en/latest/code.html>`_ has been\n  merged into the ``pytest`` repository as ``pytest._code``. This decision\n  was made because ``py.code`` had very few uses outside ``pytest`` and the\n  fact that it was in a different repository made it difficult to fix bugs on\n  its code in a timely manner. The team hopes with this to be able to better\n  refactor out and improve that code.\n  This change shouldn't affect users, but it is useful to let users aware\n  if they encounter any strange behavior.\n\n  Keep in mind that the code for ``pytest._code`` is **private** and\n  **experimental**, so you definitely should not import it explicitly!\n\n  Please note that the original ``py.code`` is still available in\n  `pylib <https://pylib.readthedocs.io>`_.\n\n* ``pytest_enter_pdb`` now optionally receives the pytest config object.\n  Thanks `nicoddemus`_ for the PR.\n\n* Removed code and documentation for Python 2.5 or lower versions,\n  including removal of the obsolete ``_pytest.assertion.oldinterpret`` module.\n  Thanks `nicoddemus`_ for the PR (`1226`_).\n\n* Comparisons now always show up in full when ``CI`` or ``BUILD_NUMBER`` is\n  found in the environment, even when ``-vv`` isn't used.\n  Thanks `The-Compiler`_ for the PR.\n\n* ``--lf`` and ``--ff`` now support long names: ``--last-failed`` and\n  ``--failed-first`` respectively.\n  Thanks `MichaelAquilina`_ for the PR.\n\n* Added expected exceptions to ``pytest.raises`` fail message.\n\n* Collection only displays progress (\"collecting X items\") when in a terminal.\n  This avoids cluttering the output when using ``--color=yes`` to obtain\n  colors in CI integrations systems (`1397`_).\n\n**Bug Fixes**\n\n* The ``-s`` and ``-c`` options should now work under ``xdist``;\n  ``Config.fromdictargs`` now represents its input much more faithfully.\n  Thanks to `bukzor`_ for the complete PR (`680`_).\n\n* Fix (`1290`_): support Python 3.5's ```` operator in assertion rewriting.\n  Thanks `Shinkenjoe`_ for report with test case and `tomviner`_ for the PR.\n\n* Fix formatting utf-8 explanation messages (`1379`_).\n  Thanks `biern`_ for the PR.\n\n* Fix `traceback style docs`_ to describe all of the available options\n  (auto/long/short/line/native/no), with ``auto`` being the default since v2.6.\n  Thanks `hackebrot`_ for the PR.\n\n* Fix (`1422`_): junit record_xml_property doesn't allow multiple records\n  with same name.\n\n.. _`traceback style docs`: https://pytest.org/latest/usage.htmlmodifying-python-traceback-printing\n\n.. _1609: https://github.com/pytest-dev/pytest/issues/1609\n.. _1422: https://github.com/pytest-dev/pytest/issues/1422\n.. _1379: https://github.com/pytest-dev/pytest/issues/1379\n.. _1366: https://github.com/pytest-dev/pytest/issues/1366\n.. _1040: https://github.com/pytest-dev/pytest/pull/1040\n.. _680: https://github.com/pytest-dev/pytest/issues/680\n.. _1287: https://github.com/pytest-dev/pytest/pull/1287\n.. _1226: https://github.com/pytest-dev/pytest/pull/1226\n.. _1290: https://github.com/pytest-dev/pytest/pull/1290\n.. _1355: https://github.com/pytest-dev/pytest/pull/1355\n.. _1397: https://github.com/pytest-dev/pytest/issues/1397\n.. _biern: https://github.com/biern\n.. _MichaelAquilina: https://github.com/MichaelAquilina\n.. _bukzor: https://github.com/bukzor\n.. _hpk42: https://github.com/hpk42\n.. _nicoddemus: https://github.com/nicoddemus\n.. _jab: https://github.com/jab\n.. _codewarrior0: https://github.com/codewarrior0\n.. _jaraco: https://github.com/jaraco\n.. _The-Compiler: https://github.com/The-Compiler\n.. _Shinkenjoe: https://github.com/Shinkenjoe\n.. _tomviner: https://github.com/tomviner\n.. _RonnyPfannschmidt: https://github.com/RonnyPfannschmidt\n.. _rabbbit: https://github.com/rabbbit\n.. _hackebrot: https://github.com/hackebrot\n.. _pquentin: https://github.com/pquentin\n.. _ioggstream: https://github.com/ioggstream\n\n", "3.2.1": "=========================\n\nBug Fixes\n---------\n\n- Fixed small terminal glitch when collecting a single test item. (`2579\n  <https://github.com/pytest-dev/pytest/issues/2579>`_)\n\n- Correctly consider ``/`` as the file separator to automatically mark plugin\n  files for rewrite on Windows. (`2591 <https://github.com/pytest-\n  dev/pytest/issues/2591>`_)\n\n- Properly escape test names when setting ``PYTEST_CURRENT_TEST`` environment\n  variable. (`2644 <https://github.com/pytest-dev/pytest/issues/2644>`_)\n\n- Fix error on Windows and Python 3.6+ when ``sys.stdout`` has been replaced\n  with a stream-like object which does not implement the full ``io`` module\n  buffer protocol. In particular this affects ``pytest-xdist`` users on the\n  aforementioned platform. (`2666 <https://github.com/pytest-\n  dev/pytest/issues/2666>`_)\n\n\nImproved Documentation\n----------------------\n\n- Explicitly document which pytest features work with ``unittest``. (`2626\n  <https://github.com/pytest-dev/pytest/issues/2626>`_)\n\n\n", "2.2.0": "==================\n\n- fix issue90: introduce eager tearing down of test items so that\n  teardown function are called earlier.\n- add an all-powerful metafunc.parametrize function which allows to\n  parametrize test function arguments in multiple steps and therefore\n  from independent plugins and places.\n- add a pytest.mark.parametrize helper which allows to easily\n  call a test function with different argument values\n- Add examples to the \"parametrize\" example page, including a quick port\n  of Test scenarios and the new parametrize function and decorator.\n- introduce registration for \"pytest.mark.*\" helpers via ini-files\n  or through plugin hooks.  Also introduce a \"--strict\" option which\n  will treat unregistered markers as errors\n  allowing to avoid typos and maintain a well described set of markers\n  for your test suite.  See exaples at http://pytest.org/latest/mark.html\n  and its links.\n- issue50: introduce \"-m marker\" option to select tests based on markers\n  (this is a stricter and more predictable version of '-k' in that \"-m\"\n  only matches complete markers and has more obvious rules for and/or\n  semantics.\n- new feature to help optimizing the speed of your tests:\n  --durations=N option for displaying N slowest test calls\n  and setup/teardown methods.\n- fix issue87: --pastebin now works with python3\n- fix issue89: --pdb with unexpected exceptions in doctest work more sensibly\n- fix and cleanup pytest's own test suite to not leak FDs\n- fix issue83: link to generated funcarg list\n- fix issue74: pyarg module names are now checked against imp.find_module false positives\n- fix compatibility with twisted/trial-11.1.0 use cases\n- simplify Node.listchain\n- simplify junitxml output code by relying on py.xml\n- add support for skip properties on unittest classes and functions\n\n", "2.2.4": "==================\n\n- fix error message for rewritten assertions involving the % operator\n- fix issue 126: correctly match all invalid xml characters for junitxml\n  binary escape\n- fix issue with unittest: now unittest.expectedFailure markers should\n  be processed correctly (you can also use pytest.mark markers)\n- document integration with the extended distribute/setuptools test commands\n- fix issue 140: properly get the real functions\n  of bound classmethods for setup/teardown_class\n- fix issue 141: switch from the deceased paste.pocoo.org to bpaste.net\n- fix issue 143: call unconfigure/sessionfinish always when\n  configure/sessionstart where called\n- fix issue 144: better mangle test ids to junitxml classnames\n- upgrade distribute_setup.py to 0.6.27\n\n", "3.0.0": "==================\n\n**Incompatible changes**\n\n\nA number of incompatible changes were made in this release, with the intent of removing features deprecated for a long\ntime or change existing behaviors in order to make them less surprising/more useful.\n\n* Reinterpretation mode has now been removed.  Only plain and rewrite\n  mode are available, consequently the ``--assert=reinterp`` option is\n  no longer available.  This also means files imported from plugins or\n  ``conftest.py`` will not benefit from improved assertions by\n  default, you should use ``pytest.register_assert_rewrite()`` to\n  explicitly turn on assertion rewriting for those files.  Thanks\n  `flub`_ for the PR.\n\n* The following deprecated commandline options were removed:\n\n  * ``--genscript``: no longer supported;\n  * ``--no-assert``: use ``--assert=plain`` instead;\n  * ``--nomagic``: use ``--assert=plain`` instead;\n  * ``--report``: use ``-r`` instead;\n\n  Thanks to `RedBeardCode`_ for the PR (`1664`_).\n\n* ImportErrors in plugins now are a fatal error instead of issuing a\n  pytest warning (`1479`_). Thanks to `The-Compiler`_ for the PR.\n\n* Removed support code for Python 3 versions < 3.3 (`1627`_).\n\n* Removed all ``py.test-X*`` entry points. The versioned, suffixed entry points\n  were never documented and a leftover from a pre-virtualenv era. These entry\n  points also created broken entry points in wheels, so removing them also\n  removes a source of confusion for users (`1632`_).\n  Thanks `obestwalter`_ for the PR.\n\n* ``pytest.skip()`` now raises an error when used to decorate a test function,\n  as opposed to its original intent (to imperatively skip a test inside a test function). Previously\n  this usage would cause the entire module to be skipped (`607`_).\n  Thanks `omarkohl`_ for the complete PR (`1519`_).\n\n* Exit tests if a collection error occurs. A poll indicated most users will hit CTRL-C\n  anyway as soon as they see collection errors, so pytest might as well make that the default behavior (`1421`_).\n  A ``--continue-on-collection-errors`` option has been added to restore the previous behaviour.\n  Thanks `olegpidsadnyi`_ and `omarkohl`_ for the complete PR (`1628`_).\n\n* Renamed the pytest ``pdb`` module (plugin) into ``debugging`` to avoid clashes with the builtin ``pdb`` module.\n\n* Raise a helpful failure message when requesting a parametrized fixture at runtime,\n  e.g. with ``request.getfixturevalue``. Previously these parameters were simply\n  never defined, so a fixture decorated like ``pytest.fixture(params=[0, 1, 2])``\n  only ran once (`460`_).\n  Thanks to `nikratio`_ for the bug report, `RedBeardCode`_ and `tomviner`_ for the PR.\n\n* ``_pytest.monkeypatch.monkeypatch`` class has been renamed to ``_pytest.monkeypatch.MonkeyPatch``\n  so it doesn't conflict with the ``monkeypatch`` fixture.\n\n* ``--exitfirst / -x`` can now be overridden by a following ``--maxfail=N``\n  and is just a synonym for ``--maxfail=1``.\n\n\n**New Features**\n\n* Support nose-style ``__test__`` attribute on methods of classes,\n  including unittest-style Classes. If set to ``False``, the test will not be\n  collected.\n\n* New ``doctest_namespace`` fixture for injecting names into the\n  namespace in which doctests run.\n  Thanks `milliams`_ for the complete PR (`1428`_).\n\n* New ``--doctest-report`` option available to change the output format of diffs\n  when running (failing) doctests (implements `1749`_).\n  Thanks `hartym`_ for the PR.\n\n* New ``name`` argument to ``pytest.fixture`` decorator which allows a custom name\n  for a fixture (to solve the funcarg-shadowing-fixture problem).\n  Thanks `novas0x2a`_ for the complete PR (`1444`_).\n\n* New ``approx()`` function for easily comparing floating-point numbers in\n  tests.\n  Thanks `kalekundert`_ for the complete PR (`1441`_).\n\n* Ability to add global properties in the final xunit output file by accessing\n  the internal ``junitxml`` plugin (experimental).\n  Thanks `tareqalayan`_ for the complete PR `1454`_).\n\n* New ``ExceptionInfo.match()`` method to match a regular expression on the\n  string representation of an exception (`372`_).\n  Thanks `omarkohl`_ for the complete PR (`1502`_).\n\n* ``__tracebackhide__`` can now also be set to a callable which then can decide\n  whether to filter the traceback based on the ``ExceptionInfo`` object passed\n  to it. Thanks `The-Compiler`_ for the complete PR (`1526`_).\n\n* New ``pytest_make_parametrize_id(config, val)`` hook which can be used by plugins to provide\n  friendly strings for custom types.\n  Thanks `palaviv`_ for the PR.\n\n* ``capsys`` and ``capfd`` now have a ``disabled()`` context-manager method, which\n  can be used to temporarily disable capture within a test.\n  Thanks `nicoddemus`_ for the PR.\n\n* New cli flag ``--fixtures-per-test``: shows which fixtures are being used\n  for each selected test item. Features doc strings of fixtures by default.\n  Can also show where fixtures are defined if combined with ``-v``.\n  Thanks `hackebrot`_ for the PR.\n\n* Introduce ``pytest`` command as recommended entry point. Note that ``py.test``\n  still works and is not scheduled for removal. Closes proposal\n  `1629`_. Thanks `obestwalter`_ and `davehunt`_ for the complete PR\n  (`1633`_).\n\n* New cli flags:\n\n  + ``--setup-plan``: performs normal collection and reports\n    the potential setup and teardown and does not execute any fixtures and tests;\n  + ``--setup-only``: performs normal collection, executes setup and teardown of\n    fixtures and reports them;\n  + ``--setup-show``: performs normal test execution and additionally shows\n    setup and teardown of fixtures;\n  + ``--keep-duplicates``: py.test now ignores duplicated paths given in the command\n    line. To retain the previous behavior where the same test could be run multiple\n    times by specifying it in the command-line multiple times, pass the ``--keep-duplicates``\n    argument (`1609`_);\n\n  Thanks `d6e`_, `kvas-it`_, `sallner`_, `ioggstream`_ and `omarkohl`_ for the PRs.\n\n* New CLI flag ``--override-ini``/``-o``: overrides values from the ini file.\n  For example: ``\"-o xfail_strict=True\"``'.\n  Thanks `blueyed`_ and `fengxx`_ for the PR.\n\n* New hooks:\n\n  + ``pytest_fixture_setup(fixturedef, request)``: executes fixture setup;\n  + ``pytest_fixture_post_finalizer(fixturedef)``: called after the fixture's\n    finalizer and has access to the fixture's result cache.\n\n  Thanks `d6e`_, `sallner`_.\n\n* Issue warnings for asserts whose test is a tuple literal. Such asserts will\n  never fail because tuples are always truthy and are usually a mistake\n  (see `1562`_). Thanks `kvas-it`_, for the PR.\n\n* Allow passing a custom debugger class (e.g. ``--pdbcls=IPython.core.debugger:Pdb``).\n  Thanks to `anntzer`_ for the PR.\n\n\n**Changes**\n\n* Plugins now benefit from assertion rewriting.  Thanks\n  `sober7`_, `nicoddemus`_ and `flub`_ for the PR.\n\n* Change ``report.outcome`` for ``xpassed`` tests to ``\"passed\"`` in non-strict\n  mode and ``\"failed\"`` in strict mode. Thanks to `hackebrot`_ for the PR\n  (`1795`_) and `gprasad84`_ for report (`1546`_).\n\n* Tests marked with ``xfail(strict=False)`` (the default) now appear in\n  JUnitXML reports as passing tests instead of skipped.\n  Thanks to `hackebrot`_ for the PR (`1795`_).\n\n* Highlight path of the file location in the error report to make it easier to copy/paste.\n  Thanks `suzaku`_ for the PR (`1778`_).\n\n* Fixtures marked with ``pytest.fixture`` can now use ``yield`` statements exactly like\n  those marked with the ``pytest.yield_fixture`` decorator. This change renders\n  ``pytest.yield_fixture`` deprecated and makes ``pytest.fixture`` with ``yield`` statements\n  the preferred way to write teardown code (`1461`_).\n  Thanks `csaftoiu`_ for bringing this to attention and `nicoddemus`_ for the PR.\n\n* Explicitly passed parametrize ids do not get escaped to ascii (`1351`_).\n  Thanks `ceridwen`_ for the PR.\n\n* Fixtures are now sorted in the error message displayed when an unknown\n  fixture is declared in a test function.\n  Thanks `nicoddemus`_ for the PR.\n\n* ``pytest_terminal_summary`` hook now receives the ``exitstatus``\n  of the test session as argument. Thanks `blueyed`_ for the PR (`1809`_).\n\n* Parametrize ids can accept ``None`` as specific test id, in which case the\n  automatically generated id for that argument will be used.\n  Thanks `palaviv`_ for the complete PR (`1468`_).\n\n* The parameter to xunit-style setup/teardown methods (``setup_method``,\n  ``setup_module``, etc.) is now optional and may be omitted.\n  Thanks `okken`_ for bringing this to attention and `nicoddemus`_ for the PR.\n\n* Improved automatic id generation selection in case of duplicate ids in\n  parametrize.\n  Thanks `palaviv`_ for the complete PR (`1474`_).\n\n* Now pytest warnings summary is shown up by default. Added a new flag\n  ``--disable-pytest-warnings`` to explicitly disable the warnings summary (`1668`_).\n\n* Make ImportError during collection more explicit by reminding\n  the user to check the name of the test module/package(s) (`1426`_).\n  Thanks `omarkohl`_ for the complete PR (`1520`_).\n\n* Add ``build/`` and ``dist/`` to the default ``--norecursedirs`` list. Thanks\n  `mikofski`_ for the report and `tomviner`_ for the PR (`1544`_).\n\n* ``pytest.raises`` in the context manager form accepts a custom\n  ``message`` to raise when no exception occurred.\n  Thanks `palaviv`_ for the complete PR (`1616`_).\n\n* ``conftest.py`` files now benefit from assertion rewriting; previously it\n  was only available for test modules. Thanks `flub`_, `sober7`_ and\n  `nicoddemus`_ for the PR (`1619`_).\n\n* Text documents without any doctests no longer appear as \"skipped\".\n  Thanks `graingert`_ for reporting and providing a full PR (`1580`_).\n\n* Ensure that a module within a namespace package can be found when it\n  is specified on the command line together with the ``--pyargs``\n  option.  Thanks to `taschini`_ for the PR (`1597`_).\n\n* Always include full assertion explanation during assertion rewriting. The previous behaviour was hiding\n  sub-expressions that happened to be ``False``, assuming this was redundant information.\n  Thanks `bagerard`_ for reporting (`1503`_). Thanks to `davehunt`_ and\n  `tomviner`_ for the PR.\n\n* ``OptionGroup.addoption()`` now checks if option names were already\n  added before, to make it easier to track down issues like `1618`_.\n  Before, you only got exceptions later from ``argparse`` library,\n  giving no clue about the actual reason for double-added options.\n\n* ``yield``-based tests are considered deprecated and will be removed in pytest-4.0.\n  Thanks `nicoddemus`_ for the PR.\n\n* ``[pytest]`` sections in ``setup.cfg`` files should now be named ``[tool:pytest]``\n  to avoid conflicts with other distutils commands (see `567`_). ``[pytest]`` sections in\n  ``pytest.ini`` or ``tox.ini`` files are supported and unchanged.\n  Thanks `nicoddemus`_ for the PR.\n\n* Using ``pytest_funcarg__`` prefix to declare fixtures is considered deprecated and will be\n  removed in pytest-4.0 (`1684`_).\n  Thanks `nicoddemus`_ for the PR.\n\n* Passing a command-line string to ``pytest.main()`` is considered deprecated and scheduled\n  for removal in pytest-4.0. It is recommended to pass a list of arguments instead (`1723`_).\n\n* Rename ``getfuncargvalue`` to ``getfixturevalue``. ``getfuncargvalue`` is\n  still present but is now considered deprecated. Thanks to `RedBeardCode`_ and `tomviner`_\n  for the PR (`1626`_).\n\n* ``optparse`` type usage now triggers DeprecationWarnings (`1740`_).\n\n\n* ``optparse`` backward compatibility supports float/complex types (`457`_).\n\n* Refined logic for determining the ``rootdir``, considering only valid\n  paths which fixes a number of issues: `1594`_, `1435`_ and `1471`_.\n  Updated the documentation according to current behavior. Thanks to\n  `blueyed`_, `davehunt`_ and `matthiasha`_ for the PR.\n\n* Always include full assertion explanation. The previous behaviour was hiding\n  sub-expressions that happened to be False, assuming this was redundant information.\n  Thanks `bagerard`_ for reporting (`1503`_). Thanks to `davehunt`_ and\n  `tomviner`_ for PR.\n\n* Better message in case of not using parametrized variable (see `1539`_).\n  Thanks to `tramwaj29`_ for the PR.\n\n* Updated docstrings with a more uniform style.\n\n* Add stderr write for ``pytest.exit(msg)`` during startup. Previously the message was never shown.\n  Thanks `BeyondEvil`_ for reporting `1210`_. Thanks to `JonathonSonesen`_ and\n  `tomviner`_ for the PR.\n\n* No longer display the incorrect test deselection reason (`1372`_).\n  Thanks `ronnypfannschmidt`_ for the PR.\n\n* The ``--resultlog`` command line option has been deprecated: it is little used\n  and there are more modern and better alternatives (see `830`_).\n  Thanks `nicoddemus`_ for the PR.\n\n* Improve error message with fixture lookup errors: add an 'E' to the first\n  line and '>' to the rest. Fixes `717`_. Thanks `blueyed`_ for reporting and\n  a PR, `eolo999`_ for the initial PR and `tomviner`_ for his guidance during\n  EuroPython2016 sprint.\n\n\n**Bug Fixes**\n\n* Parametrize now correctly handles duplicated test ids.\n\n* Fix internal error issue when the ``method`` argument is missing for\n  ``teardown_method()`` (`1605`_).\n\n* Fix exception visualization in case the current working directory (CWD) gets\n  deleted during testing (`1235`_). Thanks `bukzor`_ for reporting. PR by\n  `marscher`_.\n\n* Improve test output for logical expression with brackets (`925`_).\n  Thanks `DRMacIver`_ for reporting and `RedBeardCode`_ for the PR.\n\n* Create correct diff for strings ending with newlines (`1553`_).\n  Thanks `Vogtinator`_ for reporting and `RedBeardCode`_ and\n  `tomviner`_ for the PR.\n\n* ``ConftestImportFailure`` now shows the traceback making it easier to\n  identify bugs in ``conftest.py`` files (`1516`_). Thanks `txomon`_ for\n  the PR.\n\n* Text documents without any doctests no longer appear as \"skipped\".\n  Thanks `graingert`_ for reporting and providing a full PR (`1580`_).\n\n* Fixed collection of classes with custom ``__new__`` method.\n  Fixes `1579`_. Thanks to `Stranger6667`_ for the PR.\n\n* Fixed scope overriding inside metafunc.parametrize (`634`_).\n  Thanks to `Stranger6667`_ for the PR.\n\n* Fixed the total tests tally in junit xml output (`1798`_).\n  Thanks to `cryporchild`_ for the PR.\n\n* Fixed off-by-one error with lines from ``request.node.warn``.\n  Thanks to `blueyed`_ for the PR.\n\n\n.. _1210: https://github.com/pytest-dev/pytest/issues/1210\n.. _1235: https://github.com/pytest-dev/pytest/issues/1235\n.. _1351: https://github.com/pytest-dev/pytest/issues/1351\n.. _1372: https://github.com/pytest-dev/pytest/issues/1372\n.. _1421: https://github.com/pytest-dev/pytest/issues/1421\n.. _1426: https://github.com/pytest-dev/pytest/issues/1426\n.. _1428: https://github.com/pytest-dev/pytest/pull/1428\n.. _1435: https://github.com/pytest-dev/pytest/issues/1435\n.. _1441: https://github.com/pytest-dev/pytest/pull/1441\n.. _1444: https://github.com/pytest-dev/pytest/pull/1444\n.. _1454: https://github.com/pytest-dev/pytest/pull/1454\n.. _1461: https://github.com/pytest-dev/pytest/pull/1461\n.. _1468: https://github.com/pytest-dev/pytest/pull/1468\n.. _1471: https://github.com/pytest-dev/pytest/issues/1471\n.. _1474: https://github.com/pytest-dev/pytest/pull/1474\n.. _1479: https://github.com/pytest-dev/pytest/issues/1479\n.. _1502: https://github.com/pytest-dev/pytest/pull/1502\n.. _1503: https://github.com/pytest-dev/pytest/issues/1503\n.. _1516: https://github.com/pytest-dev/pytest/pull/1516\n.. _1519: https://github.com/pytest-dev/pytest/pull/1519\n.. _1520: https://github.com/pytest-dev/pytest/pull/1520\n.. _1526: https://github.com/pytest-dev/pytest/pull/1526\n.. _1539: https://github.com/pytest-dev/pytest/issues/1539\n.. _1544: https://github.com/pytest-dev/pytest/issues/1544\n.. _1546: https://github.com/pytest-dev/pytest/issues/1546\n.. _1553: https://github.com/pytest-dev/pytest/issues/1553\n.. _1562: https://github.com/pytest-dev/pytest/issues/1562\n.. _1579: https://github.com/pytest-dev/pytest/issues/1579\n.. _1580: https://github.com/pytest-dev/pytest/pull/1580\n.. _1594: https://github.com/pytest-dev/pytest/issues/1594\n.. _1597: https://github.com/pytest-dev/pytest/pull/1597\n.. _1605: https://github.com/pytest-dev/pytest/issues/1605\n.. _1616: https://github.com/pytest-dev/pytest/pull/1616\n.. _1618: https://github.com/pytest-dev/pytest/issues/1618\n.. _1619: https://github.com/pytest-dev/pytest/issues/1619\n.. _1626: https://github.com/pytest-dev/pytest/pull/1626\n.. _1627: https://github.com/pytest-dev/pytest/pull/1627\n.. _1628: https://github.com/pytest-dev/pytest/pull/1628\n.. _1629: https://github.com/pytest-dev/pytest/issues/1629\n.. _1632: https://github.com/pytest-dev/pytest/issues/1632\n.. _1633: https://github.com/pytest-dev/pytest/pull/1633\n.. _1664: https://github.com/pytest-dev/pytest/pull/1664\n.. _1668: https://github.com/pytest-dev/pytest/issues/1668\n.. _1684: https://github.com/pytest-dev/pytest/pull/1684\n.. _1723: https://github.com/pytest-dev/pytest/pull/1723\n.. _1740: https://github.com/pytest-dev/pytest/issues/1740\n.. _1749: https://github.com/pytest-dev/pytest/issues/1749\n.. _1778: https://github.com/pytest-dev/pytest/pull/1778\n.. _1795: https://github.com/pytest-dev/pytest/pull/1795\n.. _1798: https://github.com/pytest-dev/pytest/pull/1798\n.. _1809: https://github.com/pytest-dev/pytest/pull/1809\n.. _372: https://github.com/pytest-dev/pytest/issues/372\n.. _457: https://github.com/pytest-dev/pytest/issues/457\n.. _460: https://github.com/pytest-dev/pytest/pull/460\n.. _567: https://github.com/pytest-dev/pytest/pull/567\n.. _607: https://github.com/pytest-dev/pytest/issues/607\n.. _634: https://github.com/pytest-dev/pytest/issues/634\n.. _717: https://github.com/pytest-dev/pytest/issues/717\n.. _830: https://github.com/pytest-dev/pytest/issues/830\n.. _925: https://github.com/pytest-dev/pytest/issues/925\n\n\n.. _anntzer: https://github.com/anntzer\n.. _bagerard: https://github.com/bagerard\n.. _BeyondEvil: https://github.com/BeyondEvil\n.. _blueyed: https://github.com/blueyed\n.. _ceridwen: https://github.com/ceridwen\n.. _cryporchild: https://github.com/cryporchild\n.. _csaftoiu: https://github.com/csaftoiu\n.. _d6e: https://github.com/d6e\n.. _davehunt: https://github.com/davehunt\n.. _DRMacIver: https://github.com/DRMacIver\n.. _eolo999: https://github.com/eolo999\n.. _fengxx: https://github.com/fengxx\n.. _flub: https://github.com/flub\n.. _gprasad84: https://github.com/gprasad84\n.. _graingert: https://github.com/graingert\n.. _hartym: https://github.com/hartym\n.. _JonathonSonesen: https://github.com/JonathonSonesen\n.. _kalekundert: https://github.com/kalekundert\n.. _kvas-it: https://github.com/kvas-it\n.. _marscher: https://github.com/marscher\n.. _mikofski: https://github.com/mikofski\n.. _milliams: https://github.com/milliams\n.. _nikratio: https://github.com/nikratio\n.. _novas0x2a: https://github.com/novas0x2a\n.. _obestwalter: https://github.com/obestwalter\n.. _okken: https://github.com/okken\n.. _olegpidsadnyi: https://github.com/olegpidsadnyi\n.. _omarkohl: https://github.com/omarkohl\n.. _palaviv: https://github.com/palaviv\n.. _RedBeardCode: https://github.com/RedBeardCode\n.. _sallner: https://github.com/sallner\n.. _sober7: https://github.com/sober7\n.. _Stranger6667: https://github.com/Stranger6667\n.. _suzaku: https://github.com/suzaku\n.. _tareqalayan: https://github.com/tareqalayan\n.. _taschini: https://github.com/taschini\n.. _tramwaj29: https://github.com/tramwaj29\n.. _txomon: https://github.com/txomon\n.. _Vogtinator: https://github.com/Vogtinator\n.. _matthiasha: https://github.com/matthiasha\n\n\n", "0.9.2": "=====\n\n* refined installation and metadata, created new setup.py,\n  now based on setuptools/ez_setup (thanks to Ralf Schmitt\n  for his support).\n\n* improved the way of making py.* scripts available in\n  windows environments, they are now added to the\n  Scripts directory as \".cmd\" files.\n\n* py.path.svnwc.status() now is more complete and\n  uses xml output from the 'svn' command if available\n  (Guido Wesdorp)\n\n* fix for py.path.svn* to work with svn 1.5\n  (Chris Lamb)\n\n* fix path.relto(otherpath) method on windows to\n  use normcase for checking if a path is relative.\n\n* py.test's traceback is better parseable from editors\n  (follows the filenames:LINENO: MSG convention)\n  (thanks to Osmo Salomaa)\n\n* fix to javascript-generation, \"py.test --runbrowser\"\n  should work more reliably now\n\n* removed previously accidentally added\n  py.test.broken and py.test.notimplemented helpers.\n\n* there now is a py.__version__ attribute\n\n", "3.0.6": "==================\n\n* pytest no longer generates ``PendingDeprecationWarning`` from its own operations, which was introduced by mistake in version ``3.0.5`` (`2118`_).\n  Thanks to `nicoddemus`_ for the report and `RonnyPfannschmidt`_ for the PR.\n\n\n* pytest no longer recognizes coroutine functions as yield tests (`2129`_).\n  Thanks to `malinoff`_ for the PR.\n\n* Plugins loaded by the ``PYTEST_PLUGINS`` environment variable are now automatically\n  considered for assertion rewriting (`2185`_).\n  Thanks `nicoddemus`_ for the PR.\n\n* Improve error message when pytest.warns fails (`2150`_). The type(s) of the\n  expected warnings and the list of caught warnings is added to the\n  error message. Thanks `lesteve`_ for the PR.\n\n* Fix ``pytester`` internal plugin to work correctly with latest versions of\n  ``zope.interface`` (`1989`_). Thanks `nicoddemus`_ for the PR.\n\n* Assert statements of the ``pytester`` plugin again benefit from assertion rewriting (`1920`_).\n  Thanks `RonnyPfannschmidt`_ for the report and `nicoddemus`_ for the PR.\n\n* Specifying tests with colons like ``test_foo.py::test_bar`` for tests in\n  subdirectories with ini configuration files now uses the correct ini file\n  (`2148`_).  Thanks `pelme`_.\n\n* Fail ``testdir.runpytest().assert_outcomes()`` explicitly if the pytest\n  terminal output it relies on is missing. Thanks to `eli-b`_ for the PR.\n\n\n.. _barneygale: https://github.com/barneygale\n.. _lesteve: https://github.com/lesteve\n.. _malinoff: https://github.com/malinoff\n.. _pelme: https://github.com/pelme\n.. _eli-b: https://github.com/eli-b\n\n.. _2118: https://github.com/pytest-dev/pytest/issues/2118\n\n.. _1989: https://github.com/pytest-dev/pytest/issues/1989\n.. _1920: https://github.com/pytest-dev/pytest/issues/1920\n.. _2129: https://github.com/pytest-dev/pytest/issues/2129\n.. _2148: https://github.com/pytest-dev/pytest/issues/2148\n.. _2150: https://github.com/pytest-dev/pytest/issues/2150\n.. _2185: https://github.com/pytest-dev/pytest/issues/2185\n\n\n", "2.4": "===\n\nknown incompatibilities:\n\n- if calling --genscript from python2.7 or above, you only get a\n  standalone script which works on python2.7 or above.  Use Python2.6\n  to also get a python2.5 compatible version.\n\n- all xunit-style teardown methods (nose-style, pytest-style,\n  unittest-style) will not be called if the corresponding setup method failed,\n  see issue322 below.\n\n- the pytest_plugin_unregister hook wasn't ever properly called\n  and there is no known implementation of the hook - so it got removed.\n\n- pytest.fixture-decorated functions cannot be generators (i.e. use\n  yield) anymore.  This change might be reversed in 2.4.1 if it causes\n  unforeseen real-life issues.  However, you can always write and return\n  an inner function/generator and change the fixture consumer to iterate\n  over the returned generator.  This change was done in lieu of the new\n  ``pytest.yield_fixture`` decorator, see below.\n\nnew features:\n\n- experimentally introduce a new ``pytest.yield_fixture`` decorator\n  which accepts exactly the same parameters as pytest.fixture but\n  mandates a ``yield`` statement instead of a ``return statement`` from\n  fixture functions.  This allows direct integration with \"with-style\"\n  context managers in fixture functions and generally avoids registering\n  of finalization callbacks in favour of treating the \"after-yield\" as\n  teardown code.  Thanks Andreas Pelme, Vladimir Keleshev, Floris\n  Bruynooghe, Ronny Pfannschmidt and many others for discussions.\n\n- allow boolean expression directly with skipif/xfail\n  if a \"reason\" is also specified.  Rework skipping documentation\n  to recommend \"condition as booleans\" because it prevents surprises\n  when importing markers between modules.  Specifying conditions\n  as strings will remain fully supported.\n\n- reporting: color the last line red or green depending if\n  failures/errors occurred or everything passed.  thanks Christian\n  Theunert.\n\n- make \"import pdb ; pdb.set_trace()\" work natively wrt capturing (no\n  \"-s\" needed anymore), making ``pytest.set_trace()`` a mere shortcut.\n\n- fix issue181: --pdb now also works on collect errors (and\n  on internal errors) .  This was implemented by a slight internal\n  refactoring and the introduction of a new hook\n  ``pytest_exception_interact`` hook (see next item).\n\n- fix issue341: introduce new experimental hook for IDEs/terminals to\n  intercept debugging: ``pytest_exception_interact(node, call, report)``.\n\n- new monkeypatch.setattr() variant to provide a shorter\n  invocation for patching out classes/functions from modules:\n\n     monkeypatch.setattr(\"requests.get\", myfunc)\n\n  will replace the \"get\" function of the \"requests\" module with ``myfunc``.\n\n- fix issue322: tearDownClass is not run if setUpClass failed. Thanks\n  Mathieu Agopian for the initial fix.  Also make all of pytest/nose\n  finalizer mimic the same generic behaviour: if a setupX exists and\n  fails, don't run teardownX.  This internally introduces a new method\n  \"node.addfinalizer()\" helper which can only be called during the setup\n  phase of a node.\n\n- simplify pytest.mark.parametrize() signature: allow to pass a\n  CSV-separated string to specify argnames.  For example:\n  ``pytest.mark.parametrize(\"input,expected\",  [(1,2), (2,3)])``\n  works as well as the previous:\n  ``pytest.mark.parametrize((\"input\", \"expected\"), ...)``.\n\n- add support for setUpModule/tearDownModule detection, thanks Brian Okken.\n\n- integrate tab-completion on options through use of \"argcomplete\".\n  Thanks Anthon van der Neut for the PR.\n\n- change option names to be hyphen-separated long options but keep the\n  old spelling backward compatible.  py.test -h will only show the\n  hyphenated version, for example \"--collect-only\" but \"--collectonly\"\n  will remain valid as well (for backward-compat reasons).  Many thanks to\n  Anthon van der Neut for the implementation and to Hynek Schlawack for\n  pushing us.\n\n- fix issue 308 - allow to mark/xfail/skip individual parameter sets\n  when parametrizing.  Thanks Brianna Laugher.\n\n- call new experimental pytest_load_initial_conftests hook to allow\n  3rd party plugins to do something before a conftest is loaded.\n\nBug fixes:\n\n- fix issue358 - capturing options are now parsed more properly\n  by using a new parser.parse_known_args method.\n\n- pytest now uses argparse instead of optparse (thanks Anthon) which\n  means that \"argparse\" is added as a dependency if installing into python2.6\n  environments or below.\n\n- fix issue333: fix a case of bad unittest/pytest hook interaction.\n\n- PR27: correctly handle nose.SkipTest during collection.  Thanks\n  Antonio Cuni, Ronny Pfannschmidt.\n\n- fix issue355: junitxml puts name=\"pytest\" attribute to testsuite tag.\n\n- fix issue336: autouse fixture in plugins should work again.\n\n- fix issue279: improve object comparisons on assertion failure\n  for standard datatypes and recognise collections.abc.  Thanks to\n  Brianna Laugher and Mathieu Agopian.\n\n- fix issue317: assertion rewriter support for the is_package method\n\n- fix issue335: document py.code.ExceptionInfo() object returned\n  from pytest.raises(), thanks Mathieu Agopian.\n\n- remove implicit distribute_setup support from setup.py.\n\n- fix issue305: ignore any problems when writing pyc files.\n\n- SO-17664702: call fixture finalizers even if the fixture function\n  partially failed (finalizers would not always be called before)\n\n- fix issue320 - fix class scope for fixtures when mixed with\n  module-level functions.  Thanks Anatloy Bubenkoff.\n\n- you can specify \"-q\" or \"-qq\" to get different levels of \"quieter\"\n  reporting (thanks Katarzyna Jachim)\n\n- fix issue300 - Fix order of conftest loading when starting py.test\n  in a subdirectory.\n\n- fix issue323 - sorting of many module-scoped arg parametrizations\n\n- make sessionfinish hooks execute with the same cwd-context as at\n  session start (helps fix plugin behaviour which write output files\n  with relative path such as pytest-cov)\n\n- fix issue316 - properly reference collection hooks in docs\n\n- fix issue 306 - cleanup of -k/-m options to only match markers/test\n  names/keywords respectively.  Thanks Wouter van Ackooy.\n\n- improved doctest counting for doctests in python modules --\n  files without any doctest items will not show up anymore\n  and doctest examples are counted as separate test items.\n  thanks Danilo Bellini.\n\n- fix issue245 by depending on the released py-1.4.14\n  which fixes py.io.dupfile to work with files with no\n  mode. Thanks Jason R. Coombs.\n\n- fix junitxml generation when test output contains control characters,\n  addressing issue267, thanks Jaap Broekhuizen\n\n- fix issue338: honor --tb style for setup/teardown errors as well.  Thanks Maho.\n\n- fix issue307 - use yaml.safe_load in example, thanks Mark Eichin.\n\n- better parametrize error messages, thanks Brianna Laugher\n\n- pytest_terminal_summary(terminalreporter) hooks can now use\n  \".section(title)\" and \".line(msg)\" methods to print extra\n  information at the end of a test run.\n\n", "3.2.2": "=========================\n\nBug Fixes\n---------\n\n- Calling the deprecated `request.getfuncargvalue()` now shows the source of\n  the call. (`2681 <https://github.com/pytest-dev/pytest/issues/2681>`_)\n\n- Allow tests declared as ``staticmethod`` to use fixtures. (`2699\n  <https://github.com/pytest-dev/pytest/issues/2699>`_)\n\n- Fixed edge-case during collection: attributes which raised ``pytest.fail``\n  when accessed would abort the entire collection. (`2707\n  <https://github.com/pytest-dev/pytest/issues/2707>`_)\n\n- Fix ``ReprFuncArgs`` with mixed unicode and UTF-8 args. (`2731\n  <https://github.com/pytest-dev/pytest/issues/2731>`_)\n\n\nImproved Documentation\n----------------------\n\n- In examples on working with custom markers, add examples demonstrating the\n  usage of ``pytest.mark.MARKER_NAME.with_args`` in comparison with\n  ``pytest.mark.MARKER_NAME.__call__`` (`2604\n  <https://github.com/pytest-dev/pytest/issues/2604>`_)\n\n- In one of the simple examples, use `pytest_collection_modifyitems()` to skip\n  tests based on a command-line option, allowing its sharing while preventing a\n  user error when acessing `pytest.config` before the argument parsing. (`2653\n  <https://github.com/pytest-dev/pytest/issues/2653>`_)\n\n\nTrivial/Internal Changes\n------------------------\n\n- Fixed minor error in 'Good Practices/Manual Integration' code snippet.\n  (`2691 <https://github.com/pytest-dev/pytest/issues/2691>`_)\n\n- Fixed typo in goodpractices.rst. (`2721\n  <https://github.com/pytest-dev/pytest/issues/2721>`_)\n\n- Improve user guidance regarding ``--resultlog`` deprecation. (`2739\n  <https://github.com/pytest-dev/pytest/issues/2739>`_)\n\n\n", "2.1.2": "==================\n\n- fix assertion rewriting on files with windows newlines on some Python versions\n- refine test discovery by package/module name (--pyargs), thanks Florian Mayer\n- fix issue69 / assertion rewriting fixed on some boolean operations\n- fix issue68 / packages now work with assertion rewriting\n- fix issue66: use different assertion rewriting caches when the -O option is passed\n- don't try assertion rewriting on Jython, use reinterp\n\n", "2.2.2": "==================\n\n- fix issue101: wrong args to unittest.TestCase test function now\n  produce better output\n- fix issue102: report more useful errors and hints for when a\n  test directory was renamed and some pyc/__pycache__ remain\n- fix issue106: allow parametrize to be applied multiple times\n  e.g. from module, class and at function level.\n- fix issue107: actually perform session scope finalization\n- don't check in parametrize if indirect parameters are funcarg names\n- add chdir method to monkeypatch funcarg\n- fix crash resulting from calling monkeypatch undo a second time\n- fix issue115: make --collectonly robust against early failure\n  (missing files/directories)\n- \"-qq --collectonly\" now shows only files and the number of tests in them\n- \"-q --collectonly\" now shows test ids\n- allow adding of attributes to test reports such that it also works\n  with distributed testing (no upgrade of pytest-xdist needed)\n\n", "2.6.2": "==================\n\n- Added function pytest.freeze_includes(), which makes it easy to embed\n  pytest into executables using tools like cx_freeze.\n  See docs for examples and rationale. Thanks Bruno Oliveira.\n\n- Improve assertion rewriting cache invalidation precision.\n\n- fixed issue561: adapt autouse fixture example for python3.\n\n- fixed issue453: assertion rewriting issue with __repr__ containing\n  \"\\n{\", \"\\n}\" and \"\\n~\".\n\n- fix issue560: correctly display code if an \"else:\" or \"finally:\" is\n  followed by statements on the same line.\n\n- Fix example in monkeypatch documentation, thanks t-8ch.\n\n- fix issue572: correct tmpdir doc example for python3.\n\n- Do not mark as universal wheel because Python 2.6 is different from\n  other builds due to the extra argparse dependency.  Fixes issue566.\n  Thanks sontek.\n\n- Implement issue549: user-provided assertion messages now no longer\n  replace the py.test introspection message but are shown in addition\n  to them.\n\n", "1.0.0b9": "====================\n\n* cleanly handle and report final teardown of test setup\n\n* fix svn-1.6 compat issue with py.path.svnwc().versioned()\n  (thanks Wouter Vanden Hove)\n\n* setup/teardown or collection problems now show as ERRORs\n  or with big \"E\"'s in the progress lines.  they are reported\n  and counted separately.\n\n* dist-testing: properly handle test items that get locally\n  collected but cannot be collected on the remote side - often\n  due to platform/dependency reasons\n\n* simplified py.test.mark API - see keyword plugin documentation\n\n* integrate better with logging: capturing now by default captures\n  test functions and their immediate setup/teardown in a single stream\n\n* capsys and capfd funcargs now have a readouterr() and a close() method\n  (underlyingly py.io.StdCapture/FD objects are used which grew a\n  readouterr() method as well to return snapshots of captured out/err)\n\n* make assert-reinterpretation work better with comparisons not\n  returning bools (reported with numpy from thanks maciej fijalkowski)\n\n* reworked per-test output capturing into the pytest_iocapture.py plugin\n  and thus removed capturing code from config object\n\n* item.repr_failure(excinfo) instead of item.repr_failure(excinfo, outerr)\n\n\n", "3.1.3": "=========================\n\nBug Fixes\n---------\n\n- Fix decode error in Python 2 for doctests in docstrings. (`2434\n  <https://github.com/pytest-dev/pytest/issues/2434>`_)\n\n- Exceptions raised during teardown by finalizers are now suppressed until all\n  finalizers are called, with the initial exception reraised. (`2440\n  <https://github.com/pytest-dev/pytest/issues/2440>`_)\n\n- Fix incorrect \"collected items\" report when specifying tests on the command-\n  line. (`2464 <https://github.com/pytest-dev/pytest/issues/2464>`_)\n\n- ``deprecated_call`` in context-manager form now captures deprecation warnings\n  even if the same warning has already been raised. Also, ``deprecated_call``\n  will always produce the same error message (previously it would produce\n  different messages in context-manager vs. function-call mode). (`2469\n  <https://github.com/pytest-dev/pytest/issues/2469>`_)\n\n- Fix issue where paths collected by pytest could have triple leading ``/``\n  characters. (`2475 <https://github.com/pytest-dev/pytest/issues/2475>`_)\n\n- Fix internal error when trying to detect the start of a recursive traceback.\n  (`2486 <https://github.com/pytest-dev/pytest/issues/2486>`_)\n\n\nImproved Documentation\n----------------------\n\n- Explicitly state for which hooks the calls stop after the first non-None\n  result. (`2493 <https://github.com/pytest-dev/pytest/issues/2493>`_)\n\n\nTrivial/Internal Changes\n------------------------\n\n- Create invoke tasks for updating the vendored packages. (`2474\n  <https://github.com/pytest-dev/pytest/issues/2474>`_)\n\n- Update copyright dates in LICENSE, README.rst and in the documentation.\n  (`2499 <https://github.com/pytest-dev/pytest/issues/2499>`_)\n\n\n", "2.2.3": "==================\n\n- fix uploaded package to only include necessary files\n\n", "2.8.4": "==================\n\n- fix 1190: ``deprecated_call()`` now works when the deprecated\n  function has been already called by another test in the same\n  module. Thanks Mikhail Chernykh for the report and Bruno Oliveira for the\n  PR.\n\n- fix 1198: ``--pastebin`` option now works on Python 3. Thanks\n  Mehdy Khoshnoody for the PR.\n\n- fix 1219: ``--pastebin`` now works correctly when captured output contains\n  non-ascii characters. Thanks Bruno Oliveira for the PR.\n\n- fix 1204: another error when collecting with a nasty __getattr__().\n  Thanks Florian Bruhin for the PR.\n\n- fix the summary printed when no tests did run.\n  Thanks Florian Bruhin for the PR.\n- fix 1185 - ensure MANIFEST.in exactly matches what should go to a sdist\n\n- a number of documentation modernizations wrt good practices.\n  Thanks Bruno Oliveira for the PR.\n\n", "2.0.1": "==================\n\n- refine and unify initial capturing so that it works nicely\n  even if the logging module is used on an early-loaded conftest.py\n  file or plugin.\n- allow to omit \"()\" in test ids to allow for uniform test ids\n  as produced by Alfredo's nice pytest.vim plugin.\n- fix issue12 - show plugin versions with \"--version\" and\n  \"--traceconfig\" and also document how to add extra information\n  to reporting test header\n- fix issue17 (import-* reporting issue on python3) by\n  requiring py>1.4.0 (1.4.1 is going to include it)\n- fix issue10 (numpy arrays truth checking) by refining\n  assertion interpretation in py lib\n- fix issue15: make nose compatibility tests compatible\n  with python3 (now that nose-1.0 supports python3)\n- remove somewhat surprising \"same-conftest\" detection because\n  it ignores conftest.py when they appear in several subdirs.\n- improve assertions (\"not in\"), thanks Floris Bruynooghe\n- improve behaviour/warnings when running on top of \"python -OO\"\n  (assertions and docstrings are turned off, leading to potential\n  false positives)\n- introduce a pytest_cmdline_processargs(args) hook\n  to allow dynamic computation of command line arguments.\n  This fixes a regression because py.test prior to 2.0\n  allowed to set command line options from conftest.py\n  files which so far pytest-2.0 only allowed from ini-files now.\n- fix issue7: assert failures in doctest modules.\n  unexpected failures in doctests will not generally\n  show nicer, i.e. within the doctest failing context.\n- fix issue9: setup/teardown functions for an xfail-marked\n  test will report as xfail if they fail but report as normally\n  passing (not xpassing) if they succeed.  This only is true\n  for \"direct\" setup/teardown invocations because teardown_class/\n  teardown_module cannot closely relate to a single test.\n- fix issue14: no logging errors at process exit\n- refinements to \"collecting\" output on non-ttys\n- refine internal plugin registration and --traceconfig output\n- introduce a mechanism to prevent/unregister plugins from the\n  command line, see http://pytest.org/plugins.htmlcmdunregister\n- activate resultlog plugin by default\n- fix regression wrt yielded tests which due to the\n  collection-before-running semantics were not\n  setup as with pytest 1.3.4.  Note, however, that\n  the recommended and much cleaner way to do test\n  parametraization remains the \"pytest_generate_tests\"\n  mechanism, see the docs.\n\n", "1.3.4": "==================\n\n- fix issue111: improve install documentation for windows\n- fix issue119: fix custom collectability of __init__.py as a module\n- fix issue116: --doctestmodules work with __init__.py files as well\n- fix issue115: unify internal exception passthrough/catching/GeneratorExit\n- fix issue118: new --tb=native for presenting cpython-standard exceptions\n\n", "1.0.3": "=====\n\n* adjust and improve docs\n\n* remove py.rest tool and internal namespace - it was\n  never really advertised and can still be used with\n  the old release if needed.  If there is interest\n  it could be revived into its own tool i guess.\n\n* fix issue48 and issue59: raise an Error if the module\n  from an imported test file does not seem to come from\n  the filepath - avoids \"same-name\" confusion that has\n  been reported repeatedly\n\n* merged Ronny's nose-compatibility hacks: now\n  nose-style setup_module() and setup() functions are\n  supported\n\n* introduce generalized py.test.mark function marking\n\n* reshuffle / refine command line grouping\n\n* deprecate parser.addgroup in favour of getgroup which creates option group\n\n* add --report command line option that allows to control showing of skipped/xfailed sections\n\n* generalized skipping: a new way to mark python functions with skipif or xfail\n  at function, class and modules level based on platform or sys-module attributes.\n\n* extend py.test.mark decorator to allow for positional args\n\n* introduce and test \"py.cleanup -d\" to remove empty directories\n\n* fix issue 59 - robustify unittest test collection\n\n* make bpython/help interaction work by adding an __all__ attribute\n  to ApiModule, cleanup initpkg\n\n* use MIT license for pylib, add some contributors\n\n* remove py.execnet code and substitute all usages with 'execnet' proper\n\n* fix issue50 - cached_setup now caches more to expectations\n  for test functions with multiple arguments.\n\n* merge Jarko's fixes, issue 45 and 46\n\n* add the ability to specify a path for py.lookup to search in\n\n* fix a funcarg cached_setup bug probably only occurring\n  in distributed testing and \"module\" scope with teardown.\n\n* many fixes and changes for making the code base python3 compatible,\n  many thanks to Benjamin Peterson for helping with this.\n\n* consolidate builtins implementation to be compatible with >=2.3,\n  add helpers to ease keeping 2 and 3k compatible code\n\n* deprecate py.compat.doctest|subprocess|textwrap|optparse\n\n* deprecate py.magic.autopath, remove py/magic directory\n\n* move pytest assertion handling to py/code and a pytest_assertion\n  plugin, add \"--no-assert\" option, deprecate py.magic namespaces\n  in favour of (less) py.code ones.\n\n* consolidate and cleanup py/code classes and files\n\n* cleanup py/misc, move tests to bin-for-dist\n\n* introduce delattr/delitem/delenv methods to py.test's monkeypatch funcarg\n\n* consolidate py.log implementation, remove old approach.\n\n* introduce py.io.TextIO and py.io.BytesIO for distinguishing between\n  text/unicode and byte-streams (uses underlying standard lib io.*\n  if available)\n\n* make py.unittest_convert helper script available which converts \"unittest.py\"\n  style files into the simpler assert/direct-test-classes py.test/nosetests\n  style.  The script was written by Laura Creighton.\n\n* simplified internal localpath implementation\n\n", "1.1.1": "==================\n\n- moved dist/looponfailing from py.test core into a new\n  separately released pytest-xdist plugin.\n\n- new junitxml plugin: --junitxml=path will generate a junit style xml file\n  which is processable e.g. by the Hudson CI system.\n\n- new option: --genscript=path will generate a standalone py.test script\n  which will not need any libraries installed.  thanks to Ralf Schmitt.\n\n- new option: --ignore will prevent specified path from collection.\n  Can be specified multiple times.\n\n- new option: --confcutdir=dir will make py.test only consider conftest\n  files that are relative to the specified dir.\n\n- new funcarg: \"pytestconfig\" is the pytest config object for access\n  to command line args and can now be easily used in a test.\n\n- install ``py.test`` and ``py.which`` with a ``-$VERSION`` suffix to\n  disambiguate between Python3, python2.X, Jython and PyPy installed versions.\n\n- new \"pytestconfig\" funcarg allows access to test config object\n\n- new \"pytest_report_header\" hook can return additional lines\n  to be displayed at the header of a test run.\n\n- (experimental) allow \"py.test path::name1::name2::...\" for pointing\n  to a test within a test collection directly.  This might eventually\n  evolve as a full substitute to \"-k\" specifications.\n\n- streamlined plugin loading: order is now as documented in\n  customize.html: setuptools, ENV, commandline, conftest.\n  also setuptools entry point names are turned to canonical namees (\"pytest_*\")\n\n- automatically skip tests that need 'capfd' but have no os.dup\n\n- allow pytest_generate_tests to be defined in classes as well\n\n- deprecate usage of 'disabled' attribute in favour of pytestmark\n- deprecate definition of Directory, Module, Class and Function nodes\n  in conftest.py files.  Use pytest collect hooks instead.\n\n- collection/item node specific runtest/collect hooks are only called exactly\n  on matching conftest.py files, i.e. ones which are exactly below\n  the filesystem path of an item\n\n- change: the first pytest_collect_directory hook to return something\n  will now prevent further hooks to be called.\n\n- change: figleaf plugin now requires --figleaf to run.  Also\n  change its long command line options to be a bit shorter (see py.test -h).\n\n- change: pytest doctest plugin is now enabled by default and has a\n  new option --doctest-glob to set a pattern for file matches.\n\n- change: remove internal py._* helper vars, only keep py._pydir\n\n- robustify capturing to survive if custom pytest_runtest_setup\n  code failed and prevented the capturing setup code from running.\n\n- make py.test.* helpers provided by default plugins visible early -\n  works transparently both for pydoc and for interactive sessions\n  which will regularly see e.g. py.test.mark and py.test.importorskip.\n\n- simplify internal plugin manager machinery\n- simplify internal collection tree by introducing a RootCollector node\n\n- fix assert reinterpreation that sees a call containing \"keyword=...\"\n\n- fix issue66: invoke pytest_sessionstart and pytest_sessionfinish\n  hooks on slaves during dist-testing, report module/session teardown\n  hooks correctly.\n\n- fix issue65: properly handle dist-testing if no\n  execnet/py lib installed remotely.\n\n- skip some install-tests if no execnet is available\n\n- fix docs, fix internal bin/ script generation\n\n\n", "2.4.1": "==================\n\n- When using parser.addoption() unicode arguments to the\n  \"type\" keyword should also be converted to the respective types.\n  thanks Floris Bruynooghe, dnozay. (fixes issue360 and issue362)\n\n- fix dotted filename completion when using argcomplete\n  thanks Anthon van der Neuth. (fixes issue361)\n\n- fix regression when a 1-tuple (\"arg\",) is used for specifying\n  parametrization (the values of the parametrization were passed\n  nested in a tuple).  Thanks Donald Stufft.\n\n- merge doc typo fixes, thanks Andy Dirnberger\n\n", "2.5.2": "==================\n\n- fix issue409 -- better interoperate with cx_freeze by not\n  trying to import from collections.abc which causes problems\n  for py27/cx_freeze.  Thanks Wolfgang L. for reporting and tracking it down.\n\n- fixed docs and code to use \"pytest\" instead of \"py.test\" almost everywhere.\n  Thanks Jurko Gospodnetic for the complete PR.\n\n- fix issue425: mention at end of \"py.test -h\" that --markers\n  and --fixtures work according to specified test path (or current dir)\n\n- fix issue413: exceptions with unicode attributes are now printed\n  correctly also on python2 and with pytest-xdist runs. (the fix\n  requires py-1.4.20)\n\n- copy, cleanup and integrate py.io capture\n  from pylib 1.4.20.dev2 (rev 13d9af95547e)\n\n- address issue416: clarify docs as to conftest.py loading semantics\n\n- fix issue429: comparing byte strings with non-ascii chars in assert\n  expressions now work better.  Thanks Floris Bruynooghe.\n\n- make capfd/capsys.capture private, its unused and shouldn't be exposed\n\n\n", "3.0.7": "==================\n\n\n* Fix issue in assertion rewriting breaking due to modules silently discarding\n  other modules when importing fails\n  Notably, importing the ``anydbm`` module is fixed. (`2248`_).\n  Thanks `pfhayes`_ for the PR.\n\n* junitxml: Fix problematic case where system-out tag occured twice per testcase\n  element in the XML report. Thanks `kkoukiou`_ for the PR.\n\n* Fix regression, pytest now skips unittest correctly if run with ``--pdb``\n  (`2137`_). Thanks to `gst`_ for the report and `mbyt`_ for the PR.\n\n* Ignore exceptions raised from descriptors (e.g. properties) during Python test collection (`2234`_).\n  Thanks to `bluetech`_.\n\n* ``--override-ini`` now correctly overrides some fundamental options like ``python_files`` (`2238`_).\n  Thanks `sirex`_ for the report and `nicoddemus`_ for the PR.\n\n* Replace ``raise StopIteration`` usages in the code by simple ``returns`` to finish generators, in accordance to `PEP-479`_ (`2160`_).\n  Thanks `tgoodlet`_ for the report and `nicoddemus`_ for the PR.\n\n* Fix internal errors when an unprintable ``AssertionError`` is raised inside a test.\n  Thanks `omerhadari`_ for the PR.\n\n* Skipping plugin now also works with test items generated by custom collectors (`2231`_).\n  Thanks to `vidartf`_.\n\n* Fix trailing whitespace in console output if no .ini file presented (`2281`_). Thanks `fbjorn`_ for the PR.\n\n* Conditionless ``xfail`` markers no longer rely on the underlying test item\n  being an instance of ``PyobjMixin``, and can therefore apply to tests not\n  collected by the built-in python test collector. Thanks `barneygale`_ for the\n  PR.\n\n\n.. _pfhayes: https://github.com/pfhayes\n.. _bluetech: https://github.com/bluetech\n.. _gst: https://github.com/gst\n.. _sirex: https://github.com/sirex\n.. _vidartf: https://github.com/vidartf\n.. _kkoukiou: https://github.com/KKoukiou\n.. _omerhadari: https://github.com/omerhadari\n.. _fbjorn: https://github.com/fbjorn\n\n.. _2248: https://github.com/pytest-dev/pytest/issues/2248\n.. _2137: https://github.com/pytest-dev/pytest/issues/2137\n.. _2160: https://github.com/pytest-dev/pytest/issues/2160\n.. _2231: https://github.com/pytest-dev/pytest/issues/2231\n.. _2234: https://github.com/pytest-dev/pytest/issues/2234\n.. _2238: https://github.com/pytest-dev/pytest/issues/2238\n.. _2281: https://github.com/pytest-dev/pytest/issues/2281\n\n.. _PEP-479: https://www.python.org/dev/peps/pep-0479/\n\n\n", "1.3.0": "==================\n\n- deprecate --report option in favour of a new shorter and easier to\n  remember -r option: it takes a string argument consisting of any\n  combination of 'xfsX' characters.  They relate to the single chars\n  you see during the dotted progress printing and will print an extra line\n  per test at the end of the test run.  This extra line indicates the exact\n  position or test ID that you directly paste to the py.test cmdline in order\n  to re-run a particular test.\n\n- allow external plugins to register new hooks via the new\n  pytest_addhooks(pluginmanager) hook.  The new release of\n  the pytest-xdist plugin for distributed and looponfailing\n  testing requires this feature.\n\n- add a new pytest_ignore_collect(path, config) hook to allow projects and\n  plugins to define exclusion behaviour for their directory structure -\n  for example you may define in a conftest.py this method::\n\n        def pytest_ignore_collect(path):\n            return path.check(link=1)\n\n  to prevent even a collection try of any tests in symlinked dirs.\n\n- new pytest_pycollect_makemodule(path, parent) hook for\n  allowing customization of the Module collection object for a\n  matching test module.\n\n- extend and refine xfail mechanism:\n  ``py.test.mark.xfail(run=False)`` do not run the decorated test\n  ``py.test.mark.xfail(reason=\"...\")`` prints the reason string in xfail summaries\n  specifying ``--runxfail`` on command line virtually ignores xfail markers\n\n- expose (previously internal) commonly useful methods:\n  py.io.get_terminal_with() -> return terminal width\n  py.io.ansi_print(...) -> print colored/bold text on linux/win32\n  py.io.saferepr(obj) -> return limited representation string\n\n- expose test outcome related exceptions as py.test.skip.Exception,\n  py.test.raises.Exception etc., useful mostly for plugins\n  doing special outcome interpretation/tweaking\n\n- (issue85) fix junitxml plugin to handle tests with non-ascii output\n\n- fix/refine python3 compatibility (thanks Benjamin Peterson)\n\n- fixes for making the jython/win32 combination work, note however:\n  jython2.5.1/win32 does not provide a command line launcher, see\n  http://bugs.jython.org/issue1491 . See pylib install documentation\n  for how to work around.\n\n- fixes for handling of unicode exception values and unprintable objects\n\n- (issue87) fix unboundlocal error in assertionold code\n\n- (issue86) improve documentation for looponfailing\n\n- refine IO capturing: stdin-redirect pseudo-file now has a NOP close() method\n\n- ship distribute_setup.py version 0.6.10\n\n- added links to the new capturelog and coverage plugins\n\n\n", "3.0.4": "==================\n\n* Import errors when collecting test modules now display the full traceback (`1976`_).\n  Thanks `cwitty`_ for the report and `nicoddemus`_ for the PR.\n\n* Fix confusing command-line help message for custom options with two or more ``metavar`` properties (`2004`_).\n  Thanks `okulynyak`_ and `davehunt`_ for the report and `nicoddemus`_ for the PR.\n\n* When loading plugins, import errors which contain non-ascii messages are now properly handled in Python 2 (`1998`_).\n  Thanks `nicoddemus`_ for the PR.\n\n* Fixed cyclic reference when ``pytest.raises`` is used in context-manager form (`1965`_). Also as a\n  result of this fix, ``sys.exc_info()`` is left empty in both context-manager and function call usages.\n  Previously, ``sys.exc_info`` would contain the exception caught by the context manager,\n  even when the expected exception occurred.\n  Thanks `MSeifert04`_ for the report and the PR.\n\n* Fixed false-positives warnings from assertion rewrite hook for modules that were rewritten but\n  were later marked explicitly by ``pytest.register_assert_rewrite``\n  or implicitly as a plugin (`2005`_).\n  Thanks `RonnyPfannschmidt`_ for the report and `nicoddemus`_ for the PR.\n\n* Report teardown output on test failure (`442`_).\n  Thanks `matclab`_ for the PR.\n\n* Fix teardown error message in generated xUnit XML.\n  Thanks `gdyuldin`_ for the PR.\n\n* Properly handle exceptions in ``multiprocessing`` tasks (`1984`_).\n  Thanks `adborden`_ for the report and `nicoddemus`_ for the PR.\n\n* Clean up unittest TestCase objects after tests are complete (`1649`_).\n  Thanks `d_b_w`_ for the report and PR.\n\n\n.. _adborden: https://github.com/adborden\n.. _cwitty: https://github.com/cwitty\n.. _d_b_w: https://github.com/d_b_w\n.. _gdyuldin: https://github.com/gdyuldin\n.. _matclab: https://github.com/matclab\n.. _MSeifert04: https://github.com/MSeifert04\n.. _okulynyak: https://github.com/okulynyak\n\n.. _442: https://github.com/pytest-dev/pytest/issues/442\n.. _1965: https://github.com/pytest-dev/pytest/issues/1965\n.. _1976: https://github.com/pytest-dev/pytest/issues/1976\n.. _1984: https://github.com/pytest-dev/pytest/issues/1984\n.. _1998: https://github.com/pytest-dev/pytest/issues/1998\n.. _2004: https://github.com/pytest-dev/pytest/issues/2004\n.. _2005: https://github.com/pytest-dev/pytest/issues/2005\n.. _1649: https://github.com/pytest-dev/pytest/issues/1649\n\n\n", "2.7.1": "==================\n\n- fix issue731: do not get confused by the braces which may be present\n  and unbalanced in an object's repr while collapsing False\n  explanations.  Thanks Carl Meyer for the report and test case.\n\n- fix issue553: properly handling inspect.getsourcelines failures in\n  FixtureLookupError which would lead to an internal error,\n  obfuscating the original problem. Thanks talljosh for initial\n  diagnose/patch and Bruno Oliveira for final patch.\n\n- fix issue660: properly report scope-mismatch-access errors\n  independently from ordering of fixture arguments.  Also\n  avoid the pytest internal traceback which does not provide\n  information to the user. Thanks Holger Krekel.\n\n- streamlined and documented release process.  Also all versions\n  (in setup.py and documentation generation) are now read\n  from _pytest/__init__.py. Thanks Holger Krekel.\n\n- fixed docs to remove the notion that yield-fixtures are experimental.\n  They are here to stay :)  Thanks Bruno Oliveira.\n\n- Support building wheels by using environment markers for the\n  requirements.  Thanks Ionel Maries Cristian.\n\n- fixed regression to 2.6.4 which surfaced e.g. in lost stdout capture printing\n  when tests raised SystemExit. Thanks Holger Krekel.\n\n- reintroduced _pytest fixture of the pytester plugin which is used\n  at least by pytest-xdist.\n\n", "2.3.5": "==================\n\n- fix issue169: respect --tb=style with setup/teardown errors as well.\n\n- never consider a fixture function for test function collection\n\n- allow re-running of test items / helps to fix pytest-reruntests plugin\n  and also help to keep less fixture/resource references alive\n\n- put captured stdout/stderr into junitxml output even for passing tests\n  (thanks Adam Goucher)\n\n- Issue 265 - integrate nose setup/teardown with setupstate\n  so it doesn't try to teardown if it did not setup\n\n- issue 271 - don't write junitxml on slave nodes\n\n- Issue 274 - don't try to show full doctest example\n  when doctest does not know the example location\n\n- issue 280 - disable assertion rewriting on buggy CPython 2.6.0\n\n- inject \"getfixture()\" helper to retrieve fixtures from doctests,\n  thanks Andreas Zeidler\n\n- issue 259 - when assertion rewriting, be consistent with the default\n  source encoding of ASCII on Python 2\n\n- issue 251 - report a skip instead of ignoring classes with init\n\n- issue250 unicode/str mixes in parametrization names and values now works\n\n- issue257, assertion-triggered compilation of source ending in a\n  comment line doesn't blow up in python2.5 (fixed through py>=1.4.13.dev6)\n\n- fix --genscript option to generate standalone scripts that also\n  work with python3.3 (importer ordering)\n\n- issue171 - in assertion rewriting, show the repr of some\n  global variables\n\n- fix option help for \"-k\"\n\n- move long description of distribution into README.rst\n\n- improve docstring for metafunc.parametrize()\n\n- fix bug where using capsys with pytest.set_trace() in a test\n  function would break when looking at capsys.readouterr()\n\n- allow to specify prefixes starting with \"_\" when\n  customizing python_functions test discovery. (thanks Graham Horler)\n\n- improve PYTEST_DEBUG tracing output by putting\n  extra data on a new lines with additional indent\n\n- ensure OutcomeExceptions like skip/fail have initialized exception attributes\n\n- issue 260 - don't use nose special setup on plain unittest cases\n\n- fix issue134 - print the collect errors that prevent running specified test items\n\n- fix issue266 - accept unicode in MarkEvaluator expressions\n\n", "3.1.1": "=========================\n\nBug Fixes\n---------\n\n- pytest warning capture no longer overrides existing warning filters. The\n  previous behaviour would override all filters and caused regressions in test\n  suites which configure warning filters to match their needs. Note that as a\n  side-effect of this is that ``DeprecationWarning`` and\n  ``PendingDeprecationWarning`` are no longer shown by default. (2430)\n\n- Fix issue with non-ascii contents in doctest text files. (2434)\n\n- Fix encoding errors for unicode warnings in Python 2. (2436)\n\n- ``pytest.deprecated_call`` now captures ``PendingDeprecationWarning`` in\n  context manager form. (2441)\n\n\nImproved Documentation\n----------------------\n\n- Addition of towncrier for changelog management. (2390)\n\n\n", "2.9.2": "==================\n\n**Bug Fixes**\n\n* fix `510`_: skip tests where one parameterize dimension was empty\n  thanks Alex Stapleton for the Report and `RonnyPfannschmidt`_ for the PR\n\n* Fix Xfail does not work with condition keyword argument.\n  Thanks `astraw38`_ for reporting the issue (`1496`_) and `tomviner`_\n  for PR the (`1524`_).\n\n* Fix win32 path issue when putting custom config file with absolute path\n  in ``pytest.main(\"-c your_absolute_path\")``.\n\n* Fix maximum recursion depth detection when raised error class is not aware\n  of unicode/encoded bytes.\n  Thanks `prusse-martin`_ for the PR (`1506`_).\n\n* Fix ``pytest.mark.skip`` mark when used in strict mode.\n  Thanks `pquentin`_ for the PR and `RonnyPfannschmidt`_ for\n  showing how to fix the bug.\n\n* Minor improvements and fixes to the documentation.\n  Thanks `omarkohl`_ for the PR.\n\n* Fix ``--fixtures`` to show all fixture definitions as opposed to just\n  one per fixture name.\n  Thanks to `hackebrot`_ for the PR.\n\n.. _510: https://github.com/pytest-dev/pytest/issues/510\n.. _1506: https://github.com/pytest-dev/pytest/pull/1506\n.. _1496: https://github.com/pytest-dev/pytest/issues/1496\n.. _1524: https://github.com/pytest-dev/pytest/pull/1524\n\n.. _prusse-martin: https://github.com/prusse-martin\n.. _astraw38: https://github.com/astraw38\n\n\n", "2.6.3": "==================\n\n- fix issue575: xunit-xml was reporting collection errors as failures\n  instead of errors, thanks Oleg Sinyavskiy.\n\n- fix issue582: fix setuptools example, thanks Laszlo Papp and Ronny\n  Pfannschmidt.\n\n- Fix infinite recursion bug when pickling capture.EncodedFile, thanks\n  Uwe Schmitt.\n\n- fix issue589: fix bad interaction with numpy and others when showing\n  exceptions.  Check for precise \"maximum recursion depth exceed\" exception\n  instead of presuming any RuntimeError is that one (implemented in py\n  dep).  Thanks Charles Cloud for analysing the issue.\n\n- fix conftest related fixture visibility issue: when running with a\n  CWD outside of a test package pytest would get fixture discovery wrong.\n  Thanks to Wolfgang Schnerring for figuring out a reproducible example.\n\n- Introduce pytest_enter_pdb hook (needed e.g. by pytest_timeout to cancel the\n  timeout when interactively entering pdb).  Thanks Wolfgang Schnerring.\n\n- check xfail/skip also with non-python function test items. Thanks\n  Floris Bruynooghe.\n\n", "1.3.1": "==================\n\n**New features**\n\n- issue91: introduce new py.test.xfail(reason) helper\n  to imperatively mark a test as expected to fail. Can\n  be used from within setup and test functions. This is\n  useful especially for parametrized tests when certain\n  configurations are expected-to-fail.  In this case the\n  declarative approach with the py.test.mark.xfail cannot\n  be used as it would mark all configurations as xfail.\n\n- issue102: introduce new --maxfail=NUM option to stop\n  test runs after NUM failures.  This is a generalization\n  of the '-x' or '--exitfirst' option which is now equivalent\n  to '--maxfail=1'.  Both '-x' and '--maxfail' will\n  now also print a line near the end indicating the Interruption.\n\n- issue89: allow py.test.mark decorators to be used on classes\n  (class decorators were introduced with python2.6) and\n  also allow to have multiple markers applied at class/module level\n  by specifying a list.\n\n- improve and refine letter reporting in the progress bar:\n  .  pass\n  f  failed test\n  s  skipped tests (reminder: use for dependency/platform mismatch only)\n  x  xfailed test (test that was expected to fail)\n  X  xpassed test (test that was expected to fail but passed)\n\n  You can use any combination of 'fsxX' with the '-r' extended\n  reporting option. The xfail/xpass results will show up as\n  skipped tests in the junitxml output - which also fixes\n  issue99.\n\n- make py.test.cmdline.main() return the exitstatus instead of raising\n  SystemExit and also allow it to be called multiple times.  This of\n  course requires that your application and tests are properly teared\n  down and don't have global state.\n\n**Bug Fixes**\n\n- improved traceback presentation:\n  - improved and unified reporting for \"--tb=short\" option\n  - Errors during test module imports are much shorter, (using --tb=short style)\n  - raises shows shorter more relevant tracebacks\n  - --fulltrace now more systematically makes traces longer / inhibits cutting\n\n- improve support for raises and other dynamically compiled code by\n  manipulating python's linecache.cache instead of the previous\n  rather hacky way of creating custom code objects.  This makes\n  it seemlessly work on Jython and PyPy where it previously didn't.\n\n- fix issue96: make capturing more resilient against Control-C\n  interruptions (involved somewhat substantial refactoring\n  to the underlying capturing functionality to avoid race\n  conditions).\n\n- fix chaining of conditional skipif/xfail decorators - so it works now\n  as expected to use multiple py.test.mark.skipif(condition) decorators,\n  including specific reporting which of the conditions lead to skipping.\n\n- fix issue95: late-import zlib so that it's not required\n  for general py.test startup.\n\n- fix issue94: make reporting more robust against bogus source code\n  (and internally be more careful when presenting unexpected byte sequences)\n\n\n", "1.0.0b1": "=======\n\n* introduced new \"funcarg\" setup method,\n  see doc/test/funcarg.txt\n\n* introduced plugin architecture and many\n  new py.test plugins, see\n  doc/test/plugins.txt\n\n* teardown_method is now guaranteed to get\n  called after a test method has run.\n\n* new method: py.test.importorskip(mod,minversion)\n  will either import or call py.test.skip()\n\n* completely revised internal py.test architecture\n\n* new py.process.ForkedFunc object allowing to\n  fork execution of a function to a sub process\n  and getting a result back.\n\nXXX lots of things missing here XXX\n\n", "2.0.2": "==================\n\n- tackle issue32 - speed up test runs of very quick test functions\n  by reducing the relative overhead\n\n- fix issue30 - extended xfail/skipif handling and improved reporting.\n  If you have a syntax error in your skip/xfail\n  expressions you now get nice error reports.\n\n  Also you can now access module globals from xfail/skipif\n  expressions so that this for example works now::\n\n    import pytest\n    import mymodule\n    pytest.mark.skipif(\"mymodule.__version__[0] == \"1\")\n    def test_function():\n        pass\n\n  This will not run the test function if the module's version string\n  does not start with a \"1\".  Note that specifying a string instead\n  of a boolean expressions allows py.test to report meaningful information\n  when summarizing a test run as to what conditions lead to skipping\n  (or xfail-ing) tests.\n\n- fix issue28 - setup_method and pytest_generate_tests work together\n  The setup_method fixture method now gets called also for\n  test function invocations generated from the pytest_generate_tests\n  hook.\n\n- fix issue27 - collectonly and keyword-selection (-k) now work together\n  Also, if you do \"py.test --collectonly -q\" you now get a flat list\n  of test ids that you can use to paste to the py.test commandline\n  in order to execute a particular test.\n\n- fix issue25 avoid reported problems with --pdb and python3.2/encodings output\n\n- fix issue23 - tmpdir argument now works on Python3.2 and WindowsXP\n  Starting with Python3.2 os.symlink may be supported. By requiring\n  a newer py lib version the py.path.local() implementation acknowledges\n  this.\n\n- fixed typos in the docs (thanks Victor Garcia, Brianna Laugher) and particular\n  thanks to Laura Creighton who also reviewed parts of the documentation.\n\n- fix slightly wrong output of verbose progress reporting for classes\n  (thanks Amaury)\n\n- more precise (avoiding of) deprecation warnings for node.Class|Function accesses\n\n- avoid std unittest assertion helper code in tracebacks (thanks Ronny)\n\n", "2.7.3": "==================\n\n- Allow 'dev', 'rc', or other non-integer version strings in ``importorskip``.\n  Thanks to Eric Hunsberger for the PR.\n\n- fix issue856: consider --color parameter in all outputs (for example\n  --fixtures). Thanks Barney Gale for the report and Bruno Oliveira for the PR.\n\n- fix issue855: passing str objects as ``plugins`` argument to pytest.main\n  is now interpreted as a module name to be imported and registered as a\n  plugin, instead of silently having no effect.\n  Thanks xmo-odoo for the report and Bruno Oliveira for the PR.\n\n- fix issue744: fix for ast.Call changes in Python 3.5+.  Thanks\n  Guido van Rossum, Matthias Bussonnier, Stefan Zimmermann and\n  Thomas Kluyver.\n\n- fix issue842: applying markers in classes no longer propagate this markers\n  to superclasses which also have markers.\n  Thanks xmo-odoo for the report and Bruno Oliveira for the PR.\n\n- preserve warning functions after call to pytest.deprecated_call. Thanks\n  Pieter Mulder for PR.\n\n- fix issue854: autouse yield_fixtures defined as class members of\n  unittest.TestCase subclasses now work as expected.\n  Thannks xmo-odoo for the report and Bruno Oliveira for the PR.\n\n- fix issue833: --fixtures now shows all fixtures of collected test files, instead of just the\n  fixtures declared on the first one.\n  Thanks Florian Bruhin for reporting and Bruno Oliveira for the PR.\n\n- fix issue863: skipped tests now report the correct reason when a skip/xfail\n  condition is met when using multiple markers.\n  Thanks Raphael Pierzina for reporting and Bruno Oliveira for the PR.\n\n- optimized tmpdir fixture initialization, which should make test sessions\n  faster (specially when using pytest-xdist). The only visible effect\n  is that now pytest uses a subdirectory in the $TEMP directory for all\n  directories created by this fixture (defaults to $TEMP/pytest-$USER).\n  Thanks Bruno Oliveira for the PR.\n\n", "1.2.0": "==================\n\n- refined usage and options for \"py.cleanup\"::\n\n    py.cleanup      remove \"*.pyc\" and \"*$py.class\" (jython) files\n    py.cleanup -e .swp -e .cache  also remove files with these extensions\n    py.cleanup -s   remove \"build\" and \"dist\" directory next to setup.py files\n    py.cleanup -d   also remove empty directories\n    py.cleanup -a   synonym for \"-s -d -e 'pip-log.txt'\"\n    py.cleanup -n   dry run, only show what would be removed\n\n- add a new option \"py.test --funcargs\" which shows available funcargs\n  and their help strings (docstrings on their respective factory function)\n  for a given test path\n\n- display a short and concise traceback if a funcarg lookup fails\n\n- early-load \"conftest.py\" files in non-dot first-level sub directories.\n  allows to conveniently keep and access test-related options in a ``test``\n  subdir and still add command line options.\n\n- fix issue67: new super-short traceback-printing option: \"--tb=line\" will print a single line for each failing (python) test indicating its filename, lineno and the failure value\n\n- fix issue78: always call python-level teardown functions even if the\n  according setup failed.  This includes refinements for calling setup_module/class functions\n  which will now only be called once instead of the previous behaviour where they'd be called\n  multiple times if they raise an exception (including a Skipped exception).  Any exception\n  will be re-corded and associated with all tests in the according module/class scope.\n\n- fix issue63: assume <40 columns to be a bogus terminal width, default to 80\n\n- fix pdb debugging to be in the correct frame on raises-related errors\n\n- update apipkg.py to fix an issue where recursive imports might\n  unnecessarily break importing\n\n- fix plugin links\n\n", "2.1.3": "==================\n\n- fix issue79: assertion rewriting failed on some comparisons in boolops\n- correctly handle zero length arguments (a la pytest '')\n- fix issue67 / junitxml now contains correct test durations, thanks ronny\n- fix issue75 / skipping test failure on jython\n- fix issue77 / Allow assertrepr_compare hook to apply to a subset of tests\n\n", "2.2.1": "==================\n\n- fix issue99 (in pytest and py) internallerrors with resultlog now\n  produce better output - fixed by normalizing pytest_internalerror\n  input arguments.\n- fix issue97 / traceback issues (in pytest and py) improve traceback output\n  in conjunction with jinja2 and cython which hack tracebacks\n- fix issue93 (in pytest and pytest-xdist) avoid \"delayed teardowns\":\n  the final test in a test node will now run its teardown directly\n  instead of waiting for the end of the session. Thanks Dave Hunt for\n  the good reporting and feedback.  The pytest_runtest_protocol as well\n  as the pytest_runtest_teardown hooks now have \"nextitem\" available\n  which will be None indicating the end of the test run.\n- fix collection crash due to unknown-source collected items, thanks\n  to Ralf Schmitt (fixed by depending on a more recent pylib)\n\n", "2.8.3": "==================\n\n- fix 1169: add __name__ attribute to testcases in TestCaseFunction to\n  support the unittest.skip decorator on functions and methods.\n  Thanks Lee Kamentsky for the PR.\n\n- fix 1035: collecting tests if test module level obj has __getattr__().\n  Thanks Suor for the report and Bruno Oliveira / Tom Viner for the PR.\n\n- fix 331: don't collect tests if their failure cannot be reported correctly\n  e.g. they are a callable instance of a class.\n\n- fix 1133: fixed internal error when filtering tracebacks where one entry\n  belongs to a file which is no longer available.\n  Thanks Bruno Oliveira for the PR.\n\n- enhancement made to highlight in red the name of the failing tests so\n  they stand out in the output.\n  Thanks Gabriel Reis for the PR.\n\n- add more talks to the documentation\n- extend documentation on the --ignore cli option\n- use pytest-runner for setuptools integration\n- minor fixes for interaction with OS X El Capitan\n  system integrity protection (thanks Florian)\n\n\n", "1.0.0b8": "====================\n\n* pytest_unittest-plugin is now enabled by default\n\n* introduced pytest_keyboardinterrupt hook and\n  refined pytest_sessionfinish hooked, added tests.\n\n* workaround a buggy logging module interaction (\"closing already closed\n  files\").  Thanks to Sridhar Ratnakumar for triggering.\n\n* if plugins use \"py.test.importorskip\" for importing\n  a dependency only a warning will be issued instead\n  of exiting the testing process.\n\n* many improvements to docs:\n  - refined funcargs doc , use the term \"factory\" instead of \"provider\"\n  - added a new talk/tutorial doc page\n  - better download page\n  - better plugin docstrings\n  - added new plugins page and automatic doc generation script\n\n* fixed teardown problem related to partially failing funcarg setups\n  (thanks MrTopf for reporting), \"pytest_runtest_teardown\" is now\n  always invoked even if the \"pytest_runtest_setup\" failed.\n\n* tweaked doctest output for docstrings in py modules,\n  thanks Radomir.\n\n", "2.8.6": "==================\n\n- fix 1259: allow for double nodeids in junitxml,\n  this was a regression failing plugins combinations\n  like pytest-pep8 + pytest-flakes\n\n- Workaround for exception that occurs in pyreadline when using\n  ``--pdb`` with standard I/O capture enabled.\n  Thanks Erik M. Bray for the PR.\n\n- fix 900: Better error message in case the target of a ``monkeypatch`` call\n  raises an ``ImportError``.\n\n- fix 1292: monkeypatch calls (setattr, setenv, etc.) are now O(1).\n  Thanks David R. MacIver for the report and Bruno Oliveira for the PR.\n\n- fix 1223: captured stdout and stderr are now properly displayed before\n  entering pdb when ``--pdb`` is used instead of being thrown away.\n  Thanks Cal Leeming for the PR.\n\n- fix 1305: pytest warnings emitted during ``pytest_terminal_summary`` are now\n  properly displayed.\n  Thanks Ionel Maries Cristian for the report and Bruno Oliveira for the PR.\n\n- fix 628: fixed internal UnicodeDecodeError when doctests contain unicode.\n  Thanks Jason R. Coombs for the report and Bruno Oliveira for the PR.\n\n- fix 1334: Add captured stdout to jUnit XML report on setup error.\n  Thanks Georgy Dyuldin for the PR.\n\n\n"}, "pytest-sugar": {"0.3.5": "^^^^^^^^^^^^^^^^^^^\n\n- Fix codec error during pip install\n\n", "0.5.0": "^^^^^^^^^^^^^^^^^^^\n\n- Colour progressbar correctly for low number of tests\n- Fix error case when deactivating pytest-sugar using --lf together with --nosugar\n- --nosugar deprecated, use -p no:sugar\n\n", "0.4.0": "^^^^^^^^^^^^^^^^^^^\n\nThanks to or:\n\n- Configurable colors\n- Handling of long file paths\n- Red progressbar in case of failures\n- Using termcolor for much easier coloration and configuration\n- Simplify the progressbar maths code\n- Change the 's' for skipped tests to a circle\n- Simplify the space filling logic of full_line\n- Reduce the right margin to 0, so the blinking cursor is hidden\n\n", "0.6.0": "^^^^^^^^^^^^^^^^^^^\n\n- pytest-xdist support\n- Turn off progress meter when progressbar_length=0\n\n", "0.3.2": "^^^^^^^^^^^^^^^^^^^\n\n- Fix issue with PyPI package.\n- Code refactoring\n\n", "0.3.1": "^^^^^^^^^^^^^^^^^^^\n\n- Fix incorrect wrapping that fine-grained progress introduced\n\n", "0.3.0": "^^^^^^^^^^^^^^^^^^^\n\n- Fine-grained progressbar using more Unicode block chars\n- Display version of pytest and pytest-sugar\n- Python 3 support\n- Fix GH-3: Wrap tests when they extend past line\n", "0.7.1": "^^^^^^^^^^^^^^^^^^^\n\n- Fix issue with deselected tests\n\n", "0.8.0": "^^^^^^^^^^^^^^^^^^^\n\n- Release as an universal wheel\n- Pytest3 compatibility\n- Treat setup/teardown failures as errors\n- Fix path issue in --new-summary\n- Disable sugar output when not in terminal, should help with testing other pytest plugins\n- Add double colons when in verbose mode\n- Make --new-summary default, replaced flag with --old-summary\n\n", "0.3.6": "^^^^^^^^^^^^^^^^^^^\n\n- Crashline with non-ASCII, 42\n- Restore Python 2.6 / 3.3 support\n- Fix unit tests\n- Fix UnicodeDecodeError during install, 43\n\n", "0.3.4": "^^^^^^^^^^^^^^^^^^^\n\n- Using pytest.mark.xfails throws an error 34\n\n", "0.3.3": "^^^^^^^^^^^^^^^^^^^\n\n- Fix problem with PyPi package.\n\n", "0.7.0": "^^^^^^^^^^^^^^^^^^^\n\n- Show skipped tests\n- Changed failed test summary (try `--new-summary` option to test it out)\n- Show teardown errors\n- Add support for pytest-rerunfailedtests\n- Make test symbols customizable\n- Remove deprecated `--nosugar`.\n\n", "0.5.1": "^^^^^^^^^^^^^^^^^^^\n\n- Fix Python 3 support\n\n", "0.9.0": "^^^^^^^^^^^^^^^^^^^\n\n- Print correct location for doctest failures\n- Write xdist output on correct lines\n\n"}, "mock": {}, "pep8-naming": {"0.2.2": "``````````````````\n* Do not require ``setuptools`` in setup.py.  It works around an issue\n  with ``pip`` and Python 3.\n\n* ``__new__`` is now considered as ``classmethod`` implicitly\n\n* Run unit tests on travis-ci.org for python2.6, 2.7, 3.2, and 3.3\n\n* Add unit tests and support running them with setup.py\n\n* Support Python 3.4 \n\n\n", "0.3.3": "``````````````````\n\n* Fix bug where ignored names were not properly split into a list.\n\n", "0.2.1": "``````````````````\n* Do not require ``flake8``\n\n\n", "0.4.1": "``````````````````\n\n* Note to self: Never do releases before ~0600 or coffee on a Sunday.\n* Fix option parsing for Flake8 3.0 (store parsed value on class)\n\n", "0.4.0": "``````````````````\n\n* Fix integration with Flake8 3.0.0b1\n* Start testing against Python 3.5\n\n", "0.2": "````````````````\n* Rename project ``flint-naming`` to ``pep8-naming``\n\n* Fix a crash when function argument is a tuple of tuples\n\n\n0.1 - 2013-02-11\n````````````````\n* First release\n", "0.3.2": "``````````````````\n\n* Fix bug trying to call ``split`` on a list.\n\n", "0.3.0": "``````````````````\n\n* Relaxed N806 checking for use with namedtuples\n\n* Add ``--ignore-names`` which allows the user to specify a list of names to\n  ignore. By default this includes ``setUp``, ``tearDown``, ``setUpClass``,\n  and ``tearDownClass``.\n\n\n", "0.3.1": "``````````````````\n\n* Fix optparse exception resulting from trying to register an option twice.\n\n\n"}, "mccabe": {"0.6.0": "``````````````````\n\n* Add support for Python 3.6\n\n* Fix handling for missing statement types\n\n", "0.5.0": "``````````````````\n\n* PyCon 2016 PDX release\n\n* Add support for Flake8 3.0\n\n", "0.2.1": "``````````````````\n\n* Do not require ``setuptools`` in setup.py.  It works around an issue\n  with ``pip`` and Python 3.\n\n\n", "0.4.0": "``````````````````\n\n* Stop testing on Python 3.2\n\n* Add support for async/await keywords on Python 3.5 from PEP 0492\n\n", "0.2": "````````````````\n\n* Rename project to ``mccabe``.\n\n* Provide ``flake8.extension`` setuptools entry point.\n\n* Read ``max-complexity`` from the configuration file.\n\n* Rename argument ``min_complexity`` to ``threshold``.\n\n\n0.1 - 2013-02-11\n````````````````\n* First release\n", "0.5.2": "``````````````````\n\n* When opening files ourselves, make sure we always name the file variable\n\n", "0.5.1": "``````````````````\n\n* Set default maximum complexity to -1 on the class itself\n\n", "0.3.1": "``````````````````\n\n* Include ``test_mccabe.py`` in releases.\n\n* Always coerce the ``max_complexity`` value from Flake8's entry-point to an\n  integer.\n\n", "0.5.3": "``````````````````\n\n* Report actual column number of violation instead of the start of the line\n\n", "0.3": "````````````````\n\n* Computation was wrong: the mccabe complexity starts at 1, not 2.\n\n* The ``max-complexity`` value is now inclusive.  E.g.: if the\n  value is 10 and the reported complexity is 10, then it passes.\n\n* Add tests.\n\n\n", "0.6.1": "``````````````````\n\n* Fix signature for ``PathGraphingAstVisitor.default`` to match the signature\n  for ``ASTVisitor``\n\n"}, "flake8": {"2.6.1": "------------------\n\n- **Bug** Update the config files to search for to include ``setup.cfg`` and\n  ``tox.ini``. This was broken in 2.5.5 when we stopped passing\n  ``config_file`` to our Style Guide\n\n\n", "2.3.0": "------------------\n\n- **Feature**: Add ``--output-file`` option to specify a file to write to\n  instead of ``stdout``.\n\n- **Bug** Fix interleaving of output while using multiprocessing\n  (`GitLab17`_)\n\n.. _GitLab17: https://gitlab.com/pycqa/flake8/issues/17\n\n\n", "3.3.0": "-------------------\n\nYou can view the `3.3.0 milestone`_ on GitLab for more details.\n\n- Add support for Python 3.6 (via dependencies). **Note** Flake8 does not\n  guarantee that all plugins will support Python 3.6.\n\n- Added unique error codes for all missing PyFlakes messages. (14 new\n  codes, see \"Error / Violation Codes\")\n\n- Dramatically improve the performance of Flake8. (See also `GitLab!156`_)\n\n- Display the local file path instead of the temporary file path when\n  using the git hook. (See also `GitLab244`_)\n\n- Add methods to Report class that will be called when Flake8 starts and\n  finishes processing a file. (See also `GitLab251`_)\n\n- Fix problem where hooks should only check \\*.py files. (See also\n  `GitLab268`_)\n\n- Fix handling of SyntaxErrors that do not include physical line information.\n  (See also `GitLab279`_)\n\n- Update upper bound on PyFlakes to allow for PyFlakes 1.5.0.  (See also\n  `GitLab290`_)\n\n- Update setuptools integration to less eagerly deduplicate packages.\n  (See also `GitLab295`_)\n\n- Force ``flake8 --version`` to be repeatable between invocations. (See also\n  `GitLab297`_)\n\n.. all links\n.. _3.3.0 milestone:\n    https://gitlab.com/pycqa/flake8/milestones/16\n\n.. issue links\n.. _GitLab244:\n    https://gitlab.com/pycqa/flake8/issues/244\n.. _GitLab251:\n    https://gitlab.com/pycqa/flake8/issues/251\n.. _GitLab268:\n    https://gitlab.com/pycqa/flake8/issues/268\n.. _GitLab279:\n    https://gitlab.com/pycqa/flake8/issues/279\n.. _GitLab290:\n    https://gitlab.com/pycqa/flake8/issues/290\n.. _GitLab295:\n    https://gitlab.com/pycqa/flake8/issues/295\n.. _GitLab297:\n    https://gitlab.com/pycqa/flake8/issues/297\n\n.. merge request links\n.. _GitLab!156:\n    https://gitlab.com/pycqa/flake8/merge_requests/156\n\n\n", "3.2.0": "-------------------\n\nYou can view the `3.2.0 milestone`_ on GitLab for more details.\n\n- Allow for pycodestyle 2.2.0 which fixes a bug in E305 (See also\n  `GitLab256`_)\n\n.. links\n.. _3.2.0 milestone:\n    https://gitlab.com/pycqa/flake8/milestones/14\n.. _GitLab256:\n    https://gitlab.com/pycqa/flake8/issues/256\n\n\n", "1.0": "----------------\n\n- Deactivates by default the complexity checker\n- Introduces the complexity option in the HG hook and the command line.\n\n\n", "2.0.0": "------------------\n\n- Pyflakes errors are prefixed by an ``F`` instead of an ``E``\n- McCabe complexity warnings are prefixed by a ``C`` instead of a ``W``\n- Flake8 supports extensions through entry points\n- Due to the above support, we **require** setuptools\n- We publish the `documentation <https://flake8.readthedocs.org/>`_\n- Fixes 13: pep8, pyflakes and mccabe become external dependencies\n- Split run.py into main.py, engine.py and hooks.py for better logic\n- Expose our parser for our users\n- New feature: Install git and hg hooks automagically\n- By relying on pyflakes (0.6.1), we also fixed 45 and 35\n\n\n", "2.1.0": "------------------\n\n- Add FLAKE8_LAZY and FLAKE8_IGNORE environment variable support to git and\n  mercurial hooks\n- Force git and mercurial hooks to repsect configuration in setup.cfg\n- Only check staged files if that is specified\n- Fix hook file permissions\n- Fix the git hook on python 3\n- Ignore non-python files when running the git hook\n- Ignore .tox directories by default\n- Flake8 now reports the column number for PyFlakes messages\n\n\n", "3.0.1": "-------------------\n\n- Fix regression in handling of `` noqa`` for multiline strings.\n  (See also `GitLab177`_)\n\n- Fix regression in handling of ``--output-file`` when not also using\n  ``--verbose``. (See also `GitLab180`_)\n\n- Fix regression in handling of ``--quiet``. (See also `GitLab180`_)\n\n- Fix regression in handling of ``--statistics``. (See also `GitLab180`_)\n\n\n.. links\n.. _GitLab177:\n    https://gitlab.com/pycqa/flake8/issues/177\n.. _GitLab180:\n    https://gitlab.com/pycqa/flake8/issues/180\n\n\n", "1.1": "----------------\n\n- fixed the value returned by --version\n- allow the flake8: header to be more generic\n- fixed the \"hg hook raises 'physical lines'\" bug\n- allow three argument form of raise\n- now uses setuptools if available, for 'develop' command\n\n\n", "2.5.5": "------------------\n\n- **Bug** Fix setuptools integration when parsing config files\n\n- **Bug** Don't pass the user's config path as the config_file when creating a\n  StyleGuide\n\n\n", "2.5.1": "------------------\n\n- **Bug** Properly look for ``.flake8`` in current working directory\n  (`GitLab103`_)\n\n- **Bug** Monkey-patch ``pep8.stdin_get_value`` to cache the actual value in\n  stdin. This helps plugins relying on the function when run with\n  multiprocessing. (`GitLab105`_, `GitLab107`_)\n\n.. _GitLab103: https://gitlab.com/pycqa/flake8/issues/103\n.. _GitLab105: https://gitlab.com/pycqa/flake8/issues/105\n.. _GitLab107: https://gitlab.com/pycqa/flake8/issues/107\n\n\n", "3.1.0": "-------------------\n\nYou can view the `3.1.0 milestone`_ on GitLab for more details.\n\n- Add ``--bug-report`` flag to make issue reporters' lives easier.\n\n- Collect configuration files from the current directory when using our Git\n  hook. (See also `GitLab210`_, `GitLab218`_, `GitLab223`_)\n\n- Avoid unhandled exceptions when dealing with SyntaxErrors. (See also\n  `GitLab214`_, `GitLab238`_)\n\n- Exit early if the value for ``--diff`` is empty. (See also `GitLab226`_)\n\n- Handle empty ``--stdin-display-name`` values. (See also `GitLab235`_)\n\n- Properly report the column number of Syntax Errors. We were assuming that\n  all reports of column numbers were 0-indexed, however, SyntaxErrors report\n  the column number as 1-indexed. This caused us to report a column number\n  that was 1 past the actual position. Further, when combined with\n  SyntaxErrors that occur at a newline, this caused the position to be\n  visually off by two. (See also `GitLab237`_)\n\n- Fix the behaviour of ``--enable-extensions``. Previously, items specified\n  here were still ignored due to the fact that the off-by-default extension\n  codes were being left in the ``ignore`` list. (See also `GitLab239`_)\n\n- Fix problems around ``--select`` and ``--ignore`` behaviour that prevented\n  codes that were neither explicitly selected nor explicitly ignored from\n  being reported. (See also `GitLab242`_)\n\n- Truly be quiet when the user specifies ``-q`` one or more times. Previously,\n  we were showing the if the user specified ``-q`` and ``--show-source``. We\n  have fixed this bug. (See also `GitLab245`_)\n\n- Add new File Processor attribute, ``previous_unindented_logical_line`` to\n  accommodate pycodestyle 2.1.0. (See also `GitLab246`_)\n\n- When something goes wrong, exit non-zero. (See also `GitLab248`_,\n  `GitLab209`_)\n\n- Add ``--tee`` as an option to allow use of ``--output-file`` and printing to\n  standard out.\n\n- Allow the git plugin to actually be lazy when collecting files.\n\n- Allow for pycodestyle 2.1 series and pyflakes 1.3 series.\n\n.. links\n.. _3.1.0 milestone:\n    https://gitlab.com/pycqa/flake8/milestones/12\n.. _GitLab209:\n    https://gitlab.com/pycqa/flake8/issues/209\n.. _GitLab210:\n    https://gitlab.com/pycqa/flake8/issues/210\n.. _GitLab214:\n    https://gitlab.com/pycqa/flake8/issues/214\n.. _GitLab218:\n    https://gitlab.com/pycqa/flake8/issues/218\n.. _GitLab223:\n    https://gitlab.com/pycqa/flake8/issues/223\n.. _GitLab226:\n    https://gitlab.com/pycqa/flake8/issues/226\n.. _GitLab235:\n    https://gitlab.com/pycqa/flake8/issues/235\n.. _GitLab237:\n    https://gitlab.com/pycqa/flake8/issues/237\n.. _GitLab238:\n    https://gitlab.com/pycqa/flake8/issues/238\n.. _GitLab239:\n    https://gitlab.com/pycqa/flake8/issues/239\n.. _GitLab242:\n    https://gitlab.com/pycqa/flake8/issues/242\n.. _GitLab245:\n    https://gitlab.com/pycqa/flake8/issues/245\n.. _GitLab246:\n    https://gitlab.com/pycqa/flake8/issues/246\n.. _GitLab248:\n    https://gitlab.com/pycqa/flake8/issues/248\n\n\n", "3.0.2": "-------------------\n\n- Fix local config file discovery.  (See also `GitLab181`_)\n\n- Fix indexing of column numbers. We accidentally were starting column indices\n  at 0 instead of 1.\n\n- Fix regression in handling of errors like E402 that rely on a combination of\n  attributes. (See also `GitLab186`_)\n\n\n.. links\n.. _GitLab181:\n    https://gitlab.com/pycqa/flake8/issues/181\n.. _GitLab186:\n    https://gitlab.com/pycqa/flake8/issues/186\n\n\n", "2.5.3": "------------------\n\n- **Bug** Actually parse ``output_file`` and ``enable_extensions`` from config\n  files\n\n\n", "1.3": "----------------\n\n- fixed false W402 warning on exception blocks.\n\n\n", "1.6.2": "------------------\n\n- fixed the NameError: global name 'message' is not defined (46)\n\n\n", "2.5.0": "------------------\n\n- **Improvement** Raise cap on PyFlakes for Python 3.5 support\n\n- **Improvement** Avoid deprecation warnings when loading extensions\n  (`GitLab59`_, `GitLab90`_)\n\n- **Improvement** Separate logic to enable \"off-by-default\" extensions\n  (`GitLab67`_)\n\n- **Bug** Properly parse options to setuptools Flake8 command (`GitLab!41`_)\n\n- **Bug** Fix exceptions when output on stdout is truncated before Flake8\n  finishes writing the output (`GitLab69`_)\n\n- **Bug** Fix error on OS X where Flake8 can no longer acquire or create new\n  semaphores (`GitLab74`_)\n\n.. _GitLab!41: https://gitlab.com/pycqa/flake8/merge_requests/41\n.. _GitLab59: https://gitlab.com/pycqa/flake8/issues/59\n.. _GitLab67: https://gitlab.com/pycqa/flake8/issues/67\n.. _GitLab69: https://gitlab.com/pycqa/flake8/issues/69\n.. _GitLab74: https://gitlab.com/pycqa/flake8/issues/74\n.. _GitLab90: https://gitlab.com/pycqa/flake8/issues/90\n\n\n", "2.6.0": "------------------\n\n- **Requirements Change** Switch to pycodestyle as all future pep8 releases\n  will use that package name\n\n- **Improvement** Allow for Windows users on *select* versions of Python to\n  use ``--jobs`` and multiprocessing\n\n- **Improvement** Update bounds on McCabe\n\n- **Improvement** Update bounds on PyFlakes and blacklist known broken\n  versions\n\n- **Improvement** Handle new PyFlakes warning with a new error code: F405\n\n\n", "0.6": "----------------\n\n- Fix the McCabe metric on some loops\n", "1.4": "----------------\n\n- git_hook: Only check staged changes for compliance\n- use pep8 1.2\n\n\n", "1.5": "----------------\n\n- fixed the stdin\n- make sure mccabe catches the syntax errors as warnings\n- pep8 upgrade\n- added max_line_length default value\n- added Flake8Command and entry points if setuptools is around\n- using the setuptools console wrapper when available\n\n\n", "1.6": "----------------\n\n- changed the signatures of the ``check_file`` function in flake8/run.py,\n  ``skip_warning`` in flake8/util.py and the ``check``, ``checkPath``\n  functions in flake8/pyflakes.py.\n- fix ``--exclude`` and ``--ignore`` command flags (14, 19)\n- fix the git hook that wasn't catching files not already added to the index\n  (29)\n- pre-emptively includes the addition to pep8 to ignore certain lines.\n  Add `` nopep8`` to the end of a line to ignore it. (37)\n- ``check_file`` can now be used without any special prior setup (21)\n- unpacking exceptions will no longer cause an exception (20)\n- fixed crash on non-existent file (38)\n\n\n", "2.4.1": "------------------\n\n- **Bug** Do not raise a ``SystemError`` unless there were errors in the\n  setuptools command. (`GitLab39`_, `GitLab!23`_)\n\n- **Bug** Do not verify dependencies of extensions loaded via entry-points.\n\n- **Improvement** Blacklist versions of pep8 we know are broken\n\n.. _GitLab39: https://gitlab.com/pycqa/flake8/issues/39\n.. _GitLab!23: https://gitlab.com/pycqa/flake8/merge_requests/23\n\n\n", "1.7.0": "------------------\n\n- Fixes part of 35: Exception for no WITHITEM being an attribute of Checker\n  for Python 3.3\n- Support stdin\n- Incorporate phd's builtins pull request\n- Fix the git hook\n- Update pep8.py to the latest version\n\n\n", "3.2.1": "-------------------\n\nYou can view the `3.2.1 milestone`_ on GitLab for more details.\n\n- Fix subtle bug when deciding whether to report an on-by-default's violation\n  (See also `GitLab257`_)\n\n- Fix another bug around SyntaxErrors not being reported at the right column\n  and row (See also `GitLab259`_ and `GitLab237`_ for a related, previously\n  fixed bug)\n\n- Fix regression from 2.x where we run checks against explicitly provided\n  files, even if they don't match the filename patterns. (See also\n  `GitLab266`_)\n\n.. links\n.. _3.2.1 milestone:\n    https://gitlab.com/pycqa/flake8/milestones/15\n.. _GitLab237:\n    https://gitlab.com/pycqa/flake8/issues/237\n.. _GitLab257:\n    https://gitlab.com/pycqa/flake8/issues/257\n.. _GitLab259:\n    https://gitlab.com/pycqa/flake8/issues/259\n.. _GitLab266:\n    https://gitlab.com/pycqa/flake8/issues/266\n\n\n", "2.2.0": "------------------\n\n- New option ``doctests`` to run Pyflakes checks on doctests too\n- New option ``jobs`` to launch multiple jobs in parallel\n- Turn on using multiple jobs by default using the CPU count\n- Add support for ``python -m flake8`` on Python 2.7 and Python 3\n- Fix Git and Mercurial hooks: issues 88, 133, 148 and 149\n- Fix crashes with Python 3.4 by upgrading dependencies\n- Fix traceback when running tests with Python 2.6\n- Fix the setuptools command ``python setup.py flake8`` to read\n  the project configuration\n\n\n", "2.2.4": "------------------\n\n- Fix bugs triggered by turning multiprocessing on by default (again)\n\n  Multiprocessing is forcibly disabled in the following cases:\n\n  - Passing something in via stdin\n\n  - Analyzing a diff\n\n  - Using windows\n\n- Fix --install-hook when there are no config files present for pep8 or\n  flake8.\n\n- Fix how the setuptools command parses excludes in config files\n\n- Fix how the git hook determines which files to analyze (Thanks Chris\n  Buccella!)\n\n\n", "3.0.0": "-------------------\n\n- Rewrite our documentation from scratch! (http://flake8.pycqa.org)\n\n- Drop explicit support for Pythons 2.6, 3.2, and 3.3.\n\n- Remove dependence on pep8/pycodestyle for file processing, plugin\n  dispatching, and more. We now control all of this while keeping backwards\n  compatibility.\n\n- ``--select`` and ``--ignore`` can now both be specified and try to find the\n  most specific rule from each. For example, if you do ``--select E --ignore\n  E123`` then we will report everything that starts with ``E`` except for\n  ``E123``. Previously, you would have had to do ``--ignore E123,F,W`` which\n  will also still work, but the former should be far more intuitive.\n\n- Add support for in-line `` noqa`` comments to specify **only** the error\n  codes to be ignored, e.g., `` noqa: E123,W503``\n\n- Add entry-point for formatters as well as a base class that new formatters\n  can inherit from. See the documentation for more details.\n\n- Add detailed verbose output using the standard library logging module.\n\n- Enhance our usage of optparse for plugin developers by adding new parameters\n  to the ``add_option`` that plugins use to register new options.\n\n- Update ``--install-hook`` to require the name of version control system hook\n  you wish to install a Flake8.\n\n- Stop checking sub-directories more than once via the setuptools command\n\n- When passing a file on standard-in, allow the caller to specify\n  ``--stdin-display-name`` so the output is properly formatted\n\n- The Git hook now uses ``sys.executable`` to format the shebang line.\n  This allows Flake8 to install a hook script from a virtualenv that points to\n  that virtualenv's Flake8 as opposed to a global one (without the virtualenv\n  being sourced).\n\n- Print results in a deterministic and consistent ordering when used with\n  multiprocessing\n\n- When using ``--count``, the output is no longer written to stderr.\n\n- AST plugins can either be functions or classes and all plugins can now\n  register options so long as there are callable attributes named as we\n  expect.\n\n- Stop forcibly re-adding ``.tox``, ``.eggs``, and ``*.eggs`` to\n  ``--exclude``. Flake8 2.x started always appending those three patterns\n  to any exclude list (including the default and any user supplied list).\n  Flake8 3 has stopped adding these in, so you may see errors when upgrading\n  due to these patterns no longer being forcibly excluded by default if you\n  have your own exclude patterns specified.\n\n  To fix this, add the appropriate patterns to your exclude patterns list.\n\n  .. note::\n\n      This item was added in November of 2016, as a result of a bug\n      report.\n\n\n", "0.7": "----------------\n\n- Fix pep8 initialization when run through Hg\n- Make pep8 short options work when run through the command line\n- Skip duplicates when controlling files via Hg\n\n\n", "0.9": "----------------\n\n- update pep8 version to 0.6.1\n- mccabe check: gracefully handle compile failure\n\n\n", "3.4.1": "-------------------\n\nYou can view the `3.4.1 milestone`_ on GitLab for more details.\n\n- Fix minor regression when users specify only a ``--select`` list with items\n  in the enabled/extended select list.  (See also `GitLab354`_)\n\n.. all links\n.. _3.4.1 milestone:\n    https://gitlab.com/pycqa/flake8/milestones/19\n\n.. issue links\n.. _GitLab354:\n    https://gitlab.com/pycqa/flake8/issues/354\n\n.. merge request links\n\n\n", "2.2.2": "------------------\n\n- Re-enable multiprocessing by default while fixing the issue Windows users\n  were seeing.\n\n\n", "0.8": "----------------\n\n- fixed hg hook\n- discard unexisting files on hook check\n\n\n", "1.2": "----------------\n\n- added a git hook\n- now Python 3 compatible\n- mccabe and pyflakes have warning codes like pep8 now\n\n\n", "2.2.3": "------------------\n\n- Actually turn multiprocessing on by default\n\n\n", "2.2.5": "------------------\n\n- Flush standard out when using multiprocessing\n\n- Make the check for \" flake8: noqa\" more strict\n\n\n", "3.0.3": "-------------------\n\n- Disable ``--jobs`` for any version of Python on Windows.\n  (See also `this Python bug report`_)\n\n- Raise exception when entry_point in plugin not callable.\n  This raises an informative error when a plugin fails to load because its\n  entry_point is not callable, which can happen with a plugin which is buggy or\n  not updated for the current version of flake8. This is nicer than raising a\n  `PicklingError` about failing to pickle a module (See also `GitLab164`_)\n\n- Fix `` noqa`` comments followed by a ``:`` and explanation broken by\n  3.0.0 (See also `GitLab178`_)\n\n- Always open our output file in append mode so we do not overwrite log\n  messages. (See also `GitLab193`_)\n\n- When normalizing path values read from configuration, keep in context the\n  directory where the configuration was found so that relative paths work.\n  (See also `GitLab194`_)\n\n- Fix issue where users were unable to ignore plugin errors that were on\n  by default. (See also `GitLab195`_)\n\n- Fix our legacy API StyleGuide's ``init_report`` method to actually override\n  the previous formatter. (See also `GitLab200`_)\n\n\n.. links\n.. _GitLab164:\n    https://gitlab.com/pycqa/flake8/issues/164\n.. _GitLab178:\n    https://gitlab.com/pycqa/flake8/issues/178\n.. _GitLab193:\n    https://gitlab.com/pycqa/flake8/issues/193\n.. _GitLab194:\n    https://gitlab.com/pycqa/flake8/issues/193\n.. _GitLab195:\n    https://gitlab.com/pycqa/flake8/issues/195\n.. _GitLab200:\n    https://gitlab.com/pycqa/flake8/issues/200\n.. _this Python bug report:\n    https://bugs.python.org/issue27649\n\n\n", "1.6.1": "------------------\n\n- fixed the mercurial hook, a change from a previous patch was not properly\n  applied\n- fixed an assumption about warnings/error messages that caused an exception\n  to be thrown when McCabe is used\n\n\n", "2.5.2": "------------------\n\n- **Bug** Parse ``output_file`` and ``enable_extensions`` from config files\n\n- **Improvement** Raise upper bound on mccabe plugin to allow for version\n  0.4.0\n\n\n", "2.6.2": "------------------\n\n- **Bug** Fix packaging error during release process.\n\n\n", "3.0.4": "-------------------\n\n- Side-step a Pickling Error when using Flake8 with multiprocessing on Unix\n  systems. (See also `GitLab164`_)\n\n- Fix an Attribute Error raised when dealing with Invalid Syntax. (See also\n  `GitLab203`_)\n\n- Fix an unhandled Syntax Error when tokenizing files. (See also\n  `GitLab205`_)\n\n\n.. links\n.. _GitLab164:\n    https://gitlab.com/pycqa/flake8/issues/164\n.. _GitLab203:\n    https://gitlab.com/pycqa/flake8/issues/203\n.. _GitLab205:\n    https://gitlab.com/pycqa/flake8/issues/205\n\n\n", "3.4.0": "-------------------\n\nYou can view the `3.4.0 milestone`_ on GitLab for more details.\n\n- Refine logic around ``--select`` and ``--ignore`` when combined with the\n  default values for each. (See also `GitLab318`_)\n\n- Handle spaces as an alternate separate for error codes, e.g.,\n  ``--ignore 'E123 E234'``. (See also `GitLab329`_)\n\n- Filter out empty select and ignore codes, e.g., ``--ignore E123,,E234``.\n  (See also `GitLab330`_)\n\n- Specify dependencies appropriately in ``setup.py`` (See also `Gitlab341_`)\n\n- Fix bug in parsing ``--quiet`` and ``--verbose`` from config files.\n  (See also `GitLab!193`_)\n\n- Remove unused import of ``os`` in the git hook template (See also\n  `GitLab!194`_)\n\n.. all links\n.. _3.4.0 milestone:\n    https://gitlab.com/pycqa/flake8/milestones/18\n\n.. issue links\n.. _GitLab318:\n    https://gitlab.com/pycqa/flake8/issues/318\n.. _GitLab329:\n    https://gitlab.com/pycqa/flake8/issues/329\n.. _GitLab330:\n    https://gitlab.com/pycqa/flake8/issues/330\n.. _GitLab341:\n    https://gitlab.com/pycqa/flake8/issues/341\n\n.. merge request links\n.. _GitLab!193:\n    https://gitlab.com/pycqa/flake8/merge_requests/193\n.. _GitLab!194:\n    https://gitlab.com/pycqa/flake8/merge_requests/194\n\n\n", "2.5.4": "------------------\n\n- **Bug** Missed an attribute rename during the v2.5.3 release.\n\n\n", "3.1.1": "-------------------\n\nYou can view the `3.1.1 milestone`_ on GitLab for more details.\n\n- Do not attempt to install/distribute a ``man`` file with the Python package;\n  leave this for others to do. (See also `GitLab254`_)\n\n- Fix packaging bug where wheel version constraints specified in setup.cfg did\n  not match the constraints in setup.py. (See also `GitLab255`_)\n\n.. links\n.. _3.1.1 milestone:\n    https://gitlab.com/pycqa/flake8/milestones/13\n.. _GitLab254:\n    https://gitlab.com/pycqa/flake8/issues/254\n.. _GitLab255:\n    https://gitlab.com/pycqa/flake8/issues/255\n\n\n", "2.4.0": "------------------\n\n- **Bug** Print filenames when using multiprocessing and ``-q`` option.\n  (`GitLab31`_)\n\n- **Bug** Put upper cap on dependencies. The caps for 2.4.0 are:\n\n  - ``pep8 < 1.6`` (Related to `GitLab35`_)\n\n  - ``mccabe < 0.4``\n\n  - ``pyflakes < 0.9``\n\n  See also `GitLab32`_\n\n- **Bug** Files excluded in a config file were not being excluded when flake8\n  was run from a git hook. (`GitHub2`_)\n\n- **Improvement** Print warnings for users who are providing mutually\n  exclusive options to flake8. (`GitLab8`_, `GitLab!18`_)\n\n- **Feature** Allow git hook configuration to live in ``.git/config``.\n  See the updated `VCS hooks docs`_ for more details. (`GitLab!20`_)\n\n.. _GitHub2: https://github.com/pycqa/flake8/pull/2\n.. _GitLab8: https://gitlab.com/pycqa/flake8/issues/8\n.. _GitLab31: https://gitlab.com/pycqa/flake8/issues/31\n.. _GitLab32: https://gitlab.com/pycqa/flake8/issues/32\n.. _GitLab35: https://gitlab.com/pycqa/flake8/issues/35\n.. _GitLab!18: https://gitlab.com/pycqa/flake8/merge_requests/18\n.. _GitLab!20: https://gitlab.com/pycqa/flake8/merge_requests/20\n.. _VCS hooks docs: https://flake8.readthedocs.org/en/latest/vcs.html\n\n\n", "1.3.1": "------------------\n\n- fixed support for Python 2.5\n\n\n", "2.2.1": "------------------\n\n- Turn off multiple jobs by default. To enable automatic use of all CPUs, use\n  ``--jobs=auto``. Fixes 155 and 154.\n\n\n"}, "py": {"1.4.17": "==================================================\n\n- make py.io.TerminalWriter() prefer colorama if it is available\n  and avoid empty lines when separator-lines are printed by\n  being defensive and reducing the working terminalwidth by 1\n\n- introduce optional \"expanduser\" argument to py.path.local\n  to that local(\"~\", expanduser=True) gives the home\n  directory of \"user\".\n\n", "1.0.0b7": "=============================================\n\n* renamed py.test.xfail back to py.test.mark.xfail to avoid\n  two ways to decorate for xfail\n\n* re-added py.test.mark decorator for setting keywords on functions\n  (it was actually documented so removing it was not nice)\n\n* remove scope-argument from request.addfinalizer() because\n  request.cached_setup has the scope arg. TOOWTDI.\n\n* perform setup finalization before reporting failures\n\n* apply modified patches from Andreas Kloeckner to allow\n  test functions to have no func_code (22) and to make\n  \"-k\" and function keywords work  (20)\n\n* apply patch from Daniel Peolzleithner (issue 23)\n\n* resolve issue 18, multiprocessing.Manager() and\n  redirection clash\n\n* make __name__ == \"__channelexec__\" for remote_exec code\n\n", "1.4.32": "====================================================================\n\n- fix issue70: added ability to copy all stat info in py.path.local.copy.\n\n- make TerminalWriter.fullwidth a property.  This results in the correct\n  value when the terminal gets resized.\n\n- update supported html tags to include recent additions.\n  Thanks Denis Afonso for the PR.\n\n- Remove internal code in ``Source.compile`` meant to support earlier Python 3 versions that produced the side effect\n  of leaving ``None`` in ``sys.modules`` when called (see pytest-dev/pytest2103).\n  Thanks Bruno Oliveira for the PR.\n\n", "1.4.15": "==================================================\n\n- majorly speed up some common calling patterns with\n  LocalPath.listdir()/join/check/stat functions considerably.\n\n- fix an edge case with fnmatch where a glob style pattern appeared\n  in an absolute path.\n\n", "1.4.8": "==================================================\n\n- fix issue 13 - correct handling of the tag name object in xmlgen\n- fix issue 14 - support raw attribute values in xmlgen\n- fix windows terminalwriter printing/re-line problem\n- update distribute_setup.py to 0.6.27\n\n", "1.3.2": "==================================================\n\nNew features\n++++++++++++++++++\n\n- fix issue103:  introduce py.test.raises as context manager, examples::\n\n    with py.test.raises(ZeroDivisionError):\n        x = 0\n        1 / x\n\n    with py.test.raises(RuntimeError) as excinfo:\n        call_something()\n\n     you may do extra checks on excinfo.value|type|traceback here\n\n  (thanks Ronny Pfannschmidt)\n\n- Funcarg factories can now dynamically apply a marker to a\n  test invocation.  This is for example useful if a factory\n  provides parameters to a test which are expected-to-fail::\n\n    def pytest_funcarg__arg(request):\n        request.applymarker(py.test.mark.xfail(reason=\"flaky config\"))\n        ...\n\n    def test_function(arg):\n        ...\n\n- improved error reporting on collection and import errors. This makes\n  use of a more general mechanism, namely that for custom test item/collect\n  nodes ``node.repr_failure(excinfo)`` is now uniformly called so that you can\n  override it to return a string error representation of your choice\n  which is going to be reported as a (red) string.\n\n- introduce '--junitprefix=STR' option to prepend a prefix\n  to all reports in the junitxml file.\n\nBug fixes / Maintenance\n++++++++++++++++++++++++++\n\n- make tests and the ``pytest_recwarn`` plugin in particular fully compatible\n  to Python2.7 (if you use the ``recwarn`` funcarg warnings will be enabled so that\n  you can properly check for their existence in a cross-python manner).\n- refine --pdb: ignore xfailed tests, unify its TB-reporting and\n  don't display failures again at the end.\n- fix assertion interpretation with the ** operator (thanks Benjamin Peterson)\n- fix issue105 assignment on the same line as a failing assertion (thanks Benjamin Peterson)\n- fix issue104 proper escaping for test names in junitxml plugin (thanks anonymous)\n- fix issue57 -f|--looponfail to work with xpassing tests (thanks Ronny)\n- fix issue92 collectonly reporter and --pastebin (thanks Benjamin Peterson)\n- fix py.code.compile(source) to generate unique filenames\n- fix assertion re-interp problems on PyPy, by defering code\n  compilation to the (overridable) Frame.eval class. (thanks Amaury Forgeot)\n- fix py.path.local.pyimport() to work with directories\n- streamline py.path.local.mkdtemp implementation and usage\n- don't print empty lines when showing junitxml-filename\n- add optional boolean ignore_errors parameter to py.path.local.remove\n- fix terminal writing on win32/python2.4\n- py.process.cmdexec() now tries harder to return properly encoded unicode objects\n  on all python versions\n- install plain py.test/py.which scripts also for Jython, this helps to\n  get canonical script paths in virtualenv situations\n- make path.bestrelpath(path) return \".\", note that when calling\n  X.bestrelpath the assumption is that X is a directory.\n- make initial conftest discovery ignore \"--\" prefixed arguments\n- fix resultlog plugin when used in an multicpu/multihost xdist situation\n  (thanks Jakub Gustak)\n- perform distributed testing related reporting in the xdist-plugin\n  rather than having dist-related code in the generic py.test\n  distribution\n- fix homedir detection on Windows\n- ship distribute_setup.py version 0.6.13\n\n", "1.0.0b3": "=============================================\n\n* plugin classes are removed: one now defines\n  hooks directly in conftest.py or global pytest_*.py\n  files.\n\n* added new pytest_namespace(config) hook that allows\n  to inject helpers directly to the py.test.* namespace.\n\n* documented and refined many hooks\n\n* added new style of generative tests via\n  pytest_generate_tests hook that integrates\n  well with function arguments.\n\n\n", "1.0.2": "=====================================\n\n* fixing packaging issues, triggered by fedora redhat packaging,\n  also added doc, examples and contrib dirs to the tarball.\n\n* added a documentation link to the new django plugin.\n\n", "1.4.34": "====================================================================\n\n- fix issue119 / pytest issue708 where tmpdir may fail to make numbered directories\n  when the filesystem is case-insensitive.\n\n", "1.4.20": "==================================================\n\n- ignore unicode decode errors in xmlescape.  Thanks Anatoly Bubenkoff.\n\n- on python2 modify traceback.format_exception_only to match python3 \n  behaviour, namely trying to print unicode for Exception instances\n\n- use a safer way for serializing exception reports (helps to fix\n  pytest issue413)\n\n", "1.4.6": "==================================================\n\n- help to fix pytest issue99: unify output of \n  ExceptionInfo.getrepr(style=\"native\") with ...(style=\"long\")\n- fix issue7: source.getstatementrange() now raises proper error\n  if no valid statement can be found\n- fix issue8: fix code and tests of svnurl/svnwc to work on subversion 1.7 - \n  note that path.status(updates=1) will not properly work svn-17's status \n  --xml output is broken.\n- make source.getstatementrange() more resilent about non-python code frames\n  (as seen from jnja2)\n- make trackeback recursion detection more resilent\n  about the eval magic of a decorator library\n- iniconfig: add support for ; as comment starter\n- properly handle lists in xmlgen on python3\n- normalize py.code.getfslineno(obj) to always return a (string, int) tuple\n  defaulting to (\"\", -1) respectively if no source code can be found for obj.\n\n", "1.0.0": "=====================================\n\n* more terse reporting try to show filesystem path relatively to current dir\n* improve xfail output a bit\n\n", "1.1.0": "=====================================\n\n- introduce automatic plugin registration via 'pytest11'\n  entrypoints via setuptools' pkg_resources.iter_entry_points\n\n- fix py.test dist-testing to work with execnet >= 1.0.0b4\n\n- re-introduce py.test.cmdline.main() for better backward compatibility\n\n- svn paths: fix a bug with path.check(versioned=True) for svn paths,\n  allow '%' in svn paths, make svnwc.update() default to interactive mode\n  like in 1.0.x and add svnwc.update(interactive=False) to inhibit interaction.\n\n- refine distributed tarball to contain test and no pyc files\n\n- try harder to have deprecation warnings for py.compat.* accesses\n  report a correct location\n\n", "1.4.19": "==================================================\n\n- merge in apipkg fixes\n\n- some micro-optimizations in py/_code/code.py for speeding\n  up pytest runs.  Thanks Alex Gaynor for initiative.\n\n- check PY_COLORS=1 or PY_COLORS=0 to force coloring/not-coloring\n  for py.io.TerminalWriter() independently from capabilities\n  of the output file.  Thanks Marc Abramowitz for the PR.\n\n- some fixes to unicode handling in assertion handling.\n  Thanks for the PR to Floris Bruynooghe.  (This helps\n  to fix pytest issue 319).\n\n- depend on setuptools presence, remove distribute_setup\n\n", "1.4.9": "==================================================\n\n- fix bug of path.visit() which would not recognize glob-style patterns\n  for the \"rec\" recursion argument\n- changed iniconfig parsing to better conform, now the chars \";\"\n  and \"\" only mark a comment at the stripped start of a line\n- include recent apipkg-1.2\n- change internal terminalwriter.line/reline logic to more nicely\n  support file spinners\n\n", "1.4.29": "==================================================\n\n- fix issue55: revert a change to the statement finding algorithm\n  which is used by pytest for generating tracebacks.\n  Thanks Daniel Hahler for initial analysis.\n\n- fix pytest issue254 for when traceback rendering can't\n  find valid source code.  Thanks Ionel Cristian Maries.\n\n\n", "1.4.33": "====================================================================\n\n- avoid imports in calls to py.path.local().fnmatch(). Thanks Andreas Pelme for\n  the PR.\n\n- fix issue106: Naive unicode encoding when calling fspath() in python2. Thanks Tiago Nobrega for the PR.\n\n- fix issue110: unittest.TestCase.assertWarns fails with py imported.\n\n", "1.4.14": "==================================================\n\n- fix dupfile to work with files that don't\n  carry a mode. Thanks Jason R. Coombs.\n\n", "1.4.4": "==================================================\n\n- a few fixes and assertion related refinements for pytest-2.1\n- guard py.code.Code and getfslineno against bogus input\n  and make py.code.Code objects for object instance\n  by looking up their __call__ function.\n- make exception presentation robust against invalid current cwd\n\n", "0.9.1": "===============================\n\nThis is a fairly complete list of changes between 0.9 and 0.9.1, which can\nserve as a reference for developers.\n\n* allowing + signs in py.path.svn urls [39106]\n* fixed support for Failed exceptions without excinfo in py.test [39340]\n* added support for killing processes for Windows (as well as platforms that\n  support os.kill) in py.misc.killproc [39655]\n* added setup/teardown for generative tests to py.test [40702]\n* added detection of FAILED TO LOAD MODULE to py.test [40703, 40738, 40739]\n* fixed problem with calling .remove() on wcpaths of non-versioned files in\n  py.path [44248]\n* fixed some import and inheritance issues in py.test [41480, 44648, 44655]\n* fail to run greenlet tests when pypy is available, but without stackless\n  [45294]\n* small fixes in rsession tests [45295]\n* fixed issue with 2.5 type representations in py.test [45483, 45484]\n* made that internal reporting issues displaying is done atomically in py.test\n  [45518]\n* made that non-existing files are igored by the py.lookup script [45519]\n* improved exception name creation in py.test [45535]\n* made that less threads are used in execnet [merge in 45539]\n* removed lock required for atomical reporting issue displaying in py.test\n  [45545]\n* removed globals from execnet [45541, 45547]\n* refactored cleanup mechanics, made that setDaemon is set to 1 to make atexit\n  get called in 2.5 (py.execnet) [45548]\n* fixed bug in joining threads in py.execnet's servemain [45549]\n* refactored py.test.rsession tests to not rely on exact output format anymore\n  [45646]\n* using repr() on test outcome [45647]\n* added 'Reason' classes for py.test.skip() [45648, 45649]\n* killed some unnecessary sanity check in py.test.collect [45655]\n* avoid using os.tmpfile() in py.io.fdcapture because on Windows it's only\n  usable by Administrators [45901]\n* added support for locking and non-recursive commits to py.path.svnwc [45994]\n* locking files in py.execnet to prevent CPython from segfaulting [46010]\n* added export() method to py.path.svnurl\n* fixed -d -x in py.test [47277]\n* fixed argument concatenation problem in py.path.svnwc [49423]\n* restore py.test behaviour that it exits with code 1 when there are failures\n  [49974]\n* don't fail on html files that don't have an accompanying .txt file [50606]\n* fixed 'utestconvert.py < input' [50645]\n* small fix for code indentation in py.code.source [50755]\n* fix _docgen.py documentation building [51285]\n* improved checks for source representation of code blocks in py.test [51292]\n* added support for passing authentication to py.path.svn* objects [52000,\n  52001]\n* removed sorted() call for py.apigen tests in favour of [].sort() to support\n  Python 2.3 [52481]\n", "1.4.13": "==================================================\n\n- fix getting statementrange/compiling a file ending\n  in a comment line without newline (on python2.5)\n- for local paths you can pass \"mode=True\" to a copy()\n  in order to copy permission bits (underlying mechanism\n  is using shutil.copymode)\n- add paths arguments to py.path.local.sysfind to restrict\n  search to the diretories in the path.\n- add isdir/isfile/islink to path.stat() objects allowing to perform\n  multiple checks without calling out multiple times\n- drop py.path.local.__new__ in favour of a simpler __init__\n- iniconfig: allow \"name:value\" settings in config files, no space after\n  \"name\" required\n- fix issue 27 - NameError in unlikely untested case of saferepr\n\n\n", "1.0.1": "=====================================\n\n* added a 'pytest_nose' plugin which handles nose.SkipTest,\n  nose-style function/method/generator setup/teardown and\n  tries to report functions correctly.\n\n* capturing of unicode writes or encoded strings to sys.stdout/err\n  work better, also terminalwriting was adapted and somewhat\n  unified between windows and linux.\n\n* improved documentation layout and content a lot\n\n* added a \"--help-config\" option to show conftest.py / ENV-var names for\n  all longopt cmdline options, and some special conftest.py variables.\n  renamed 'conf_capture' conftest setting to 'option_capture' accordingly.\n\n* fix issue 27: better reporting on non-collectable items given on commandline\n  (e.g. pyc files)\n\n* fix issue 33: added --version flag (thanks Benjamin Peterson)\n\n* fix issue 32: adding support for \"incomplete\" paths to wcpath.status()\n\n* \"Test\" prefixed classes are *not* collected by default anymore if they\n  have an __init__ method\n\n* monkeypatch setenv() now accepts a \"prepend\" parameter\n\n* improved reporting of collection error tracebacks\n\n* simplified multicall mechanism and plugin architecture,\n  renamed some internal methods and argnames\n\n", "1.4.3": "==================================================\n\n- fix terminal coloring issue for skipped tests (thanks Amaury)\n- fix issue4 - large calls to ansi_print (thanks Amaury)\n\n", "1.3.1": "==================================================\n\nNew features\n++++++++++++++++++\n\n- issue91: introduce new py.test.xfail(reason) helper\n  to imperatively mark a test as expected to fail. Can\n  be used from within setup and test functions. This is\n  useful especially for parametrized tests when certain\n  configurations are expected-to-fail.  In this case the\n  declarative approach with the py.test.mark.xfail cannot\n  be used as it would mark all configurations as xfail.\n\n- issue102: introduce new --maxfail=NUM option to stop\n  test runs after NUM failures.  This is a generalization\n  of the '-x' or '--exitfirst' option which is now equivalent\n  to '--maxfail=1'.  Both '-x' and '--maxfail' will\n  now also print a line near the end indicating the Interruption.\n\n- issue89: allow py.test.mark decorators to be used on classes\n  (class decorators were introduced with python2.6) and\n  also allow to have multiple markers applied at class/module level\n  by specifying a list.\n\n- improve and refine letter reporting in the progress bar:\n  .  pass\n  f  failed test\n  s  skipped tests (reminder: use for dependency/platform mismatch only)\n  x  xfailed test (test that was expected to fail)\n  X  xpassed test (test that was expected to fail but passed)\n\n  You can use any combination of 'fsxX' with the '-r' extended\n  reporting option. The xfail/xpass results will show up as\n  skipped tests in the junitxml output - which also fixes\n  issue99.\n\n- make py.test.cmdline.main() return the exitstatus instead of raising\n  SystemExit and also allow it to be called multiple times.  This of\n  course requires that your application and tests are properly teared\n  down and don't have global state.\n\nFixes / Maintenance\n++++++++++++++++++++++\n\n- improved traceback presentation:\n  - improved and unified reporting for \"--tb=short\" option\n  - Errors during test module imports are much shorter, (using --tb=short style)\n  - raises shows shorter more relevant tracebacks\n  - --fulltrace now more systematically makes traces longer / inhibits cutting\n\n- improve support for raises and other dynamically compiled code by\n  manipulating python's linecache.cache instead of the previous\n  rather hacky way of creating custom code objects.  This makes\n  it seemlessly work on Jython and PyPy where it previously didn't.\n\n- fix issue96: make capturing more resilient against Control-C\n  interruptions (involved somewhat substantial refactoring\n  to the underlying capturing functionality to avoid race\n  conditions).\n\n- fix chaining of conditional skipif/xfail decorators - so it works now\n  as expected to use multiple py.test.mark.skipif(condition) decorators,\n  including specific reporting which of the conditions lead to skipping.\n\n- fix issue95: late-import zlib so that it's not required\n  for general py.test startup.\n\n- fix issue94: make reporting more robust against bogus source code\n  (and internally be more careful when presenting unexpected byte sequences)\n\n\n", "1.4.18": "==================================================\n\n- introduce path.ensure_dir() as a synonym for ensure(..., dir=1)\n\n- some unicode/python3 related fixes wrt to path manipulations\n  (if you start passing unicode particular in py2 you might \n  still get problems, though)\n\n", "1.4.28": "==================================================\n\n- fix issue64 -- dirpath regression when \"abs=True\" is passed.\n  Thanks Gilles Dartiguelongue.\n\n", "0.9.2": "===============================\n\n* refined installation and metadata, created new setup.py,\n  now based on setuptools/ez_setup (thanks to Ralf Schmitt\n  for his support).\n\n* improved the way of making py.* scripts available in\n  windows environments, they are now added to the\n  Scripts directory as \".cmd\" files.\n\n* py.path.svnwc.status() now is more complete and\n  uses xml output from the 'svn' command if available\n  (Guido Wesdorp)\n\n* fix for py.path.svn* to work with svn 1.5\n  (Chris Lamb)\n\n* fix path.relto(otherpath) method on windows to\n  use normcase for checking if a path is relative.\n\n* py.test's traceback is better parseable from editors\n  (follows the filenames:LINENO: MSG convention)\n  (thanks to Osmo Salomaa)\n\n* fix to javascript-generation, \"py.test --runbrowser\"\n  should work more reliably now\n\n* removed previously accidentally added\n  py.test.broken and py.test.notimplemented helpers.\n\n* there now is a py.__version__ attribute\n\n", "1.4.7": "==================================================\n\n- fix issue11 - own test failure with python3.3 / Thanks Benjamin Peterson\n- help fix pytest issue 102\n\n", "1.4.1": "==================================================\n\n- fix issue1 - py.error.* classes to be pickleable\n\n- fix issue2 - on windows32 use PATHEXT as the list of potential\n  extensions to find find binaries with py.path.local.sysfind(commandname)\n\n- fix (pytest-) issue10 and refine assertion reinterpretation\n  to avoid breaking if the __nonzero__ of an object fails\n\n- fix (pytest-) issue17 where python3 does not like \"import *\"\n  leading to misrepresentation of import-errors in test modules\n\n- fix py.error.* attribute pypy access issue\n\n- allow path.samefile(arg) to succeed when arg is a relative filename\n\n- fix (pytest-) issue20 path.samefile(relpath) works as expected now\n\n- fix (pytest-) issue8 len(long_list) now shows the lenght of the list\n\n", "1.4.24": "==================================================\n\n- Fix retrieving source when an else: line has an other statement on\n  the same line.\n\n- add localpath read_text/write_text/read_bytes/write_bytes methods\n  as shortcuts and clearer bytes/text interfaces for read/write.\n  Adapted from a PR from Paul Moore.\n\n\n", "1.0.0b9": "=====================================\n\n* cleanly handle and report final teardown of test setup\n\n* fix svn-1.6 compat issue with py.path.svnwc().versioned()\n  (thanks Wouter Vanden Hove)\n\n* setup/teardown or collection problems now show as ERRORs\n  or with big \"E\"'s in the progress lines.  they are reported\n  and counted separately.\n\n* dist-testing: properly handle test items that get locally\n  collected but cannot be collected on the remote side - often\n  due to platform/dependency reasons\n\n* simplified py.test.mark API - see keyword plugin documentation\n\n* integrate better with logging: capturing now by default captures\n  test functions and their immediate setup/teardown in a single stream\n\n* capsys and capfd funcargs now have a readouterr() and a close() method\n  (underlyingly py.io.StdCapture/FD objects are used which grew a\n  readouterr() method as well to return snapshots of captured out/err)\n\n* make assert-reinterpretation work better with comparisons not\n  returning bools (reported with numpy from thanks maciej fijalkowski)\n\n* reworked per-test output capturing into the pytest_iocapture.py plugin\n  and thus removed capturing code from config object\n\n* item.repr_failure(excinfo) instead of item.repr_failure(excinfo, outerr)\n\n\n", "1.4.27": "==================================================\n\n- fix issue59: point to new repo site\n\n- allow a new ensuresyspath=\"append\" mode for py.path.local.pyimport()\n  so that a neccessary import path is appended instead of prepended to\n  sys.path \n\n- strike undocumented, untested argument to py.path.local.pypkgpath\n\n- speed up py.path.local.dirpath by a factor of 10\n\n", "1.4.31": "==================================================\n\n- fix local().copy(dest, mode=True) to also work\n  with unicode.\n\n- pass better error message with svn EEXIST paths\n\n", "1.4.11": "==================================================\n\n- use _ast to determine statement ranges when printing tracebacks -\n  avoiding multi-second delays on some large test modules\n- fix an internal test to not use class-denoted pytest_funcarg__\n- fix a doc link to bug tracker\n- try to make terminal.write() printing more robust against\n  unicodeencode/decode problems, amend according test\n- introduce py.builtin.text and py.builtin.bytes\n  to point to respective str/unicode (py2) and bytes/str (py3) types\n- fix error handling on win32/py33 for ENODIR \n\n", "1.3.4": "==================================================\n\n- fix issue111: improve install documentation for windows\n- fix issue119: fix custom collectability of __init__.py as a module\n- fix issue116: --doctestmodules work with __init__.py files as well\n- fix issue115: unify internal exception passthrough/catching/GeneratorExit\n- fix issue118: new --tb=native for presenting cpython-standard exceptions\n\n", "1.1.1": "=====================================\n\n- moved dist/looponfailing from py.test core into a new\n  separately released pytest-xdist plugin.\n\n- new junitxml plugin: --junitxml=path will generate a junit style xml file\n  which is processable e.g. by the Hudson CI system.\n\n- new option: --genscript=path will generate a standalone py.test script\n  which will not need any libraries installed.  thanks to Ralf Schmitt.\n\n- new option: --ignore will prevent specified path from collection.\n  Can be specified multiple times.\n\n- new option: --confcutdir=dir will make py.test only consider conftest\n  files that are relative to the specified dir.\n\n- new funcarg: \"pytestconfig\" is the pytest config object for access\n  to command line args and can now be easily used in a test.\n\n- install 'py.test' and `py.which` with a ``-$VERSION`` suffix to\n  disambiguate between Python3, python2.X, Jython and PyPy installed versions.\n\n- new \"pytestconfig\" funcarg allows access to test config object\n\n- new \"pytest_report_header\" hook can return additional lines\n  to be displayed at the header of a test run.\n\n- (experimental) allow \"py.test path::name1::name2::...\" for pointing\n  to a test within a test collection directly.  This might eventually\n  evolve as a full substitute to \"-k\" specifications.\n\n- streamlined plugin loading: order is now as documented in\n  customize.html: setuptools, ENV, commandline, conftest.\n  also setuptools entry point names are turned to canonical namees (\"pytest_*\")\n\n- automatically skip tests that need 'capfd' but have no os.dup\n\n- allow pytest_generate_tests to be defined in classes as well\n\n- deprecate usage of 'disabled' attribute in favour of pytestmark\n- deprecate definition of Directory, Module, Class and Function nodes\n  in conftest.py files.  Use pytest collect hooks instead.\n\n- collection/item node specific runtest/collect hooks are only called exactly\n  on matching conftest.py files, i.e. ones which are exactly below\n  the filesystem path of an item\n\n- change: the first pytest_collect_directory hook to return something\n  will now prevent further hooks to be called.\n\n- change: figleaf plugin now requires --figleaf to run.  Also\n  change its long command line options to be a bit shorter (see py.test -h).\n\n- change: pytest doctest plugin is now enabled by default and has a\n  new option --doctest-glob to set a pattern for file matches.\n\n- change: remove internal py._* helper vars, only keep py._pydir\n\n- robustify capturing to survive if custom pytest_runtest_setup\n  code failed and prevented the capturing setup code from running.\n\n- make py.test.* helpers provided by default plugins visible early -\n  works transparently both for pydoc and for interactive sessions\n  which will regularly see e.g. py.test.mark and py.test.importorskip.\n\n- simplify internal plugin manager machinery\n- simplify internal collection tree by introducing a RootCollector node\n\n- fix assert reinterpreation that sees a call containing \"keyword=...\"\n\n- fix issue66: invoke pytest_sessionstart and pytest_sessionfinish\n  hooks on slaves during dist-testing, report module/session teardown\n  hooks correctly.\n\n- fix issue65: properly handle dist-testing if no\n  execnet/py lib installed remotely.\n\n- skip some install-tests if no execnet is available\n\n- fix docs, fix internal bin/ script generation\n\n\n", "1.4.10": "==================================================\n\n- terminalwriter: default to encode to UTF8 if no encoding is defined\n  on the output stream\n- issue22: improve heuristic for finding the statementrange in exceptions\n\n", "1.4.22": "==================================================\n\n- refactor class-level registry on ForkedFunc child start/finish\n  event to become instance based (i.e. passed into the constructor)\n\n", "1.4.23": "==================================================\n\n- use newer apipkg version which makes attribute access on\n  alias modules resolve to None rather than an ImportError.\n  This helps with code that uses inspect.getframeinfo()\n  on py34 which causes a complete walk on sys.modules\n  thus triggering the alias module to resolve and blowing\n  up with ImportError.  The negative side is that something\n  like \"py.test.X\" will now result in None instead of \"importerror: pytest\"\n  if pytest is not installed.  But you shouldn't import \"py.test\" \n  anyway anymore.\n\n- adapt one svn test to only check for any exception instead \n  of specific ones because different svn versions cause different\n  errors and we don't care.\n\n\n", "1.3.0": "==================================================\n\n- deprecate --report option in favour of a new shorter and easier to\n  remember -r option: it takes a string argument consisting of any\n  combination of 'xfsX' characters.  They relate to the single chars\n  you see during the dotted progress printing and will print an extra line\n  per test at the end of the test run.  This extra line indicates the exact\n  position or test ID that you directly paste to the py.test cmdline in order\n  to re-run a particular test.\n\n- allow external plugins to register new hooks via the new\n  pytest_addhooks(pluginmanager) hook.  The new release of\n  the pytest-xdist plugin for distributed and looponfailing\n  testing requires this feature.\n\n- add a new pytest_ignore_collect(path, config) hook to allow projects and\n  plugins to define exclusion behaviour for their directory structure -\n  for example you may define in a conftest.py this method::\n\n        def pytest_ignore_collect(path):\n            return path.check(link=1)\n\n  to prevent even a collection try of any tests in symlinked dirs.\n\n- new pytest_pycollect_makemodule(path, parent) hook for\n  allowing customization of the Module collection object for a\n  matching test module.\n\n- extend and refine xfail mechanism:\n  ``py.test.mark.xfail(run=False)`` do not run the decorated test\n  ``py.test.mark.xfail(reason=\"...\")`` prints the reason string in xfail summaries\n  specifiying ``--runxfail`` on command line virtually ignores xfail markers\n\n- expose (previously internal) commonly useful methods:\n  py.io.get_terminal_with() -> return terminal width\n  py.io.ansi_print(...) -> print colored/bold text on linux/win32\n  py.io.saferepr(obj) -> return limited representation string\n\n- expose test outcome related exceptions as py.test.skip.Exception,\n  py.test.raises.Exception etc., useful mostly for plugins\n  doing special outcome interpretation/tweaking\n\n- (issue85) fix junitxml plugin to handle tests with non-ascii output\n\n- fix/refine python3 compatibility (thanks Benjamin Peterson)\n\n- fixes for making the jython/win32 combination work, note however:\n  jython2.5.1/win32 does not provide a command line launcher, see\n  http://bugs.jython.org/issue1491 . See pylib install documentation\n  for how to work around.\n\n- fixes for handling of unicode exception values and unprintable objects\n\n- (issue87) fix unboundlocal error in assertionold code\n\n- (issue86) improve documentation for looponfailing\n\n- refine IO capturing: stdin-redirect pseudo-file now has a NOP close() method\n\n- ship distribute_setup.py version 0.6.10\n\n- added links to the new capturelog and coverage plugins\n\n\n", "1.4.16": "==================================================\n\n- fix issue35 - define __gt__ ordering between a local path\n  and strings\n\n- fix issue36 - make chdir() work even if os.getcwd() fails.\n\n- add path.exists/isdir/isfile/islink shortcuts\n\n- introduce local path.as_cwd() context manager.\n\n- introduce p.write(ensure=1) and p.open(ensure=1)\n  where ensure triggers creation of neccessary parent\n  dirs.\n\n\n", "1.0.0b1": "=============================================\n\n* introduced new \"funcarg\" setup method,\n  see doc/test/funcarg.txt\n\n* introduced plugin architecuture and many\n  new py.test plugins, see\n  doc/test/plugins.txt\n\n* teardown_method is now guaranteed to get\n  called after a test method has run.\n\n* new method: py.test.importorskip(mod,minversion)\n  will either import or call py.test.skip()\n\n* completely revised internal py.test architecture\n\n* new py.process.ForkedFunc object allowing to\n  fork execution of a function to a sub process\n  and getting a result back.\n\nXXX lots of things missing here XXX\n\n", "1.3.3": "==================================================\n\n- fix issue113: assertion representation problem with triple-quoted strings\n  (and possibly other cases)\n- make conftest loading detect that a conftest file with the same\n  content was already loaded, avoids surprises in nested directory structures\n  which can be produced e.g. by Hudson. It probably removes the need to use\n  --confcutdir in most cases.\n- fix terminal coloring for win32\n  (thanks Michael Foord for reporting)\n- fix weirdness: make terminal width detection work on stdout instead of stdin\n  (thanks Armin Ronacher for reporting)\n- remove trailing whitespace in all py/text distribution files\n\n", "1.0.0b8": "=====================================\n\n* pytest_unittest-plugin is now enabled by default\n\n* introduced pytest_keyboardinterrupt hook and\n  refined pytest_sessionfinish hooked, added tests.\n\n* workaround a buggy logging module interaction (\"closing already closed\n  files\").  Thanks to Sridhar Ratnakumar for triggering.\n\n* if plugins use \"py.test.importorskip\" for importing\n  a dependency only a warning will be issued instead\n  of exiting the testing process.\n\n* many improvements to docs:\n  - refined funcargs doc , use the term \"factory\" instead of \"provider\"\n  - added a new talk/tutorial doc page\n  - better download page\n  - better plugin docstrings\n  - added new plugins page and automatic doc generation script\n\n* fixed teardown problem related to partially failing funcarg setups\n  (thanks MrTopf for reporting), \"pytest_runtest_teardown\" is now\n  always invoked even if the \"pytest_runtest_setup\" failed.\n\n* tweaked doctest output for docstrings in py modules,\n  thanks Radomir.\n\n", "1.4.0": "==================================================\n\n- py.test was moved to a separate \"pytest\" package. What remains is\n  a stub hook which will proxy ``import py.test`` to ``pytest``.\n- all command line tools (\"py.cleanup/lookup/countloc/...\" moved \n  to \"pycmd\" package)\n- removed the old and deprecated \"py.magic\" namespace\n- use apipkg-1.1 and make py.apipkg.initpkg|ApiModule available\n- add py.iniconfig module for brain-dead easy ini-config file parsing\n- introduce py.builtin.any()\n- path objects have a .dirname attribute now (equivalent to\n  os.path.dirname(path))\n- path.visit() accepts breadthfirst (bf) and sort options\n- remove deprecated py.compat namespace\n\n", "1.4.12": "==================================================\n\n- fix python2.4 support - for pre-AST interpreters re-introduce \n  old way to find statements in exceptions (closes pytest issue 209)\n- add tox.ini to distribution\n- fix issue23 - print *,** args information in tracebacks,\n  thanks Manuel Jacob\n\n\n", "1.5.0": "=====\n\n- deprecate py.std and remove all internal uses\n- fix 73 turn py.error into an actual module\n- path join to / no longer produces leading double slashes\n- fix 82 - remove unsupportable aliases\n- fix python37 compatibility of path.sysfind on windows by correctly replacing vars\n- turn iniconfig and apipkg into vendored packages and ease de-vendoring for distributions\n- fix 68 remove invalid py.test.ensuretemp references\n- fix 25 - deprecate path.listdir(sort=callable)\n\n", "1.2.0": "=====================================\n\n- refined usage and options for \"py.cleanup\"::\n\n    py.cleanup      remove \"*.pyc\" and \"*$py.class\" (jython) files\n    py.cleanup -e .swp -e .cache  also remove files with these extensions\n    py.cleanup -s   remove \"build\" and \"dist\" directory next to setup.py files\n    py.cleanup -d   also remove empty directories\n    py.cleanup -a   synonym for \"-s -d -e 'pip-log.txt'\"\n    py.cleanup -n   dry run, only show what would be removed\n\n- add a new option \"py.test --funcargs\" which shows available funcargs\n  and their help strings (docstrings on their respective factory function)\n  for a given test path\n\n- display a short and concise traceback if a funcarg lookup fails\n\n- early-load \"conftest.py\" files in non-dot first-level sub directories.\n  allows to conveniently keep and access test-related options in a ``test``\n  subdir and still add command line options.\n\n- fix issue67: new super-short traceback-printing option: \"--tb=line\" will print a single line for each failing (python) test indicating its filename, lineno and the failure value\n\n- fix issue78: always call python-level teardown functions even if the\n  according setup failed.  This includes refinements for calling setup_module/class functions\n  which will now only be called once instead of the previous behaviour where they'd be called\n  multiple times if they raise an exception (including a Skipped exception).  Any exception\n  will be re-corded and associated with all tests in the according module/class scope.\n\n- fix issue63: assume <40 columns to be a bogus terminal width, default to 80\n\n- fix pdb debugging to be in the correct frame on raises-related errors\n\n- update apipkg.py to fix an issue where recursive imports might\n  unnecessarily break importing\n\n- fix plugin links\n\n", "1.4.5": "==================================================\n\n- improve some unicode handling in terminalwriter and capturing\n  (used by pytest)\n\n", "1.4.26": "==================================================\n\n- avoid calling normpath twice in py.path.local\n\n- py.builtin._reraise properly reraises under Python3 now.\n\n- fix issue53 - remove module index, thanks jenisys.\n\n- allow posix path separators when \"fnmatch\" is called.\n  Thanks Christian Long for the complete PR.\n\n", "1.4.21": "==================================================\n\n- ForkedFunc now has class-level register_on_start/on_exit()\n  methods to allow adding information in the boxed process.\n  Thanks Marc Schlaich.\n\n- ForkedFunc in the child opens in \"auto-flush\" mode for\n  stdout/stderr so that when a subprocess dies you can see\n  its output even if it didn't flush itself.\n\n- refactor traceback generation in light of pytest issue 364\n  (shortening tracebacks).   you can now set a new traceback style \n  on a per-entry basis such that a caller can force entries to be \n  isplayed as short or long entries.\n\n- win32: py.path.local.sysfind(name) will preferrably return files with\n  extensions so that if \"X\" and \"X.bat\" or \"X.exe\" is on the PATH,\n  one of the latter two will be returned.\n\n", "1.4.30": "==================================================\n\n- fix issue68 an assert with a  multiline list comprehension \n  was not reported correctly. Thanks Henrik Heibuerger.\n\n\n", "1.4.2": "==================================================\n\n- fix (pytest) issue23 - tmpdir argument now works on Python3.2 and WindowsXP\n  (which apparently starts to offer os.symlink now)\n\n- better error message for syntax errors from compiled code\n\n- small fix to better deal with (un-)colored terminal output on windows\n\n", "1.4.25": "==================================================\n\n- fix issue52: vaguely fix py25 compat of py.path.local (it's not\n  officially supported), also fix docs\n\n- fix pytest issue 589: when checking if we have a recursion error\n  check for the specific \"maximum recursion depth\" text of the exception.\n\n"}, "six": {"1.7.0": "-----\n\n- Pull request 30: Implement six.moves with a PEP 302 meta path hook.\n\n- Pull request 32: Add six.wraps, which is like functools.wraps but always sets\n  the __wrapped__ attribute.\n\n- Pull request 35: Improve add_metaclass, so that it doesn't end up inserting\n  another class into the hierarchy.\n\n- Pull request 34: Add import mappings for dummy_thread.\n\n- Pull request 33: Add import mappings for UserDict and UserList.\n\n- Pull request 31: Select the implementations of dictionary iterator routines\n  at import time for a 20% speed boost.\n\n", "1.0.0": "-----\n\n- Issue 2: u() on Python 2.x now resolves unicode escapes.\n\n- Expose an API for adding mappings to six.moves.\n\n", "1.6.0": "-----\n\n- Raise an AttributeError for every attribute of unimportable modules.\n\n- Issue 56: Make the fake modules six.moves puts into sys.modules appear not to\n  have a __path__ unless they are loaded.\n\n- Pull request 28: Add support for SplitResult.\n\n- Issue 55: Add move mapping for xmlrpc.server.\n\n- Pull request 29: Add move for urllib.parse.splitquery.\n\n", "1.7.2": "-----\n\n- Issue 72: Fix installing on Python 2.\n\n", "1.1.0": "-----\n\n- Add the int2byte function.\n\n- Add compatibility mappings for iterators over the keys, values, and items of a\n  dictionary.\n\n- Fix six.MAXSIZE on platforms where sizeof(long) != sizeof(Py_ssize_t).\n\n- Issue 3: Add six.moves mappings for filter, map, and zip.\n\n", "1.7.1": "-----\n\n- Issue 71: Make the six.moves meta path importer handle reloading of the six\n  module gracefully.\n\n", "1.5.2": "-----\n\n- Issue 53: Make the fake modules six.moves puts into sys.modules appear not to\n  have a __name__ unless they are loaded.\n\n", "1.4.1": "-----\n\n- Issue 32: urllib module wrappings don't work when six is not a toplevel file.\n\n", "1.0": "----------\n\n- Reworked six into one .py file.  This breaks imports.  Please tell me if you\n  are interested in an import compatibility layer.\n", "1.7.3": "-----\n\n- Issue 77: Fix import six on Python 3.4 with a custom loader.\n\n- Issue 74: `six.moves.xmlrpc_server` should map to `SimpleXMLRPCServer` on Python\n  2 as documented not `xmlrpclib`.\n\n", "1.8.0": "-----\n\n- Issue 90: Add `six.moves.shlex_quote`.\n\n- Issue 59: Add `six.moves.intern`.\n\n- Add `six.urllib.parse.uses_(fragment|netloc|params|query|relative)`.\n\n- Issue 88: Fix add_metaclass when the class has `__slots__` containing\n  `__weakref__` or `__dict__`.\n\n- Issue 89: Make six use absolute imports.\n\n- Issue 85: Always accept *updated* and *assigned* arguments for `wraps()`.\n\n- Issue 86: In `reraise()`, instantiate the exception if the second argument is\n  `None`.\n\n- Pull request 45: Add `six.moves.email_mime_nonmultipart`.\n\n- Issue 81: Add `six.urllib.request.splittag` mapping.\n\n- Issue 80: Add `six.urllib.request.splituser` mapping.\n\n", "1.4.0": "-----\n\n- Issue 31: Add six.moves mapping for UserString.\n\n- Pull request 12: Add six.add_metaclass, a decorator for adding a metaclass to\n  a class.\n\n- Add six.moves.zip_longest and six.moves.filterfalse, which correspond\n  respectively to itertools.izip_longest and itertools.ifilterfalse on Python 2\n  and itertools.zip_longest and itertools.filterfalse on Python 3.\n\n- Issue 25: Add the unichr function, which returns a string for a Unicode\n  codepoint.\n\n- Issue 26: Add byte2int function, which complements int2byte.\n\n- Add a PY2 constant with obvious semantics.\n\n- Add helpers for indexing and iterating over bytes: iterbytes and indexbytes.\n\n- Add create_bound_method() wrapper.\n\n- Issue 23: Allow multiple base classes to be passed to with_metaclass.\n\n- Issue 24: Add six.moves.range alias. This exactly the same as the current\n  xrange alias.\n\n- Pull request 5: Create six.moves.urllib, which contains abstractions for a\n  bunch of things which are in urllib in Python 3 and spread out across urllib,\n  urllib2, and urlparse in Python 2.\n\n", "1.5.1": "-----\n\n- Issue 51: Hack around the Django autoreloader after recent six.moves changes.\n\n", "1.5.0": "-----\n\n- Removed support for Python 2.4. This is because py.test no longer supports\n  2.4.\n\n- Fix various import problems including issues 19 and 41. six.moves modules\n  are now lazy wrappers over the underlying modules instead of the actual\n  modules themselves.\n\n- Issue 49: Add six.moves mapping for tkinter.ttk.\n\n- Pull request 24: Add __dir__ special method to six.moves modules.\n\n- Issue 47: Fix add_metaclass on classes with a string for the __slots__\n  variable.\n\n- Issue 44: Fix interpretation of backslashes on Python 2 in the u() function.\n\n- Pull request 21: Add import mapping for urllib's proxy_bypass function.\n\n- Issue 43: Add import mapping for the Python 2 xmlrpclib module.\n\n- Issue 39: Add import mapping for the Python 2 thread module.\n\n- Issue 40: Add import mapping for the Python 2 gdbm module.\n\n- Issue 35: On Python versions less than 2.7, print_ now encodes unicode\n  strings when outputing to standard streams. (Python 2.7 handles this\n  automatically.)\n\n", "1.3.0": "-----\n\n- Issue 21: Add methods to access the closure and globals of a function.\n\n- In six.iter(items/keys/values/lists), passed keyword arguments through to the\n  underlying method.\n\n- Add six.iterlists().\n\n- Issue 20: Fix tests if tkinter is not available.\n\n- Issue 17: Define callable to be builtin callable when it is available again\n  in Python 3.2+.\n\n- Issue 16: Rename Python 2 exec_'s arguments, so casually calling exec_ with\n  keyword arguments will raise.\n\n- Issue 14: Put the six.moves package in sys.modules based on the name six is\n  imported under.\n\n- Fix Jython detection.\n\n- Pull request 4: Add email_mime_multipart, email_mime_text, and\n  email_mime_base to six.moves.\n\n", "1.10.0": "------\n\n- Issue 122: Improve the performance of `six.int2byte` on Python 3.\n\n- Pull request 55 and issue 99: Don't add the `winreg` module to `six.moves`\n  on non-Windows platforms.\n\n- Pull request 60 and issue 108: Add `six.moves.getcwd` and\n  `six.moves.getcwdu`.\n\n- Pull request 64: Add `create_unbound_method` to create unbound methods.\n\n", "1.9.0": "-----\n\n- Issue 106: Support the `flush` parameter to `six.print_`.\n\n- Pull request 48 and issue 15: Add the `python_2_unicode_compatible`\n  decorator.\n\n- Pull request 57 and issue 50: Add several compatibility methods for unittest\n  assertions that were renamed between Python 2 and 3.\n\n- Issue 105 and pull request 58: Ensure `six.wraps` respects the *updated* and\n  *assigned* arguments.\n\n- Issue 102: Add `raise_from` to abstract out Python 3's raise from syntax.\n\n- Issue 97: Optimize `six.iterbytes` on Python 2.\n\n- Issue 98: Fix `six.moves` race condition in multi-threaded code.\n\n- Pull request 51: Add `six.view(keys|values|itmes)`, which provide dictionary\n  views on Python 2.7+.\n\n- Issue 112: `six.moves.reload_module` now uses the importlib module on\n  Python 3.4+.\n\n", "1.6.1": "-----\n\n- Raise an AttributeError for six.moves.X when X is a module not available in\n  the current interpreter.\n\n", "1.2.0": "-----\n\n- Issue 13: Make iterkeys/itervalues/iteritems return iterators on Python 3\n  instead of iterables.\n\n- Issue 11: Fix maxsize support on Jython.\n\n- Add six.next() as an alias for six.advance_iterator().\n\n- Use the builtin next() function for advance_iterator() where is available\n  (2.6+), not just Python 3.\n\n- Add the Iterator class for writing portable iterators.\n\n"}, "testfixtures": {"4.13.0": "------------------------\n\n- Add support to :func:`compare` for ignoring broken ``__eq__`` implementations.\n\n", "1.5.2": "-------------------\n\n- added `makedir` and `check_dir` methods to TempDirectory and added\n  support for sub directories to `read` and `write`\n\n", "2.3.0": "-------------------------\n\n- :class:`Replacer`, :class:`TempDirectory`, :class:`LogCapture` and\n  :class:`~components.TestComponents` instances will now warn if the\n  process they are created in exits without them being cleaned\n  up. Instances of these classes should be cleaned up at the end of\n  each test and these warnings serve to point to a cause for possible\n  mysterious failures elsewhere.\n\n", "1.7.0": "-----------------------\n\n- fixed a bug where the replace decorator passed a classmethod\n  rather than the replacment to the decorated callable when replacing\n  a classmethod\n\n- added set method to test_date, test_datetime and test_time to allow\n  setting the parameters for the next instance to be returned.\n\n- added delta and delta_type parameters to test_date,test_datetime and\n  test_time to control the intervals between returned instances.\n\n\n", "4.1.2": "-----------------------\n\n- Clarify documentation for ``name`` parameter to :class:`LogCapture`.\n\n- :class:`ShouldRaise` now shows different output when two exceptions have\n  the same representation but still differ.\n\n- Fix bug that could result in a :class:`dict` comparing equal to a\n  :class:`list`.\n\nThanks to Daniel Fortunov for the documentation clarification.\n\n", "4.0.0": "--------------------\n\n- Moved from buildout to virtualenv for development.\n\n- The ``identity`` singleton is no longer needed and has been\n  removed.\n\n- :func:`compare` will now work recursively on data structures for\n  which it has registered comparers, giving more detailed feedback on\n  nested data structures. Strict comparison will also be applied\n  recursively.\n\n- Re-work the interfaces for using custom comparers with\n  :func:`compare`.\n\n- Better feedback when comparing :func:`collections.namedtuple`\n  instances.\n\n- Official support for Python 3.4.\n\nThanks to Yevgen Kovalienia for the typo fix in :doc:`datetime`.\n\n", "2.0.0": "-------------------------\n\n- :func:`compare` now uses a registry of comparers that can be\n  modified either by passing a `registry` option to :func:`compare`\n  or, globally, using the :func:`~comparison.register` function.\n\n- added a comparer for :class:`set` instances to :func:`compare`.\n\n- added a new `show_whitespace` parameter to\n  :func:`~comparison.compare_text`, the comparer used when comparing\n  strings and unicodes with :func:`compare`.\n\n- The internal queue for :class:`test_datetime` is now considered to\n  be in local time. This has implication on the values returned from\n  both :meth:`~tdatetime.now` and :meth:`~tdatetime.utcnow` when\n  `tzinfo` is passed to the :class:`test_datetime` constructor.\n\n- :meth:`set` and :meth:`add` on :class:`test_date`,\n  :class:`test_datetime` and :class:`test_time` now accept instances\n  of the appropriate type as an alternative to just passing in the\n  parameters to create the instance.\n\n- Refactored the monolithic ``__init__.py`` into modules for each\n  type of functionality.\n\n", "5.2.0": "------------------------\n\n- :class:`test_datetime` and :class:`test_time` now accept a\n  :class:`~datetime.datetime` instance during instantiation to set the initial\n  value.\n\n- :class:`test_date` now accepts a :class:`~datetime.date` instance during\n  instantiation to set the initial value.\n\n- Relax the restriction on adding, setting or instantiating :class:`test_datetime`\n  with `tzinfo` such that if the `tzinfo` matches the one configured,\n  then it's okay to add.\n  This means that you can now instantiate a :class:`test_datetime` with an existing\n  :class:`~datetime.datetime` instance that has `tzinfo` set.\n\n- :func:`testfixtures.django.compare_model` now ignores\n  :class:`many to many <django.db.models.ManyToManyField>` fields rather than\n  blowing up on them.\n\n- Drop official support for Python 3.4, although things should continue to\n  work.\n\n", "2.1.0": "-------------------------\n\n- Add a :ref:`strict mode <strict-comparison>` to\n  :func:`compare`. When used, it ensures that\n  the values compared are not only equal but also of the same\n  type. This mode is not used by default, and the default mode\n  restores the more commonly useful functionality where values of\n  similar types but that aren't equal give useful feedback about\n  differences.\n\n", "4.14.1": "--------------------\n\n- Fix mis-merge.\n\n", "4.13.5": "-------------------------\n\n- :func:`compare` now correctly compares nested empty dictionaries when using\n  ``ignore_eq=True``.\n\n", "1.5.1": "-------------------\n\n- added `path` parameter to `write` method of TempDirectory so\n  that the full path of the file written can be easilly obtained\n\n", "4.3.0": "-------------------------\n\n- Add :meth:`TempDirectory.compare` with a cleaner, more explicit API that\n  allows comparison of only the files in a temporary directory.\n\n- Deprecate :meth:`TempDirectory.check`, :meth:`TempDirectory.check_dir`\n  and :meth:`TempDirectory.check_all`\n\n- Relax absolute-path rules so that if it's inside the :class:`TempDirectory`,\n  it's allowed.\n\n- Allow :class:`OutputCapture` to separately check output to ``stdout`` and\n  ``stderr``.\n\n", "4.1.1": "-----------------------\n\n- Fix bug that prevented logger propagation to be controlled by the\n  :class:`log_capture` decorator.\n\nThanks to John Kristensen for the fix.\n\n", "1.11.2": "---------------------\n\n- Fix for 1.10 and 1.11 releases that didn't include non-.py files as\n  a result of the move from subversion to git.\n\n", "4.5.0": "------------------------\n\n- :class:`LogCapture`, :class:`OutputCapture` and :class:`TempDirectory` now\n  explicitly show what is expected versus actual when reporting differences.\n\nThanks to Daniel Fortunov for the pull request.\n\n", "3.0.0": "--------------------\n\n- Added compatibility with Python 3.2 and 3.3.\n\n- Dropped compatibility with Python 2.5.\n\n- Removed support for the following obscure uses of\n  :class:`should_raise`: \n\n  .. invisible-code-block: python\n\n     from mock import MagicMock\n     should_raise = x = MagicMock()\n\n  .. code-block:: python\n\n    should_raise(x, IndexError)[1]\n    should_raise(x, KeyError)['x']\n\n- Dropped the `mode` parameter to :meth:`TempDirectory.read`. \n\n- :meth:`TempDirectory.makedir` and :meth:`TempDirectory.write` no\n  longer accept a `path` parameter.\n  \n- :meth:`TempDirectory.read` and :meth:`TempDirectory.write` now\n  accept an `encoding` parameter to control how non-byte data is\n  decoded and encoded respectively.\n\n- Added the `prefix` parameter to :func:`compare` to allow failure\n  messages to be made more informative.\n\n- Fixed a problem when using sub-second deltas with :func:`test_time`.\n\n", "3.1.0": "-------------------\n\n- Added :class:`RoundComparison` helper for comparing numerics to a\n  specific precision.\n\n- Added ``unless`` parameter to :class:`ShouldRaise` to cover\n  some very specific edge cases.\n\n- Fix missing imports that showed up :class:`TempDirectory` had to do\n  the \"convoluted folder delete\" dance on Windows.\n\nThanks to Jon Thompson for the :class:`RoundComparison` implementation.\n\nThanks to Matthias Lehmann for the import error reports.\n\n", "3.0.2": "--------------------\n\n- Document :attr:`ShouldRaise.raised` and make it part of the official\n  API. \n\n- Fix rare failures when cleaning up :class:`TempDirectory` instances\n  on Windows.\n\n", "1.0.0": "-------------------\n\n- Initial Release\n", "4.1.0": "-----------------------\n\n- Fix :func:`compare` bug when :class:`dict` instances with\n  :class:`tuple` keys were not equal.\n\n- Allow logger propagation to be controlled by :class:`LogCapture`.\n\n- Enabled disabled loggers if a :class:`LogCapture` is attached to them.\n\nThanks to Daniel Fortunov for the :func:`compare` fix.\n\n", "1.1.0": "------------------\n\n- add support to Comparisons for only comparing some attributes\n\n- move to use zope.dottedname\n\n", "1.6.2": "-------------------------\n\n- changed Comparison to use __eq__ and __ne__ instead of the\n  deprecated __cmp__\n\n- documented that order matters when using Comparisons with objects\n  that implement __eq__ themselves, such as instances of Django\n  models.\n\n", "4.13.2": "-------------------------\n\n- Fixed a bug where a :class:`LogCapture` wouldn't be cleared when used via\n  :func:`log_capture` on a base class and sub class execute the same test.\n\nThanks to \"mlabonte\" for the bug report.\n\n", "2.3.3": "-------------------------\n\n- Fixed a bug where when a target was replaced more than once using a\n  single :class:`Replacer`, :meth:`~Replacer.restore` would not\n  correctly restore the original.\n\n", "4.9.0": "------------------------\n\n- Added the `suffix` parameter to :func:`compare` to allow failure messages\n  to include some additional context.\n\n- Update package metadata to indicate Python 3.5 compatibility.\n\nThanks for Felix Yan for the metadata patch.\n\nThanks to Wim Glenn for the suffix patch.\n\n", "2.3.4": "-----------------------\n\n- Fixed compatibility with Python 2.5\n\n- Fixed compatibility with Python 2.7\n\n- Development model moved to continuous integration using Jenkins.\n\n- Introduced `Tox`__ based testing to ensure packaging and\n  dependencies are as expected.\n\n  __ http://tox.testrun.org/latest/\n\n- 100% line and branch coverage with tests.\n\n- Mark :class:`test_datetime`, :class:`test_date` and\n  :class:`test_time` such that nose doesn't mistake them as tests.\n\n", "1.5.4": "-------------------\n\n- fix bug where should_raise didn't complain when no exception \n  was raised but one was expected.\n\n- clarified that the return of a should_raise call will be None\n  in the event that an exception is raised but no expected \n  exception is specified.\n\n", "4.5.1": "------------------------\n\n- Switch from :class:`cStringIO` to :class:`StringIO` in :class:`OutputCapture`\n  to better handle unicode being written to `stdout` or `stderr`.\n\nThanks to \"tell-k\" for the patch.\n\n", "5.1.0": "-------------------\n\n- Added support for including non-edit  able fields to the\n  :func:`comparer <testfixtures.django.compare_model>` used by :func:`compare`\n  when comparing :doc:`django <django>`\n  :class:`~django.db.models.Model` instances.\n\n", "2.3.1": "-------------------------\n\n- Move to use `nose <http://readthedocs.org/docs/nose/>`__ for running\n  the TestFixtures unit tests.\n\n- Fixed a bug where :meth:`tdatetime.now` returned an instance of the\n  wrong type when `tzinfo` was passed in \n  :ref:`strict mode <strict-dates-and-times>`.\n\n", "4.14.3": "--------------------\n\n- Fix build environment bug in ``.travis.yml`` that caused bad tarballs.\n\n", "4.14.2": "--------------------\n\n- New release as it looks like Travis mis-built the 4.14.1 tarball.\n\n", "4.3.2": "-------------------------\n\n- Fix broken 4.3.1 tag.\n\n", "4.11.0": "------------------------\n\n- Allow the attributes returned in :meth:`LogCapture.actual` rows to be\n  specified.\n\n- Allow a default to be specified for encoding in :meth:`TempDirectory.read` and\n  :meth:`TempDirectory.write`.\n\n", "4.13.1": "------------------------\n\n- When ``ignore_eq`` is used with :func:`compare`, fall back to comparing by\n  hash if not type-specific comparer can be found.\n\n", "1.11.1": "---------------------\n\n- Fix bug where :meth:`tdatetime.now` didn't accept the `tz`\n  parameter that :meth:`datetime.datetime.now` did.\n\n", "4.14.0": "--------------------\n\n- Added helpers for testing with :doc:`django <django>`\n  :class:`~django.db.models.Model` instances.\n\n", "1.5.0": "-------------------\n\n- added handy `read` and `write` methods to TempDirectory for\n  creating and reading files in the temporary directory\n\n- added support for rich comparison of objects that don't support\n  vars()\n\n", "4.10.0": "--------------------\n\n- Fixed examples in documentation broken in 4.5.1.\n\n- Add :class:`RangeComparison` for comparing against values that fall in a\n  range.\n\n- Add :meth:`~popen.MockPopen.set_default` to :class:`~popen.MockPopen`.\n\nThanks to Asaf Peleg for the :class:`RangeComparison` implementation.\n\n", "1.12.0": "-----------------------\n\n- Add a :attr:`~OutputCapture.captured` property to\n  :class:`OutputCapture` so that more complex assertion can be made\n  about the output that has been captured.\n\n- :class:`OutputCapture` context managers can now be temporarily\n  disabled using their :meth:`~OutputCapture.disable` method.\n\n- Logging can now be captured only when it exceeds a specified logging\n  level.\n\n- The handling of timezones has been reworked in both\n  :func:`test_datetime` and :func:`test_time`. This is not backwards\n  compatible but is much more useful and correct.\n\n", "2.2.0": "-------------------------\n\n- Add a :ref:`strict mode <strict-dates-and-times>` to\n  :class:`test_datetime` and :class:`test_date`. \n  When used, instances returned from the mocks are instances of those\n  mocks. The default behaviour is now to return instances of the real\n  :class:`~datetime.datetime` and :class:`~datetime.date` classes\n  instead, which is usually much more useful.\n\n", "1.6.0": "-------------------\n\n- added support for using TempDirectory, Replacer and LogCapture as\n  context managers.\n\n- fixed test failure in Python 2.6.\n\n", "1.9.0": "------------------------\n\n- Added :class:`~components.TestComponents` for getting a sterile\n  registry when testing code that uses :mod:`zope.component`.\n\n", "4.2.0": "----------------------\n\n- Add :class:`~testfixtures.popen.MockPopen`, a mock helpful when testing\n  code that uses :class:`subprocess.Popen`.\n\n- :class:`ShouldRaise` now subclasses :class:`object`, so that subclasses of it\n  may use :meth:`super()`.\n\n- Drop official support for Python 3.2.\n\nThanks to BATS Global Markets for donating the code for\n:class:`~testfixtures.popen.MockPopen`.\n\n", "4.13.3": "-------------------------\n\n- :func:`compare` now better handles equality comparison with ``ignore_eq=True``\n  when either of the objects being compared cannot be hashed.\n\n", "4.10.1": "-------------------------\n\n- Better docs for :meth:`TempDirectory.compare`.\n\n- Remove the need for expected paths supplied to :meth:`TempDirectory.compare`\n  to be in sorted order.\n\n- Document a good way of restoring ``stdout`` when in a debugger.\n\n- Fix handling of trailing slashes in :meth:`TempDirectory.compare`.\n\nThanks to Maximilian Albert for the :meth:`TempDirectory.compare` docs.\n\n", "4.3.1": "-------------------------\n\n- Fix build problems introduced by moving the build process to Travis CI.\n\n", "4.0.2": "-------------------------\n\n- Fix \"maximum recursion depth exceeded\" when comparing a string with\n  bytes that did not contain the same character.\n\n", "5.0.0": "-------------------\n\n- Move from `nose`__ to `pytest`__ for running tests.\n\n  __ http://nose.readthedocs.io/en/latest/\n\n  __ https://docs.pytest.org/en/latest/\n\n- Switch from `manuel`__ to `sybil`__ for checking examples in\n  documentation. This introduces a backwards incompatible change\n  in that :class:`~testfixtures.sybil.FileParser` replaces the Manuel\n  plugin that is no longer included.\n\n  __ http://packages.python.org/manuel/\n\n  __ http://sybil.readthedocs.io/en/latest/\n\n- Add a 'tick' method to :meth:`test_datetime <tdatetime.tick>`,\n  :meth:`test_date <tdate.tick>` and :meth:`test_time <ttime.tick>`,\n  to advance the returned point in time, which is particularly helpful\n  when ``delta`` is set to zero.\n\n", "4.13.4": "------------------------\n\n- Keep the `Reproducible Builds`__ guys happy.\n\n  __ https://reproducible-builds.org/\n\n", "4.6.0": "------------------------\n\n- Fix a bug that mean symlinked directories would never show up when using\n  :meth:`TempDirectory.compare` and friends.\n\n- Add the ``followlinks`` parameter to :meth:`TempDirectory.compare` to\n  indicate that symlinked or hard linked directories should be recursed into\n  when using ``recursive=True``.\n\n", "4.4.0": "-----------------------\n\n- Add support for labelling the arguments passed to :func:`compare`.\n\n- Allow ``expected`` and ``actual`` keyword parameters to be passed to\n  :func:`compare`.\n\n- Fix ``TypeError: unorderable types`` when :func:`compare` found multiple\n  differences in sets and dictionaries on Python 3.\n\n- Add official support for Python 3.5.\n\n- Drop official support for Python 2.6.\n\nThanks to Daniel Fortunov for the initial ideas for explicit ``expected`` and\n``actual`` support in :func:`compare`.\n\n", "4.9.1": "------------------------\n\n- Fix for use with PyPy, broken since 4.8.0.\n\nThanks to Nicola Iarocci for the pull request to fix.\n\n", "2.0.1": "-------------------------\n\n- add back functionality to allow comparison of generators with\n  non-generators.\n\n", "4.8.0": "-----------------------\n\n- Introduce a new :class:`Replace` context manager and make :class:`Replacer`\n  callable. This gives more succinct and easy to read mocking code.\n\n- Add :class:`ShouldWarn` and :class:`ShouldNotWarn` context managers.\n\n", "1.6.1": "-------------------------\n\n- replace and Replacer.replace can now replace attributes that may\n  not be present, provided the `strict` parameter is passed as False.\n\n- should_raise now catches BaseException rather than Exception so\n  raising of SystemExit and KeyboardInterrupt can be tested.\n\n", "1.11.0": "---------------------\n\n- Give more useful output when comparing dicts and their subclasses.\n\n- Turn :class:`should_raise` into a decorator form of\n  :class:`ShouldRaise` rather than the rather out-moded wrapper\n  function that it was.\n\n", "1.3.0": "------------------\n\n- added TempDirectory helper\n\n- added tempdir decorator\n\n", "4.0.1": "---------------------\n\n- Fix bugs when string compared equal and options to :func:`compare`\n  were used.\n\n- Fix bug when strictly comparing two nested structures containing\n  identical objects.\n\n", "1.9.2": "---------------------\n\n- Fix for issue 328: :meth:`~tdatetime.utcnow` of :func:`test_datetime`\n  now returns items from the internal queue in the same way as \n  :meth:`~tdatetime.now`.\n\n", "4.12.0": "------------------------\n\n- Add support for specifying a callable to extract rows from log records\n  when using :class:`LogCapture`.\n\n- Add support for recursive comparison of log messages with :class:`LogCapture`.\n\n", "2.3.5": "----------------------\n\n- Fixed a bug in :func:`~testfixtures.comparison.compare_dict` that\n  mean the list of keys that were the same was returned in an unsorted\n  order.\n\n", "5.1.1": "-------------------\n\n- Fix support for Django 1.9 in\n  :func:`testfixtures.django.compare_model`.\n\n", "4.7.0": "------------------------\n\n- Add the ability to pass ``raises=False`` to :func:`compare` to just get\n  the resulting message back rather than having an exception raised.\n\n", "1.8.0": "-----------------------\n\n- Added full Sphinx-based documentation.\n\n- added a `Manuel <http://packages.python.org/manuel/>`__ plugin for\n  reading and writing files into a :class:`TempDirectory`.\n\n- any existing log handlers present when a :class:`LogCapture` is\n  installed for a particular logger are now removed.\n\n- fix the semantics of :class:`should_raise`, which should always\n  expect an exception to be raised!\n\n- added the :class:`ShouldRaise` context manager.\n\n- added recursive support to :meth:`TempDirectory.listdir` and added\n  the new :meth:`TempDirectory.check_all` method.\n\n- added support for forward-slash separated paths to all relevant\n  :class:`TempDirectory` methods.\n\n- added :meth:`TempDirectory.getpath` method.\n\n- allow files and directories to be ignored by a regular expression\n  specification when using :class:`TempDirectory`.\n\n- made :class:`Comparison` objects work when the attributes expected\n  might be class attributes.\n\n- re-implement :func:`test_time` so that it uses the correct way to\n  get timezone-less time.\n\n- added :meth:`~tdatetime.set` along with `delta` and `delta_type`\n  parameters to :func:`test_date`, :func:`test_datetime` and\n  :func:`test_time`.\n\n- allow the date class returned by the :meth:`tdatetime.date` method\n  to be configured.\n\n- added the :class:`OutputCapture` context manager.\n\n- added the :class:`StringComparison` class.\n\n- added options to ignore trailing whitespace and blank lines when\n  comparing multi-line strings with :func:`compare`.\n\n- fixed bugs in the handling of some exception types when using\n  :class:`Comparison`, :class:`ShouldRaise` or :class:`should_raise`.\n\n- changed :func:`wrap` to correctly set __name__, along with some\n  other attributes, which should help when using the decorators with\n  certain testing frameworks.\n\n", "1.5.3": "-------------------\n\n- should_raise now supports methods other than __call__\n\n", "1.4.0": "-------------------\n\n- improved representation of failed Comparison\n\n- improved representation of failed compare with sequences\n\n", "3.0.1": "--------------------\n\n- Some documentation tweaks and clarifications.\n\n- Fixed a bug which masked exceptions when using :func:`compare` with\n  a broken generator.\n\n- Fixed a bug when comparing a generator with a non-generator.\n\n- Ensure :class:`LogCapture` cleans up global state it may effect.\n\n- Fixed replacement of static methods using a :class:`Replacer`.\n\n", "1.3.1": "-------------------\n\n- fixed bug that occurs when directory was deleted by a test that\n  use tempdir or TempDirectory\n\n", "4.3.3": "-------------------------\n\n- Add wheel distribution to release.\n\n- Attempt to fix up various niggles from the move to Travis CI for doing\n  releases.\n\n", "1.2.0": "------------------\n\n- LogCaptures now auto-install on creation unless configured otherwise\n\n- LogCaptures now have a clear method\n\n- LogCaptures now have a class method uninstall_all that uninstalls\n  all instances of LogCapture. Handy for a tearDown method in doctests.\n\n", "1.10.0": "---------------------\n\n- Remove dependency on :mod:`zope.dottedname`.\n\n- Implement the ability to mock out :class:`dict` and :class:`list`\n  items using :class:`~testfixtures.Replacer` and\n  :func:`~testfixtures.replace`.\n\n- Implement the ability to remove attributes and :class:`dict`\n  items using :class:`~testfixtures.Replacer` and\n  :func:`~testfixtures.replace`.\n\n", "1.11.3": "----------------------\n\n- Fix bugs where various :meth:`test_date`, :meth:`test_datetime` and\n  :meth:`test_time` methods didn't accept keyword parameters.\n\n", "1.9.1": "------------------------\n\n- Fix bug when :class:`ShouldRaise` context managers incorrectly\n  reported what exception was incorrectly raised when the incorrectly\n  raised exception was a :class:`KeyError`.\n\n", "2.3.2": "-------------------------\n\n- Fixed a bug where attributes and keys could not be\n  removed by a :class:`Replacer` as described in\n  :ref:`removing_attr_and_item` if the attribute or key might not be\n  there, such as where a test wants to ensure an ``os.environ``\n  variable is not set.\n\n"}, "pycodestyle": {"0.4.2": "------------------\n\n* Decorators on classes and class methods are OK now.\n\n\n", "0.1": "----------------\n\n* First release.\n", "0.5.0": "------------------\n\n* Changed the ``--count`` switch to print to sys.stderr and set\n  exit code to 1 if any error or warning is found.\n\n* E241 and E242 are removed from the standard checks. If you want to\n  include these checks, use switch ``--select=E,W``. (Issue 4)\n\n* Blank line is not mandatory before the first class method or nested\n  function definition, even if there's a docstring. (Issue 1)\n\n* Add the switch ``--version``.\n\n* Fix decoding errors with Python 3. (Issue 13 [1]_)\n\n* Add ``--select`` option which is mirror of ``--ignore``.\n\n* Add checks E261 and E262 for spaces before inline comments.\n\n* New check W604 warns about deprecated usage of backticks.\n\n* New check W603 warns about the deprecated operator ``<>``.\n\n* Performance improvement, due to rewriting of E225.\n\n* E225 now accepts:\n\n  - no whitespace after unary operator or similar. (Issue 9 [1]_)\n\n  - lambda function with argument unpacking or keyword defaults.\n\n* Reserve \"2 blank lines\" for module-level logical blocks. (E303)\n\n* Allow multi-line comments. (E302, issue 10 [1]_)\n\n\n", "1.6.0": "------------------\n\nNews:\n\n* Ian Lee <ianlee1521gmail.com> joined the project as a maintainer.\n\nChanges:\n\n* Report E731 for lambda assignment. (Issue 277)\n\n* Report E704 for one-liner def instead of E701.\n  Do not report this error in the default configuration. (Issue 277)\n\n* Replace codes E111, E112 and E113 with codes E114, E115 and E116\n  for bad indentation of comments. (Issue 274)\n\n* Report E266 instead of E265 when the block comment starts with\n  multiple ````. (Issue 270)\n\n* Report E402 for import statements not at the top of the file. (Issue 264)\n\n* Do not enforce whitespaces around ``**`` operator. (Issue 292)\n\n* Strip whitespace from around paths during normalization. (Issue 339 / 343)\n\n* Update ``--format`` documentation. (Issue 198 / Pull Request 310)\n\n* Add ``.tox/`` to default excludes. (Issue 335)\n\n* Do not report E121 or E126 in the default configuration. (Issues 256 / 316)\n\n* Allow spaces around the equals sign in an annotated function. (Issue 357)\n\n* Allow trailing backslash if in an inline comment. (Issue 374)\n\n* If ``--config`` is used, only that configuration is processed. Otherwise,\n  merge the user and local configurations are merged. (Issue 368 / 369)\n\nBug fixes:\n\n* Don't crash if Checker.build_tokens_line() returns None. (Issue 306)\n\n* Don't crash if os.path.expanduser() throws an ImportError. (Issue 297)\n\n* Missing space around keyword parameter equal not always reported, E251.\n  (Issue 323)\n\n* Fix false positive E711/E712/E713. (Issues 330 and 336)\n\n* Do not skip physical checks if the newline is escaped. (Issue 319)\n\n* Flush sys.stdout to avoid race conditions with printing. See flake8 bug:\n  https://gitlab.com/pycqa/flake8/issues/17 for more details. (Issue 363)\n\n\n", "2.3.0": "------------------\n\nNew Checks:\n\n* Add E722 warning for bare ``except`` clauses\n* Report E704 for async function definitions (``async def``)\n\nBugs:\n\n* Fix another E305 false positive for variables beginning with \"class\" or\n  \"def\"\n* Fix detection of multiple spaces between ``async`` and ``def``\n* Fix handling of variable annotations. Stop reporting E701 on Python 3.6 for\n  variable annotations.\n\n", "2.2.0": "------------------\n\nAnnouncements:\n\n* Added Make target to obtain proper tarball file permissions; 599\n\nBugs:\n\n* Fixed E305 regression caused by 400; 593\n\n", "1.5.1": "------------------\n\nBug fixes:\n\n* Fix a crash with E125 on multi-line strings. (Issue 263)\n\n\n", "2.0.0": "------------------\n\nAnnouncements:\n\n* Repository renamed to `pycodestyle`; Issue 466 / 481.\n* Added joint Code of Conduct as member of PyCQA; 483\n\nChanges:\n\n* Added tox test support for Python 3.5 and pypy3\n* Added check E275 for whitespace on `from ... import ...` lines; 489 / 491\n* Added W503 to the list of codes ignored by default ignore list; 498\n* Removed use of project level `.pep8` configuration file; 364\n\nBugs:\n\n* Fixed bug with treating `~` operator as binary; 383 / 384\n* Identify binary operators as unary; 484 / 485\n\n", "1.3.2": "------------------\n\n* Revert to the previous behaviour for ``--show-pep8``:\n  do not imply ``--first``. (Issue 89)\n\n* Add E902 for IO errors. (Issue 87)\n\n* Fix false positive for E121, and missed E124. (Issue 92)\n\n* Set a sensible default path for config file on Windows. (Issue 95)\n\n* Allow ``verbose`` in the configuration file. (Issue 91)\n\n* Show the enforced ``max-line-length`` in the error message. (Issue 86)\n\n\n", "0.3.1": "------------------\n\n* Fixes for comments: do not count them when checking for blank lines between\n  items.\n\n* Added setup.py for pypi upload and easy_installability.\n\n\n", "2.1.0": "------------------\n\nAnnouncements:\n\n* Change all references to the pep8 project to say pycodestyle; 530\n\nChanges:\n\n* Report E302 for blank lines before an \"async def\"; 556\n* Update our list of tested and supported Python versions which are 2.6, 2.7,\n  3.2, 3.3, 3.4 and 3.5 as well as the nightly Python build and PyPy.\n* Report E742 and E743 for functions and classes badly named 'l', 'O', or 'I'.\n* Report E741 on 'global' and 'nonlocal' statements, as well as prohibited\n  single-letter variables.\n* Deprecated use of `[pep8]` section name in favor of `[pycodestyle]`; 591\n* Report E722 when bare except clause is used; 579\n\nBugs:\n\n* Fix opt_type AssertionError when using Flake8 2.6.2 and pycodestyle; 561\n* Require two blank lines after toplevel def, class; 536\n* Remove accidentally quadratic computation based on the number of colons. This\n  will make pycodestyle faster in some cases; 314\n\n", "1.4.2": "------------------\n\n* Support AST checkers provided by third-party applications.\n\n* Register new checkers with ``register_check(func_or_cls, codes)``.\n\n* Allow constructing a ``StyleGuide`` with a custom parser.\n\n* Accept visual indentation without parenthesis after the ``if``\n  statement. (Issue 151)\n\n* Fix UnboundLocalError when using `` noqa`` with continued lines.\n  (Issue 158)\n\n* Re-order the lines for the ``StandardReport``.\n\n* Expand tabs when checking E12 continuation lines. (Issue 155)\n\n* Refactor the testing class ``TestReport`` and the specific test\n  functions into a separate test module.\n\n\n", "1.2": "----------------\n\n* Add E121 through E128 for continuation line indentation.  These\n  checks are disabled by default.  If you want to force all checks,\n  use switch ``--select=E,W``.  Patch by Sam Vilain. (Issue 64)\n\n* Add E721 for direct type comparisons. (Issue 47)\n\n* Add E711 and E712 for comparisons to singletons. (Issue 46)\n\n* Fix spurious E225 and E701 for function annotations. (Issue 29)\n\n* Add E502 for explicit line join between brackets.\n\n* Fix E901 when printing source with ``--show-source``.\n\n* Report all errors for each checker, instead of reporting only the\n  first occurrence for each line.\n\n* Option ``--show-pep8`` implies ``--first``.\n\n\n", "1.4.1": "------------------\n\n* Allow sphinx.ext.autodoc syntax for comments. (Issue 110)\n\n* Report E703 instead of E702 for the trailing semicolon. (Issue 117)\n\n* Honor `` noqa`` in addition to `` nopep8``. (Issue 149)\n\n* Expose the ``OptionParser`` factory for better extensibility.\n\n\n", "1.0": "----------------\n\n* Fix W602 ``raise`` to handle multi-char names. (Issue 53)\n\n\n", "1.3.4": "------------------\n\n* Fix false positive E124 and E128 with comments. (Issue 100)\n\n* Fix error on stdin when running with bpython. (Issue 101)\n\n* Fix false positive E401. (Issue 104)\n\n* Report E231 for nested dictionary in list. (Issue 142)\n\n* Catch E271 at the beginning of the line. (Issue 133)\n\n* Fix false positive E126 for multi-line comments. (Issue 138)\n\n* Fix false positive E221 when operator is preceded by a comma. (Issue 135)\n\n* Fix ``--diff`` failing on one-line hunk. (Issue 137)\n\n* Fix the ``--exclude`` switch for directory paths. (Issue 111)\n\n* Use ``-`` filename to read from standard input. (Issue 128)\n\n\n", "1.4.4": "------------------\n\n* Report E227 or E228 instead of E225 for whitespace around bitwise, shift\n  or modulo operators. (Issue 166)\n\n* Change the message for E226 to make clear that it is about arithmetic\n  operators.\n\n* Fix a false positive E128 for continuation line indentation with tabs.\n\n* Fix regression with the ``--diff`` option. (Issue 169)\n\n* Fix the ``TestReport`` class to print the unexpected warnings and\n  errors.\n\n\n", "1.6.1": "------------------\n\nChanges:\n\n* Assign variables before referenced. (Issue 287)\n\nBugs:\n\n* Exception thrown due to unassigned ``local_dir`` variable. (Issue 377)\n\n\n", "1.5": "----------------\n\nChanges:\n\n* Report E129 instead of E125 for visually indented line with same\n  indent as next logical line.  (Issue 126)\n\n* Report E265 for space before block comment. (Issue 190)\n\n* Report E713 and E714 when operators ``not in`` and ``is not`` are\n  recommended. (Issue 236)\n\n* Allow long lines in multiline strings and comments if they cannot\n  be wrapped. (Issue 224).\n\n* Optionally disable physical line checks inside multiline strings,\n  using `` noqa``. (Issue 242)\n\n* Change text for E121 to report \"continuation line under-indented\n  for hanging indent\" instead of indentation not being a\n  multiple of 4.\n\n* Report E131 instead of E121 / E126 if the hanging indent is not\n  consistent within the same continuation block.  It helps when\n  error E121 or E126 is in the ``ignore`` list.\n\n* Report E126 instead of E121 when the continuation line is hanging\n  with extra indentation, even if indentation is not a multiple of 4.\n\nBug fixes:\n\n* Allow the checkers to report errors on empty files. (Issue 240)\n\n* Fix ignoring too many checks when ``--select`` is used with codes\n  declared in a flake8 extension. (Issue 216)\n\n* Fix regression with multiple brackets. (Issue 214)\n\n* Fix ``StyleGuide`` to parse the local configuration if the\n  keyword argument ``paths`` is specified. (Issue 246)\n\n* Fix a false positive E124 for hanging indent. (Issue 254)\n\n* Fix a false positive E126 with embedded colon. (Issue 144)\n\n* Fix a false positive E126 when indenting with tabs. (Issue 204)\n\n* Fix behaviour when ``exclude`` is in the configuration file and\n  the current directory is not the project directory. (Issue 247)\n\n* The logical checks can return ``None`` instead of an empty iterator.\n  (Issue 250)\n\n* Do not report multiple E101 if only the first indentation starts\n  with a tab. (Issue 237)\n\n* Fix a rare false positive W602. (Issue 34)\n\n\n", "1.5.2": "------------------\n\nChanges:\n\n* Distribute a universal wheel file.\n\nBug fixes:\n\n* Report correct line number for E303 with comments. (Issue 60)\n\n* Do not allow newline after parameter equal. (Issue 252)\n\n* Fix line number reported for multi-line strings. (Issue 220)\n\n* Fix false positive E121/E126 with multi-line strings. (Issue 265)\n\n* Fix E501 not detected in comments with Python 2.5.\n\n* Fix caret position with ``--show-source`` when line contains tabs.\n\n\n", "0.6.1": "------------------\n\n* Fix inconsistent version numbers. (Issue 21)\n\n\n", "1.3": "----------------\n\n.. warning::\n   The internal API is backwards incompatible.\n\n* Remove global configuration and refactor the library around\n  a ``StyleGuide`` class; add the ability to configure various\n  reporters. (Issue 35 and 66)\n\n* Read user configuration from ``~/.config/pep8``\n  and local configuration from ``./.pep8``. (Issue 22)\n\n* Fix E502 for backslash embedded in multi-line string. (Issue 68)\n\n* Fix E225 for Python 3 iterable unpacking (PEP 3132). (Issue 72)\n\n* Enable the new checkers from the E12 series in the default\n  configuration.\n\n* Suggest less error-prone alternatives for E712 errors.\n\n* Rewrite checkers to run faster (E22, E251, E27).\n\n* Fixed a crash when parsed code is invalid (too many\n  closing brackets).\n\n* Fix E127 and E128 for continuation line indentation. (Issue 74)\n\n* New option ``--format`` to customize the error format. (Issue 23)\n\n* New option ``--diff`` to check only modified code.  The unified\n  diff is read from STDIN.  Example: ``hg diff | pep8 --diff``\n  (Issue 39)\n\n* Correctly report the count of failures and set the exit code to 1\n  when the ``--doctest`` or the ``--testsuite`` fails.\n\n* Correctly detect the encoding in Python 3. (Issue 69)\n\n* Drop support for Python 2.3, 2.4 and 3.0. (Issue 78)\n\n\n", "1.6.2": "------------------\n\nChanges:\n\n* Added check for breaking around a binary operator. (Issue 197, Pull 305)\n\nBugs:\n\n* Restored config_file parameter in process_options(). (Issue 380)\n\n\n", "0.6.0": "------------------\n\n* Test suite reorganized and enhanced in order to check more failures\n  with fewer test files.  Read the ``run_tests`` docstring for details\n  about the syntax.\n\n* Fix E225: accept ``print >>sys.stderr, \"...\"`` syntax.\n\n* Fix E501 for lines containing multibyte encoded characters. (Issue 7)\n\n* Fix E221, E222, E223, E224 not detected in some cases. (Issue 16)\n\n* Fix E211 to reject ``v = dic['a'] ['b']``. (Issue 17)\n\n* Exit code is always 1 if any error or warning is found. (Issue 10)\n\n* ``--ignore`` checks are now really ignored, especially in\n  conjunction with ``--count``. (Issue 8)\n\n* Blank lines with spaces yield W293 instead of W291: some developers\n  want to ignore this warning and indent the blank lines to paste their\n  code easily in the Python interpreter.\n\n* Fix E301: do not require a blank line before an indented block. (Issue 14)\n\n* Fix E203 to accept NumPy slice notation ``a[0, :]``. (Issue 13)\n\n* Performance improvements.\n\n* Fix decoding and checking non-UTF8 files in Python 3.\n\n* Fix E225: reject ``True+False`` when running on Python 3.\n\n* Fix an exception when the line starts with an operator.\n\n* Allow a new line before closing ``)``, ``}`` or ``]``. (Issue 5)\n\n\n", "1.3.3": "------------------\n\n* Fix regression with continuation line checker. (Issue 98)\n\n\n", "1.4": "----------------\n\n* Report E226 instead of E225 for optional whitespace around common\n  operators (``*``, ``**``, ``/``, ``+`` and ``-``).  This new error\n  code is ignored in the default configuration because PEP 8 recommends\n  to \"use your own judgement\". (Issue 96)\n\n* Lines with a `` nopep8`` at the end will not issue errors on line\n  length E501 or continuation line indentation E12*. (Issue 27)\n\n* Fix AssertionError when the source file contains an invalid line\n  ending ``\"\\r\\r\\n\"``. (Issue 119)\n\n* Read the ``[pep8]`` section of ``tox.ini`` or ``setup.cfg`` if present.\n  (Issue 93 and 141)\n\n* Add the Sphinx-based documentation, and publish it\n  on https://pycodestyle.readthedocs.io/. (Issue 105)\n\n\n", "1.3.1": "------------------\n\n* Explain which configuration options are expected.  Accept and recommend\n  the options names with hyphen instead of underscore. (Issue 82)\n\n* Do not read the user configuration when used as a module\n  (except if ``config_file=True`` is passed to the ``StyleGuide`` constructor).\n\n* Fix wrong or missing cases for the E12 series.\n\n* Fix cases where E122 was missed. (Issue 81)\n\n\n", "1.5.6": "------------------\n\nBug fixes:\n\n* Check the last line even if it has no end-of-line. (Issue 273)\n\n\n", "1.4.6": "------------------\n\nChanges:\n\n* Honor `` noqa`` for errors E711 and E712. (Issue 180)\n\n* When both a ``tox.ini`` and a ``setup.cfg`` are present in the project\n  directory, merge their contents.  The ``tox.ini`` file takes\n  precedence (same as before). (Issue 182)\n\n* Give priority to ``--select`` over ``--ignore``. (Issue 188)\n\n* Compare full path when excluding a file. (Issue 186)\n\n* New option ``--hang-closing`` to switch to the alternative style of\n  closing bracket indentation for hanging indent.  Add error E133 for\n  closing bracket which is missing indentation. (Issue 103)\n\n* Accept both styles of closing bracket indentation for hanging indent.\n  Do not report error E123 in the default configuration. (Issue 103)\n\nBug fixes:\n\n* Do not crash when running AST checks and the document contains null bytes.\n  (Issue 184)\n\n* Correctly report other E12 errors when E123 is ignored. (Issue 103)\n\n* Fix false positive E261/E262 when the file contains a BOM. (Issue 193)\n\n* Fix E701, E702 and E703 not detected sometimes. (Issue 196)\n\n* Fix E122 not detected in some cases. (Issue 201 and 208)\n\n* Fix false positive E121 with multiple brackets. (Issue 203)\n\n\n", "1.5.4": "------------------\n\nBug fixes:\n\n* Fix negative offset with E303 before a multi-line docstring.\n  (Issue 269)\n\n\n", "0.2": "----------------\n\n* Loads of fixes and improvements.\n\n\n", "1.5.3": "------------------\n\nBug fixes:\n\n* Fix wrong offset computation when error is on the last char\n  of a physical line. (Issue 268)\n\n\n", "0.4": "----------------\n\n* Support for all versions of Python from 2.3 to 3.1.\n\n* New and greatly expanded self tests.\n\n* Added ``--count`` option to print the total number of errors and warnings.\n\n* Further improvements to the handling of comments and blank lines.\n  (Issue 1 [1]_ and others changes.)\n\n* Check all py files in directory when passed a directory (Issue\n  2 [1]_). This also prevents an exception when traversing directories\n  with non ``*.py`` files.\n\n* E231 should allow commas to be followed by ``)``. (Issue 3 [1]_)\n\n* Spaces are no longer required around the equals sign for keyword\n  arguments or default parameter values.\n\n\n.. [1] These issues refer to the `previous issue tracker`__.\n.. __:  http://github.com/cburroughs/pep8.py/issues\n\n\n", "1.5.7": "------------------\n\nBug fixes:\n\n* Skip the traceback on \"Broken pipe\" signal. (Issue 275)\n\n* Do not exit when an option in ``setup.cfg`` or ``tox.ini``\n  is not recognized.\n\n* Check the last line even if it does not end with a newline. (Issue 286)\n\n* Always open files in universal newlines mode in Python 2. (Issue 288)\n\n\n", "1.4.3": "------------------\n\n* Hide the ``--doctest`` and ``--testsuite`` options when installed.\n\n* Fix crash with AST checkers when the syntax is invalid. (Issue 160)\n\n* Read from standard input if no path is specified.\n\n* Initiate a graceful shutdown on ``Control+C``.\n\n* Allow changing the ``checker_class`` for the ``StyleGuide``.\n\n\n", "1.4.5": "------------------\n\n* When no path is specified, do not try to read from stdin.  The feature\n  was added in 1.4.3, but it is not supported on Windows.  Use ``-``\n  filename argument to read from stdin.  This usage is supported\n  since 1.3.4. (Issue 170)\n\n* Do not require ``setuptools`` in setup.py.  It works around an issue\n  with ``pip`` and Python 3. (Issue 172)\n\n* Add ``__pycache__`` to the ignore list.\n\n* Change misleading message for E251. (Issue 171)\n\n* Do not report false E302 when the source file has a coding cookie or a\n  comment on the first line. (Issue 174)\n\n* Reorganize the tests and add tests for the API and for the command line\n  usage and options. (Issues 161 and 162)\n\n* Ignore all checks which are not explicitly selected when ``select`` is\n  passed to the ``StyleGuide`` constructor.\n\n\n", "1.1": "----------------\n\n* Add E901 for syntax errors. (Issues 63 and 30)\n\n* Add E271, E272, E273 and E274 for extraneous whitespace around\n  keywords. (Issue 57)\n\n* Add ``tox.ini`` configuration file for tests. (Issue 61)\n\n* Add ``.travis.yml`` configuration file for continuous integration.\n  (Issue 62)\n\n\n", "1.0.1": "------------------\n\n* Fix inconsistent version numbers.\n\n\n", "1.5.5": "------------------\n\nBug fixes:\n\n* Fix regression with E22 checks and inline comments. (Issue 271)\n\n\n", "2.3.1": "------------------\n\nBugs:\n\n* Fix regression in detection of E302 and E306; 618, 620\n\n", "1.7.0": "------------------\n\nAnnouncements:\n\n* Repository moved to PyCQA Organization on GitHub:\n  https://github.com/pycqa/pep8\n\nChanges:\n\n* Reverted the fix in 368, \"options passed on command line are only ones\n  accepted\" feature. This has many unintended consequences in pep8 and flake8\n  and needs to be reworked when I have more time.\n* Added support for Python 3.5. (Issue 420 & 459)\n* Added support for multi-line config_file option parsing. (Issue 429)\n* Improved parameter parsing. (Issues 420 & 456)\n\nBugs:\n\n* Fixed BytesWarning on Python 3. (Issue 459)\n\n", "0.7.0": "------------------\n\n* Now ``--first`` prints only the first occurrence of each error.\n  The ``--repeat`` flag becomes obsolete because it is the default\n  behaviour. (Issue 6)\n\n* Allow specifying ``--max-line-length``. (Issue 36)\n\n* Make the shebang more flexible. (Issue 26)\n\n* Add testsuite to the bundle. (Issue 25)\n\n* Fixes for Jython. (Issue 49)\n\n* Add PyPI classifiers. (Issue 43)\n\n* Fix the ``--exclude`` option. (Issue 48)\n\n* Fix W602, accept ``raise`` with 3 arguments. (Issue 34)\n\n* Correctly select all tests if ``DEFAULT_IGNORE == ''``.\n\n\n"}, "pyyaml": {"3.03": "-----------------\n\n* Fix Python 2.5 compatibility issues.\n* Fix numerous bugs in the float handling.\n* Fix scanning some ill-formed documents.\n* Other minor fixes.\n\n\n", "3.02": "-----------------\n\n* Fix win32 installer.  Apparently bdist_wininst does not work well\n  under Linux.\n* Fix a bug in add_path_resolver.\n* Add the yaml-highlight example.  Try to run on a color terminal:\n  `python yaml_hl.py <any_document.yaml`.\n\n\n", "3.05": "-----------------\n\n* Windows binary packages were built with LibYAML trunk.\n* Fixed a bug that prevent processing a live stream of YAML documents in\n  timely manner (Thanks edward(at)sweetbytes(dot)net).\n* Fixed a bug when the path in add_path_resolver contains boolean values\n  (Thanks jstroud(at)mbi(dot)ucla(dot)edu).\n* Fixed loss of microsecond precision in timestamps\n  (Thanks edemaine(at)mit(dot)edu).\n* Fixed loading an empty YAML stream.\n* Allowed immutable subclasses of YAMLObject.\n* Made the encoding of the unicode->str conversion explicit so that\n  the conversion does not depend on the default Python encoding.\n* Forced emitting float values in a YAML compatible form.\n\n\n", "3.08": "-----------------\n\n* Python 3 support (Thank to Erick Tryzelaar).\n* Use Cython instead of Pyrex to build LibYAML bindings.\n* Refactored support for unicode and byte input/output streams.\n\n\n", "3.01": "-----------------\n\n* Initial release.  The version number reflects the codename\n  of the project (PyYAML 3000) and differenciates it from\n  the abandoned PyYaml module. \n\n", "3.10": "-----------------\n\n* Do not try to build LibYAML bindings on platforms other than CPython\n  (Thank to olt(at)bogosoft(dot)com).\n* Clear cyclic references in the parser and the emitter\n  (Thank to kristjan(at)ccpgames(dot)com).\n* Dropped support for Python 2.3 and 2.4.\n\n", "3.09": "-----------------\n\n* Fixed an obscure scanner error not reported when there is\n  no line break at the end of the stream (Thank to Ingy).\n* Fixed use of uninitialized memory when emitting anchors with\n  LibYAML bindings (Thank to cegner(at)yahoo-inc(dot)com).\n* Fixed emitting incorrect BOM characters for UTF-16 (Thank to\n  Valentin Nechayev)\n* Fixed the emitter for folded scalars not respecting the preferred\n  line width (Thank to Ingy).\n* Fixed a subtle ordering issue with emitting '%TAG' directives\n  (Thank to Andrey Somov).\n* Fixed performance regression with LibYAML bindings.\n\n\n", "3.04": "-----------------\n\n* Include experimental LibYAML bindings.\n* Fully support recursive structures.\n* Sort dictionary keys.  Mapping node values are now represented\n  as lists of pairs instead of dictionaries.  No longer check\n  for duplicate mapping keys as it didn't work correctly anyway.\n* Fix invalid output of single-quoted scalars in cases when a single\n  quote is not escaped when preceeded by whitespaces or line breaks.\n* To make porting easier, rewrite Parser not using generators.\n* Fix handling of unexpected block mapping values.\n* Fix a bug in Representer.represent_object: copy_reg.dispatch_table\n  was not correctly handled.\n* Fix a bug when a block scalar is incorrectly emitted in the simple\n  key context.\n* Hold references to the objects being represented.\n* Make Representer not try to guess !!pairs when a list is represented.\n* Fix timestamp constructing and representing.\n* Fix the 'N' plain scalar being incorrectly recognized as !!bool.\n\n\n", "3.07": "-----------------\n\n* The emitter learned to use an optional indentation indicator\n  for block scalar; thus scalars with leading whitespaces\n  could now be represented in a literal or folded style.\n* The test suite is now included in the source distribution.\n  To run the tests, type 'python setup.py test'.\n* Refactored the test suite: dropped unittest in favor of\n  a custom test appliance.\n* Fixed the path resolver in CDumper.\n* Forced an explicit document end indicator when there is\n  a possibility of parsing ambiguity.\n* More setup.py improvements: the package should be usable\n  when any combination of setuptools, Pyrex and LibYAML\n  is installed.\n* Windows binary packages are built against LibYAML-0.1.2.\n* Minor typos and corrections (Thank to Ingy dot Net\n  and Andrey Somov).\n\n\n", "3.06": "-----------------\n\n* setup.py checks whether LibYAML is installed and if so, builds\n  and installs LibYAML bindings.  To force or disable installation\n  of LibYAML bindings, use '--with-libyaml' or '--without-libyaml'\n  respectively.\n* The source distribution includes compiled Pyrex sources so\n  building LibYAML bindings no longer requires Pyrex installed.\n* 'yaml.load()' raises an exception if the input stream contains\n  more than one YAML document.\n* Fixed exceptions produced by LibYAML bindings.\n* Fixed a dot '.' character being recognized as !!float.\n* Fixed Python 2.3 compatibility issue in constructing !!timestamp values.\n* Windows binary packages are built against the LibYAML stable branch.\n* Added attributes 'yaml.__version__' and  'yaml.__with_libyaml__'.\n\n\n"}, "pytest-cov": {"2.2.0": "------------------\n\n* Added support for changing working directory in tests. Previously changing working\n  directory would disable coverage measurements in suprocesses.\n* Fixed broken handling for ``--cov-report=annotate``.\n\n", "2.5.1": "------------------\n\n* Fixed xdist breakage (regression in ``2.5.0``).\n  Fixes `157 <https://github.com/pytest-dev/pytest-cov/issues/157>`_.\n* Allow setting custom ``data_file`` name in ``.coveragerc``.\n  Fixes `145 <https://github.com/pytest-dev/pytest-cov/issues/145>`_.\n  Contributed by Jannis Leidel & Ionel Cristian M\u0103rie\u0219 in\n  `156 <https://github.com/pytest-dev/pytest-cov/pull/156>`_.\n\n", "2.3.1": "------------------\n\n* Fixed regression causing spurious errors when xdist was used. See `124\n  <https://github.com/pytest-dev/pytest-cov/issues/124>`_.\n* Fixed DeprecationWarning about incorrect `addoption` use. Contributed by Florian Bruhin in `PR127\n  <https://github.com/pytest-dev/pytest-cov/pull/127>`_.\n* Fixed deprecated use of funcarg fixture API. Contributed by Daniel Hahler in `PR125\n  <https://github.com/pytest-dev/pytest-cov/pull/125>`_.\n\n", "2.2.1": "------------------\n\n* Fixed incorrect merging of coverage data when xdist was used and coverage was ``>= 4.0``.\n\n", "2.3.0": "------------------\n\n* Add support for specifying output location for html, xml, and annotate report.\n  Contributed by Patrick Lannigan in `PR113 <https://github.com/pytest-dev/pytest-cov/pull/113>`_.\n* Fix bug hiding test failure when cov-fail-under failed.\n* For coverage >= 4.0, match the default behaviour of `coverage report` and\n  error if coverage fails to find the source instead of just printing a warning.\n  Contributed by David Szotten in `PR116 <https://github.com/pytest-dev/pytest-cov/pull/116>`_.\n* Fixed bug occurred when bare ``--cov`` parameter was used with xdist.\n  Contributed by Michael Elovskikh in `PR120 <https://github.com/pytest-dev/pytest-cov/pull/120>`_.\n* Add support for ``skip_covered`` and added ``--cov-report=term-skip-covered`` command\n  line options. Contributed by Saurabh Kumar in `PR115 <https://github.com/pytest-dev/pytest-cov/pull/115>`_.\n\n", "2.5.0": "------------------\n\n* Always show a summary when ``--cov-fail-under`` is used. Contributed by Francis Niu in `PR141\n  <https://github.com/pytest-dev/pytest-cov/pull/141>`_.\n* Added ``--cov-branch`` option. Fixes `85 <https://github.com/pytest-dev/pytest-cov/issues/85>`_.\n* Improve exception handling in subprocess setup. Fixes `144 <https://github.com/pytest-dev/pytest-cov/issues/144>`_.\n* Fixed handling when ``--cov`` is used multiple times. Fixes `151 <https://github.com/pytest-dev/pytest-cov/issues/151>`_.\n\n", "1.8.2": "------------------\n\n* N/A\n", "2.4.0": "------------------\n\n* Added a \"disarm\" option: ``--no-cov``. It will disable coverage measurements. Contributed by Zoltan Kozma in\n  `PR135 <https://github.com/pytest-dev/pytest-cov/pull/135>`_.\n\n  **WARNING: Do not put this in your configuration files, it's meant to be an one-off for situations where you want to\n  disable coverage from command line.**\n* Fixed broken exception handling on ``.pth`` file. See `136 <https://github.com/pytest-dev/pytest-cov/issues/136>`_.\n\n", "2.0.0": "------------------\n\n* Added ``--cov-fail-under``, akin to the new ``fail_under`` option in `coverage-4.0`\n  (automatically activated if there's a ``[report] fail_under = ...`` in ``.coveragerc``).\n* Changed ``--cov-report=term`` to automatically upgrade to ``--cov-report=term-missing``\n  if there's ``[run] show_missing = True`` in ``.coveragerc``.\n* Changed ``--cov`` so it can be used with no path argument (in wich case the source\n  settings from ``.coveragerc`` will be used instead).\n* Fixed `.pth` installation to work in all cases (install, easy_install, wheels, develop etc).\n* Fixed `.pth` uninstallation to work for wheel installs.\n* Support for coverage 4.0.\n* Data file suffixing changed to use coverage's ``data_suffix=True`` option (instead of the\n  custom suffixing).\n* Avoid warning about missing coverage data (just like ``coverage.control.process_startup``).\n* Fixed a race condition when running with xdist (all the workers tried to combine the files).\n  It's possible that this issue is not present in `pytest-cov 1.8.X`.\n\n", "2.1.0": "------------------\n\n* Added support for `coverage 4.0b2`.\n* Added the ``--cov-append`` command line options. Contributed by Christian Ledermann\n  in `PR80 <https://github.com/pytest-dev/pytest-cov/pull/80>`_.\n\n"}, "pbr": {}, "flake8-print": {}}